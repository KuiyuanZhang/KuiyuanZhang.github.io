<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kuiyuan&#39;s Blog</title>
  
  <subtitle>Stay hungry. Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-27T11:33:23.593Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>KuiyuanZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习之逻辑回归（LR）</title>
    <link href="http://yoursite.com/2018/02/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%EF%BC%88LR%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/18/机器学习之逻辑回归（LR）/</id>
    <published>2018-02-18T11:44:47.000Z</published>
    <updated>2018-02-27T11:33:23.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>监督式学习、二分类模型</p><p>线性回归预测结果是连续值，而逻辑回归预测结果在应用转换函数后是离散值。</p></blockquote><a id="more"></a><p>线性回归预测结果是连续值，而逻辑回归预测结果在应用转换函数后是离散值。</p><p>逻辑回归最适合二元分类（数据集中 y=0 或 1，其中 1 指默认类别。例如，在预测某个事件是否会发生时，事件发生归类为 1；预测某人是否生病时，生病的状况会以1表示）。它以</p><p>应用在其中的转换函数而命名，称为逻辑函数 h(x)= 1/ (1 + e^x)，是一个 S 型曲线。</p><p>在逻辑回归中，输出值的形式为默认类的概率（不像线性回归中，输出值为直接产生）。因为是概率，所以输出值会介乎 0 到 1 之间。通过使用逻辑函数 h(x)= 1/ (1 + e^ -x)，对 X 值进行对数转换可得到输出值。然后用阙值将得到的概率，即输出值，应用到二元分类中。</p><p><strong>特点：</strong></p><blockquote><p>模型源自于逻辑斯蒂分布优化算法有改进的迭代尺度法、梯度下降法、拟牛顿法</p></blockquote><p><strong>优点：</strong></p><blockquote><p>简单，计算量小，存储资源低</p></blockquote><p><strong>缺点</strong>：</p><blockquote><p>欠拟合，精度不高</p></blockquote><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><ul><li><p>Sigmoid 函数</p><p>​</p></li></ul><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><h4 id="2-1-伪代码"><a href="#2-1-伪代码" class="headerlink" title="2.1 伪代码"></a>2.1 伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">每个回归系数初始化为 1</span><br><span class="line">重复 R 次:</span><br><span class="line">    计算整个数据集的梯度</span><br><span class="line">    使用 步长 x 梯度 更新回归系数的向量</span><br><span class="line">返回回归系数</span><br></pre></td></tr></table></figure><h4 id="2-2-模型特点"><a href="#2-2-模型特点" class="headerlink" title="2.2 模型特点"></a>2.2 模型特点</h4><blockquote><p>特征条件下类别的条件概率分布，对数线形模型</p></blockquote><p><strong>学习策略</strong></p><blockquote><p>极大似然估计，正则化的极大似然估计</p></blockquote><p><strong>学习的损失函数</strong></p><blockquote><p>逻辑斯谛损失</p></blockquote><p><strong>学习方法</strong></p><blockquote><p>改进的迭代尺度算法，梯度下降，拟牛顿法</p></blockquote><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h4 id="3-1-一般流程"><a href="#3-1-一般流程" class="headerlink" title="3.1 一般流程"></a>3.1 一般流程</h4><blockquote><p>收集数据: 采用任意方法收集数据<br>准备数据: 由于需要进行距离计算，因此要求数据类型为数值型。另外，结构化数据格式则最佳。<br>分析数据: 采用任意方法对数据进行分析。<br>训练算法: 大部分时间将用于训练，训练的目的是为了找到最佳的分类回归系数。<br>测试算法: 一旦训练步骤完成，分类将会很快。<br>使用算法: 首先，我们需要输入一些数据，并将其转换成对应的结构化数值；接着，基于训练好的回归系数就可以对这些数值进行简单的回归计算，判定它们属于哪个类别；在这之后，我们就可以在输出的类别上做一些其他分析工作。</p></blockquote><h4 id="3-2-调参"><a href="#3-2-调参" class="headerlink" title="3.2 调参"></a>3.2 调参</h4><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h4 id="4-1-核心算法"><a href="#4-1-核心算法" class="headerlink" title="4.1 核心算法"></a>4.1 核心算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sigmoid跳跃函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(inX)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+exp(-i<span class="comment"># 随机梯度上升</span></span><br><span class="line"><span class="comment"># 梯度上升优化算法在每次更新数据集时都需要遍历整个数据集，计算复杂都较高</span></span><br><span class="line"><span class="comment"># 随机梯度上升一次只用一个样本点来更新回归系数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stocGradAscent0</span><span class="params">(dataMatrix, classLabels)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Desc:</span></span><br><span class="line"><span class="string">        随机梯度上升，只使用一个样本点来更新回归系数</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataMatrix -- 输入数据的数据特征（除去最后一列）</span></span><br><span class="line"><span class="string">        classLabels -- 输入数据的类别标签（最后一列数据）</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        weights -- 得到的最佳回归系数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    alpha = <span class="number">0.01</span></span><br><span class="line">    <span class="comment"># n*1的矩阵</span></span><br><span class="line">    <span class="comment"># 函数ones创建一个全1的数组</span></span><br><span class="line">    weights = ones(n)   <span class="comment"># 初始化长度为n的数组，元素全部为 1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment"># sum(dataMatrix[i]*weights)为了求 f(x)的值， f(x)=a1*x1+b2*x2+..+nn*xn,此处求出的 h 是一个具体的数值，而不是一个矩阵</span></span><br><span class="line">        h = sigmoid(sum(dataMatrix[i]*weights))</span><br><span class="line">        <span class="comment"># print 'dataMatrix[i]===', dataMatrix[i]</span></span><br><span class="line">        <span class="comment"># 计算真实类别与预测类别之间的差值，然后按照该差值调整回归系数</span></span><br><span class="line">        error = classLabels[i] - h</span><br><span class="line">        <span class="comment"># 0.01*(1*1)*(1*n)</span></span><br><span class="line">        <span class="keyword">print</span> weights, <span class="string">"*"</span>*<span class="number">10</span> , dataMatrix[i], <span class="string">"*"</span>*<span class="number">10</span> , error</span><br><span class="line">        weights = weights + alpha * error * dataMatrix[i]</span><br><span class="line">    <span class="keyword">return</span> weightsnX))</span><br></pre></td></tr></table></figure><h4 id="4-2-sklearn实现"><a href="#4-2-sklearn实现" class="headerlink" title="4.2 sklearn实现"></a>4.2 sklearn实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model, datasets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入一些数据来玩</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 我们只采用样本数据的前两个feature</span></span><br><span class="line">X = iris.data[:, :<span class="number">2</span>]  </span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># 网格中的步长</span></span><br><span class="line"></span><br><span class="line">logreg = linear_model.LogisticRegression(C=<span class="number">1e5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们创建了一个 Neighbours Classifier 的实例，并拟合数据。</span></span><br><span class="line">logreg.fit(X, Y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制决策边界。为此我们将为网格 [x_min, x_max]x[y_min, y_max] 中的每个点分配一个颜色。</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">.5</span>, X[:, <span class="number">0</span>].max() + <span class="number">.5</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">.5</span>, X[:, <span class="number">1</span>].max() + <span class="number">.5</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line">Z = logreg.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果放入彩色图中</span></span><br><span class="line">Z = Z.reshape(xx.shape)</span><br><span class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将训练点也同样放入彩色图中</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=Y, edgecolors=<span class="string">'k'</span>, cmap=plt.cm.Paired)</span><br><span class="line">plt.xlabel(<span class="string">'Sepal length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Sepal width'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(xx.min(), xx.max())</span><br><span class="line">plt.ylim(yy.min(), yy.max())</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-3-《机器学习实战》（python3-x）"><a href="#4-3-《机器学习实战》（python3-x）" class="headerlink" title="4.3 《机器学习实战》（python3.x）"></a>4.3 《机器学习实战》（python3.x）</h4><p>​        <a href="https://github.com/KuiyuanZhang/Machine-Learning-in-Action/tree/master/chapter5/logistic.ipynb" target="_blank" rel="noopener">第五章  Logistic回归</a></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><ul><li>优化点</li><li>证明:</li><li>参考：<ul><li>李航《统计学习方法》</li><li>周志华《机器学习》</li><li><a href="http://www.apachecn.org/" target="_blank" rel="noopener">ApacheCN</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;监督式学习、二分类模型&lt;/p&gt;
&lt;p&gt;线性回归预测结果是连续值，而逻辑回归预测结果在应用转换函数后是离散值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑回归" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之树回归</title>
    <link href="http://yoursite.com/2018/02/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2018/02/17/机器学习之树回归/</id>
    <published>2018-02-17T08:35:03.000Z</published>
    <updated>2018-03-01T09:00:21.981Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CART(Classification And Regression Trees， 分类回归树) 的树构建算法。该算法既可以用于分类还可以用于回归。</p><p>做分类工作时，采用 GINI 值作为节点分裂的依据；回归时，采用样本的最小方差作为节点的分裂依据。</p></blockquote><a id="more"></a><blockquote><p>监督学习、生成模型、多类分类/回归</p></blockquote><p><strong>特点：</strong></p><blockquote><p>使用先验知识得到后验概率，由期望风险最小化得到后验概率最大化。</p><p>场景举例：情感分析、消费者分类</p></blockquote><p><strong>优点：</strong></p><blockquote><p>小规模数据集表现好，适合多分类</p><p>对于在小数据集上有显著特征的相关对象，朴素贝叶斯方法可对其进行快速分类</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>需要条件独立假设，会牺牲一定准确率，分类性能不一定高</p></blockquote><p><strong>适用数据类型：</strong></p><blockquote><p>标称型数据</p></blockquote><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><h4 id="2-1-伪代码"><a href="#2-1-伪代码" class="headerlink" title="2.1 伪代码"></a>2.1 伪代码</h4><ul><li>找到数据集切分的最佳位置，函数 chooseBestSplit() 伪代码大致如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对每个特征:</span><br><span class="line">    对每个特征值: </span><br><span class="line">        将数据集切分成两份（小于该特征值的数据样本放在左子树，否则放在右子树）</span><br><span class="line">        计算切分的误差</span><br><span class="line">        如果当前误差小于当前最小误差，那么将当前切分设定为最佳切分并更新最小误差</span><br><span class="line">返回最佳切分的特征和阈值</span><br></pre></td></tr></table></figure><ul><li>树构建算法，函数 createTree() 伪代码大致如下:   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">找到最佳的待切分特征:</span><br><span class="line">    如果该节点不能再分，将该节点存为叶节点</span><br><span class="line">    执行二元切分</span><br><span class="line">    在右子树调用 createTree() 方法</span><br><span class="line">    在左子树调用 createTree() 方法</span><br></pre></td></tr></table></figure><h4 id="2-2-模型特点"><a href="#2-2-模型特点" class="headerlink" title="2.2 模型特点"></a>2.2 模型特点</h4><p><strong>模型特点</strong></p><blockquote><p>分类树，回归树</p></blockquote><p><strong>学习策略</strong></p><blockquote><p>正则化的极大似然估计</p></blockquote><p><strong>学习的损失函数</strong></p><blockquote><p>对数似然损失</p></blockquote><p><strong>学习方法</strong></p><blockquote><p>特征选择，生成，剪枝</p></blockquote><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h4 id="3-1-一般流程"><a href="#3-1-一般流程" class="headerlink" title="3.1 一般流程"></a>3.1 一般流程</h4><blockquote><p>收集数据：采用任意方法收集数据。<br>准备数据：需要数值型数据，标称型数据应该映射成二值型数据。<br>分析数据：绘出数据的二维可视化显示结果，以字典方式生成树。<br>训练算法：大部分时间都花费在叶节点树模型的构建上。<br>测试算法：使用测试数据上的R^2值来分析模型的效果。<br>使用算法：使用训练处的树做预测，预测结果还可以用来做很多事情。</p></blockquote><h4 id="3-2-调参"><a href="#3-2-调参" class="headerlink" title="3.2 调参"></a>3.2 调参</h4><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h4 id="4-1-CART树核心算法"><a href="#4-1-CART树核心算法" class="headerlink" title="4.1 CART树核心算法"></a>4.1 CART树核心算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回每一个叶子结点的均值</span></span><br><span class="line"><span class="comment"># returns the value used for each leaf</span></span><br><span class="line"><span class="comment"># 我的理解是：regLeaf 是产生叶节点的函数，就是求均值，即用聚类中心点来代表这类数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regLeaf</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> mean(dataSet[:, <span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 计算总方差=方差*样本数</span></span><br><span class="line"><span class="comment"># 我的理解是：求这组数据的方差，即通过决策树划分，可以让靠近的数据分到同一类中去</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regErr</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    <span class="comment"># shape(dataSet)[0] 表示行数</span></span><br><span class="line">    <span class="keyword">return</span> var(dataSet[:, <span class="number">-1</span>]) * shape(dataSet)[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binSplitDataSet</span><span class="params">(dataSet, feature, value)</span>:</span></span><br><span class="line">    <span class="string">"""binSplitDataSet(将数据集，按照feature列的value进行 二元切分)</span></span><br><span class="line"><span class="string">        Description：在给定特征和特征值的情况下，该函数通过数组过滤方式将上述数据集合切分得到两个子集并返回。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataMat 数据集</span></span><br><span class="line"><span class="string">        feature 待切分的特征列</span></span><br><span class="line"><span class="string">        value 特征列要比较的值</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mat0 小于等于 value 的数据集在左边</span></span><br><span class="line"><span class="string">        mat1 大于 value 的数据集在右边</span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># # 测试案例</span></span><br><span class="line">    <span class="comment"># print 'dataSet[:, feature]=', dataSet[:, feature]</span></span><br><span class="line">    <span class="comment"># print 'nonzero(dataSet[:, feature] &gt; value)[0]=', nonzero(dataSet[:, feature] &gt; value)[0]</span></span><br><span class="line">    <span class="comment"># print 'nonzero(dataSet[:, feature] &lt;= value)[0]=', nonzero(dataSet[:, feature] &lt;= value)[0]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dataSet[:, feature] 取去每一行中，第1列的值(从0开始算)</span></span><br><span class="line">    <span class="comment"># nonzero(dataSet[:, feature] &gt; value)  返回结果为true行的index下标</span></span><br><span class="line">    mat0 = dataSet[nonzero(dataSet[:, feature] &gt; value)[<span class="number">0</span>], :] </span><br><span class="line">    mat1 = dataSet[nonzero(dataSet[:, feature] &lt;= value)[<span class="number">0</span>], :]</span><br><span class="line">    <span class="keyword">return</span> mat0, mat1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.用最佳方式切分数据集</span></span><br><span class="line"><span class="comment"># 2.生成相应的叶节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseBestSplit</span><span class="params">(dataSet, leafType=regLeaf, errType=regErr, ops=<span class="params">(<span class="number">1</span>, <span class="number">4</span>)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""chooseBestSplit(用最佳方式切分数据集 和 生成相应的叶节点)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataSet   加载的原始数据集</span></span><br><span class="line"><span class="string">        leafType  建立叶子点的函数</span></span><br><span class="line"><span class="string">        errType   误差计算函数(求总方差)</span></span><br><span class="line"><span class="string">        ops       [容许误差下降值，切分的最少样本数]。</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bestIndex feature的index坐标</span></span><br><span class="line"><span class="string">        bestValue 切分的最优值</span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ops=(1,4)，非常重要，因为它决定了决策树划分停止的threshold值，被称为预剪枝（prepruning），其实也就是用于控制函数的停止时机。</span></span><br><span class="line">    <span class="comment"># 之所以这样说，是因为它防止决策树的过拟合，所以当误差的下降值小于tolS，或划分后的集合size小于tolN时，选择停止继续划分。</span></span><br><span class="line">    <span class="comment"># 最小误差下降值，划分后的误差减小小于这个差值，就不用继续划分</span></span><br><span class="line">    tolS = ops[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 划分最小 size 小于，就不继续划分了</span></span><br><span class="line">    tolN = ops[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果结果集(最后一列为1个变量)，就返回退出</span></span><br><span class="line">    <span class="comment"># .T 对数据集进行转置</span></span><br><span class="line">    <span class="comment"># .tolist()[0] 转化为数组并取第0列</span></span><br><span class="line">    <span class="keyword">if</span> len(set(dataSet[:, <span class="number">-1</span>].T.tolist()[<span class="number">0</span>])) == <span class="number">1</span>: <span class="comment"># 如果集合size为1，也就是说全部的数据都是同一个类别，不用继续划分。</span></span><br><span class="line">        <span class="comment">#  exit cond 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, leafType(dataSet)</span><br><span class="line">    <span class="comment"># 计算行列值</span></span><br><span class="line">    m, n = shape(dataSet)</span><br><span class="line">    <span class="comment"># 无分类误差的总方差和</span></span><br><span class="line">    <span class="comment"># the choice of the best feature is driven by Reduction in RSS error from mean</span></span><br><span class="line">    S = errType(dataSet)</span><br><span class="line">    <span class="comment"># inf 正无穷大</span></span><br><span class="line">    bestS, bestIndex, bestValue = inf, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 循环处理每一列对应的feature值</span></span><br><span class="line">    <span class="keyword">for</span> featIndex <span class="keyword">in</span> range(n<span class="number">-1</span>): <span class="comment"># 对于每个特征</span></span><br><span class="line">        <span class="comment"># [0]表示这一列的[所有行]，不要[0]就是一个array[[所有行]]，下面的一行表示的是将某一列全部的数据转换为行，然后设置为list形式</span></span><br><span class="line">        <span class="keyword">for</span> splitVal <span class="keyword">in</span> set((dataSet[:,featIndex].T.A.tolist())[<span class="number">0</span>]):</span><br><span class="line">            <span class="comment"># 对该列进行分组，然后组内的成员的val值进行 二元切分</span></span><br><span class="line">            mat0, mat1 = binSplitDataSet(dataSet, featIndex, splitVal)</span><br><span class="line">            <span class="comment"># 判断二元切分的方式的元素数量是否符合预期</span></span><br><span class="line">            <span class="keyword">if</span> (shape(mat0)[<span class="number">0</span>] &lt; tolN) <span class="keyword">or</span> (shape(mat1)[<span class="number">0</span>] &lt; tolN):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            newS = errType(mat0) + errType(mat1)</span><br><span class="line">            <span class="comment"># 如果二元切分，算出来的误差在可接受范围内，那么就记录切分点，并记录最小误差</span></span><br><span class="line">            <span class="comment"># 如果划分后误差小于 bestS，则说明找到了新的bestS</span></span><br><span class="line">            <span class="keyword">if</span> newS &lt; bestS:</span><br><span class="line">                bestIndex = featIndex</span><br><span class="line">                bestValue = splitVal</span><br><span class="line">                bestS = newS</span><br><span class="line">    <span class="comment"># 判断二元切分的方式的元素误差是否符合预期</span></span><br><span class="line">    <span class="comment"># if the decrease (S-bestS) is less than a threshold don't do the split</span></span><br><span class="line">    <span class="keyword">if</span> (S - bestS) &lt; tolS:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, leafType(dataSet)</span><br><span class="line">    mat0, mat1 = binSplitDataSet(dataSet, bestIndex, bestValue)</span><br><span class="line">    <span class="comment"># 对整体的成员进行判断，是否符合预期</span></span><br><span class="line">    <span class="comment"># 如果集合的 size 小于 tolN </span></span><br><span class="line">    <span class="keyword">if</span> (shape(mat0)[<span class="number">0</span>] &lt; tolN) <span class="keyword">or</span> (shape(mat1)[<span class="number">0</span>] &lt; tolN): <span class="comment"># 当最佳划分后，集合过小，也不划分，产生叶节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, leafType(dataSet)</span><br><span class="line">    <span class="keyword">return</span> bestIndex, bestValue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(dataSet, leafType=regLeaf, errType=regErr, ops=<span class="params">(<span class="number">1</span>, <span class="number">4</span>)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""createTree(获取回归树)</span></span><br><span class="line"><span class="string">        Description：递归函数：如果构建的是回归树，该模型是一个常数，如果是模型树，其模型师一个线性方程。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        dataSet      加载的原始数据集</span></span><br><span class="line"><span class="string">        leafType     建立叶子点的函数</span></span><br><span class="line"><span class="string">        errType      误差计算函数</span></span><br><span class="line"><span class="string">        ops=(1, 4)   [容许误差下降值，切分的最少样本数]</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        retTree    决策树最后的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 选择最好的切分方式： feature索引值，最优切分值</span></span><br><span class="line">    <span class="comment"># choose the best split</span></span><br><span class="line">    feat, val = chooseBestSplit(dataSet, leafType, errType, ops)</span><br><span class="line">    <span class="comment"># if the splitting hit a stop condition return val</span></span><br><span class="line">    <span class="comment"># 如果 splitting 达到一个停止条件，那么返回 val</span></span><br><span class="line">    <span class="keyword">if</span> feat <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    retTree = &#123;&#125;</span><br><span class="line">    retTree[<span class="string">'spInd'</span>] = feat</span><br><span class="line">    retTree[<span class="string">'spVal'</span>] = val</span><br><span class="line">    <span class="comment"># 大于在右边，小于在左边，分为2个数据集</span></span><br><span class="line">    lSet, rSet = binSplitDataSet(dataSet, feat, val)</span><br><span class="line">    <span class="comment"># 递归的进行调用，在左右子树中继续递归生成树</span></span><br><span class="line">    retTree[<span class="string">'left'</span>] = createTree(lSet, leafType, errType, ops)</span><br><span class="line">    retTree[<span class="string">'right'</span>] = createTree(rSet, leafType, errType, ops)</span><br><span class="line">    <span class="keyword">return</span> retTree</span><br></pre></td></tr></table></figure><h4 id="4-2-sklearn实现"><a href="#4-2-sklearn实现" class="headerlink" title="4.2 sklearn实现"></a>4.2 sklearn实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入必要的模型和库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个随机的数据集</span></span><br><span class="line"><span class="comment"># 参考 https://docs.scipy.org/doc/numpy-1.6.0/reference/generated/numpy.random.mtrand.RandomState.html</span></span><br><span class="line">rng = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print 'lalalalala===', rng</span></span><br><span class="line"><span class="comment"># rand() 是给定形状的随机值，rng.rand(80, 1)即矩阵的形状是 80行，1列</span></span><br><span class="line"><span class="comment"># sort() </span></span><br><span class="line">X = np.sort(<span class="number">5</span> * rng.rand(<span class="number">80</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print 'X=', X</span></span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line"><span class="comment"># print 'y=', y</span></span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - rng.rand(<span class="number">16</span>))</span><br><span class="line"><span class="comment"># print 'yyy=', y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合回归模型</span></span><br><span class="line"><span class="comment"># regr_1 = DecisionTreeRegressor(max_depth=2)</span></span><br><span class="line"><span class="comment"># 保持 max_depth=5 不变，增加 min_samples_leaf=6 的参数，效果进一步提升了</span></span><br><span class="line">regr_2 = DecisionTreeRegressor(max_depth=<span class="number">5</span>)</span><br><span class="line">regr_2 = DecisionTreeRegressor(min_samples_leaf=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># regr_3 = DecisionTreeRegressor(max_depth=4)</span></span><br><span class="line"><span class="comment"># regr_1.fit(X, y)</span></span><br><span class="line">regr_2.fit(X, y)</span><br><span class="line"><span class="comment"># regr_3.fit(X, y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">X_test = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)[:, np.newaxis]</span><br><span class="line"><span class="comment"># y_1 = regr_1.predict(X_test)</span></span><br><span class="line">y_2 = regr_2.predict(X_test)</span><br><span class="line"><span class="comment"># y_3 = regr_3.predict(X_test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制结果</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(X, y, c=<span class="string">"darkorange"</span>, label=<span class="string">"data"</span>)</span><br><span class="line"><span class="comment"># plt.plot(X_test, y_1, color="cornflowerblue", label="max_depth=2", linewidth=2)</span></span><br><span class="line">plt.plot(X_test, y_2, color=<span class="string">"yellowgreen"</span>, label=<span class="string">"max_depth=5"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># plt.plot(X_test, y_3, color="red", label="max_depth=3", linewidth=2)</span></span><br><span class="line">plt.xlabel(<span class="string">"data"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"target"</span>)</span><br><span class="line">plt.title(<span class="string">"Decision Tree Regression"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-3-《机器学习实战》（python3-x）"><a href="#4-3-《机器学习实战》（python3-x）" class="headerlink" title="4.3 《机器学习实战》（python3.x）"></a>4.3 《机器学习实战》（python3.x）</h4><p>​        <a href="http://nbviewer.jupyter.org/github/KuiyuanZhang/Machine-Learning-in-Action/tree/master/chapter9/cart_tree.ipynb" target="_blank" rel="noopener">第九章 树回归 </a></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><ul><li>优化点</li><li>证明</li><li>参考：<ul><li>李航    《统计学习方法》</li><li>周志华《机器学习》</li><li><a href="http://www.apachecn.org/" target="_blank" rel="noopener">ApacheCN</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CART(Classification And Regression Trees， 分类回归树) 的树构建算法。该算法既可以用于分类还可以用于回归。&lt;/p&gt;
&lt;p&gt;做分类工作时，采用 GINI 值作为节点分裂的依据；回归时，采用样本的最小方差作为节点的分裂依据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="CART" scheme="http://yoursite.com/tags/CART/"/>
    
      <category term="树回归" scheme="http://yoursite.com/tags/%E6%A0%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之决策树</title>
    <link href="http://yoursite.com/2018/02/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>http://yoursite.com/2018/02/16/机器学习之决策树/</id>
    <published>2018-02-16T15:34:10.000Z</published>
    <updated>2018-02-27T11:19:50.028Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>无监督学习、判别模型、多分类/回归</p></blockquote><p><strong>特点：</strong></p><blockquote><p>适用于小数据集，在进行逐步应答过程中，典型的决策树分析会使用分层变量或决策节点。</p><p>场景举例：基于规则的信用评估、赛马结果预测</p></blockquote><p><strong>优点：</strong></p><blockquote><p>计算量简单，可解释性强，比较适合处理有缺失属性值的样本，能够处理不相关的特征；</p><p>擅长对人、地点、事物的一系列不同特征、品质、特性进行评估</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>容易过拟合（后续出现了随机森林，减小了过拟合现象）,使用剪枝来避免过拟合</p></blockquote><p><strong>适用数据类型：</strong></p><blockquote><p>数值型和标称型</p></blockquote><a id="more"></a><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul><li><p><strong>信息</strong></p><p>​    这个是熵和信息增益的基础概念，我觉得对于这个概念的理解更应该把他认为是一用名称，就比如‘鸡‘(加引号意思是说这个是名称)是用来修饰鸡(没加引号是说存在的动物即鸡)，‘狗’是用来修饰狗的，但是假如在鸡还未被命名为’鸡’的时候，鸡被命名为‘狗’，狗未被命名为‘狗’的时候，狗被命名为’鸡’，那么现在我们看到狗就会称其为‘鸡’，见到鸡的话会称其为‘鸡’，同理，信息应该是对一个抽象事物的命名，无论用不用‘信息’来命名这种抽象事物，或者用其他名称来命名这种抽象事物，这种抽象事物是客观存在的。</p><p>​    引用香农的话，信息是用来消除随机不确定性的东西，当然这句话虽然经典，但是还是很难去搞明白这种东西到底是个什么样，可能在不同的地方来说，指的东西又不一样，从数学的角度来说可能更加清楚一些，数学本来就是建造在悬崖之上的一种理论，一种抽象的理论，利用抽象来解释抽象可能更加恰当，同时也是在机器学习决策树中用的定义，如果带分类的事物集合可以划分为多个类别当中，则某个类（xi）的信息定义如下:</p></li></ul><p>​    　　　　　　　　　　　　　　　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/161909021542396.png" alt="img"></p><p>​    I(x)用来表示随机变量的信息，p(xi)指是当xi发生时的概率，这里说一下随机变量的概念，随机变量时概率论    中的概念，是从样本空间到实数集的一个映射，样本空间是指所有随机事件发生的结果的并集，比如当你抛硬币的时候，会发生两个结果，正面或反面，而随机事件在这里可以是，硬币是正面；硬币是反面；两个随机事件，而{正面，反面}这个集合便是样本空间，但是在数学中不会说用‘正面’、‘反面’这样的词语来作为数学运算的介质，而是用0表示反面，用1表示正面，而“正面-&gt;1”,”反面-&gt;0”这样的映射便为随机变量，即类似一个数学函数。</p><ul><li><p><strong>熵</strong></p><p>既然信息已经说完，熵说起来就不会那么的抽象，更多的可能是概率论的定义，熵是约翰.冯.诺依曼建议使用的命名（当然是英文），最初原因是因为大家都不知道它是什么意思，在信息论和概率论中熵是对随机变量不确定性的度量,与上边联系起来，熵便是信息的期望值，可以记作：</p><p>　　　　　　　　　　　　　　　　　　　　　　　　　        　<img src="https://images0.cnblogs.com/blog2015/605905/201506/161925257011050.png" alt="img"></p><p>​熵只依赖X的分布，和X的取值没有关系，熵是用来度量不确定性，当熵越大，概率说X=xi的不确定性越大，反之越小，在机器学期中分类中说，熵越大即这个类别的不确定性更大，反之越小，当随机变量的取值为两个时，熵随概率的变化曲线如下图：</p></li></ul><p>　　　　　　　　　　　　　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/161933409209524.png" alt="img"></p><p>当p=0或p=1时，H(p)=0,随机变量完全没有不确定性，当p=0.5时，H(p)=1,此时随机变量的不确定性最大</p><p>条件熵</p><p>​    条件熵是用来解释信息增益而引入的概念，概率定义：随机变量X在给定条件下随机变量Y的条件熵，对定义描述为：X给定条件下Y的条件干率分布的熵对X的数学期望，在机器学习中为选定某个特征后的熵，公式如下：</p><p>　　　　　　　　　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/162006264669404.png" alt="img"></p><p>这里可能会有疑惑，这个公式是对条件概率熵求期望，但是上边说是选定某个特征的熵，没错，是选定某个特征的熵，因为一个特征可以将待分类的事物集合分为多类，即一个特征对应着多个类别，因此在此的多个分类即为X的取值。</p><ul><li><p><strong>信息增益</strong></p><p>信息增益在决策树算法中是用来选择特征的指标，信息增益越大，则这个特征的选择性越好，在概率中定义为：待分类的集合的熵和选定某个特征的条件熵之差（这里只的是经验熵或经验条件熵，由于真正的熵并不知道，是根据样本计算出来的），公式如下：</p></li></ul><p>　　　　　　　　　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/162013009355725.png" alt="img"></p><p>​    注意：这里不要理解偏差，因为上边说了熵是类别的，但是在这里又说是集合的熵，没区别，因为在计算熵        的时候是根据各个类别对应的值求期望来等到熵</p><p>​    信息增益算法（举例，摘自统计学习算法）</p><p>​    训练数据集合D，|D|为样本容量，即样本的个数（D中元素个数），设有K个类Ck来表示，|Ck|为Ci的样本个数，|Ck|之和为|D|，k=1，2…..，根据特征A将D划分为n个子集D1，D2…..Dn，|Di|为Di的样本个数，|Di|之和为|D|,i=1,2,….,记Di中属于Ck的样本集合为Dik,即交集，|Dik|为Dik的样本个数，算法如下：</p><p>​    输入：D，A</p><p>​    输出：信息增益g(D,A)</p><p>(1)D的经验熵H(D)</p><p>　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/162037486546319.png" alt="img"></p><p>​    此处的概率计算是根据古典概率计算，由于训练数据集总个数为|D|，某个分类的个数为|Ck|，在某个分类的概率，或说随机变量取某值的概率为：|Ck|/|D|</p><p>(2)选定A的经验条件熵H(D|A)</p><p>　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/162038320452331.png" alt="img"></p><p>此处的概率计算同上，由于|Di|是选定特征的某个分类的样本个数，则|Di|/|D|,可以说为在选定特征某个分类的概率，后边的求和可以理解为在选定特征的某个类别下的条件概率的熵，即训练集为Di，交集Dik可以理解在Di条件下某个分类的样本个数，即k为某个分类，就是缩小训练集为Di的熵</p><p>(3)信息增益</p><p>　　　　　　　　<img src="https://images0.cnblogs.com/blog2015/605905/201506/162039064983405.png" alt="img"></p><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2.基本思路"></a>2.基本思路</h2><h4 id="2-1-伪代码"><a href="#2-1-伪代码" class="headerlink" title="2.1 伪代码"></a>2.1 伪代码</h4><blockquote><p>检测数据集中的所有数据的分类标签是否相同:<br>​    If so return 类标签<br>​    Else:<br>​        寻找划分数据集的最好特征（划分之后信息熵最小，也就是信息增益最大的特征）<br>​        划分数据集<br>​        创建分支节点<br>​            for 每个划分的子集<br>​                调用函数 createBranch （创建分支的函数）并增加返回结果到分支节点中<br>​        return 分支节点</p></blockquote><h4 id="2-2-算法特点"><a href="#2-2-算法特点" class="headerlink" title="2.2 算法特点"></a>2.2 算法特点</h4><blockquote><p>优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。<br>缺点：可能会产生过度匹配问题。<br>适用数据类型：数值型和标称型。</p></blockquote><p>​    分类回归树（CART）是决策树的一种应用形式，其它形式还有 ID3 和 C4.5 等。</p><p>​    CART 的非终端节点为根节点和内节点。终端节点为叶节点。每个非终端节点代表一个单个输入变量 (X) 和该变量的分割点；而叶节点代表输出变量 (y)。该模型以如下形式用于预测：<strong>沿着决策树的分叉点，到达叶节点，输出在该叶节点上表示的值。</strong></p><p>​    图 3 中的决策树分类了某人根据自己的年龄和婚姻状况决定买跑车还是旅行车。如果此人超过 30 岁且未婚，我们这样沿着决策树：“超过 30 岁吗？” -&gt; 是 -&gt;“已婚？” -&gt; 否。因此，模型的输出结果为跑车。</p><p>​    决策树的生成是一个递归过程</p><p><strong>三种情况下导致导致递归返回</strong>：</p><ul><li>当前节点包含的样本全属于一个类别，无需划分</li><li>当前属性集为空，或是所有属性上取值相同，无法划分</li><li>当前节点包含的样本集合为空，不能划分</li></ul><h3 id="如何建立决策树-Hunt算法"><a href="#如何建立决策树-Hunt算法" class="headerlink" title="如何建立决策树(Hunt算法)"></a>如何建立决策树(Hunt算法)</h3><blockquote><p>Hunt算法的递归定义：</p><ol><li>如果与节点t相关联的训练记录集中，所有记录都属于同一个类，则t是叶节点</li><li>如果与节点t相关联的训练记录集中包含属于多个类的记录，则选择一个<strong>属性测试条件</strong>，将记录划分为较小长度子集。对于测试条件的而每个输出，创建一个子节点，并根据测试结果将Dt中的记录分布到子节点中，然后对每个子节点递归调用此方法。</li></ol></blockquote><ul><li><p><strong>ID3（Iterative Dichotomiser 3）</strong></p><p>由 Ross Quinlan 在1986年提出。该算法创建一个多路树，找到每个节点（即以贪心的方式）分类特征，这将产生分类目标的最大信息增益。决策树发展到其最大尺寸，然后通常利用剪枝来提高树对未知数据的泛华能力。</p></li><li><p><strong>C4.5</strong> </p><p>是 ID3 的后继者，并且通过动态定义将连续属性值分割成一组离散间隔的离散属性（基于数字变量），消除了特征必须被明确分类的限制。C4.5 将训练的树（即，ID3算法的输出）转换成 if-then 规则的集合。然后评估每个规则的这些准确性，以确定应用它们的顺序。如果规则的准确性没有改变，则需要决策树的树枝来解决。</p></li><li><p><strong>C5.0</strong> </p><p>Quinlan 根据专有许可证发布的最新版本。它使用更少的内存，并建立比 C4.5 更小的规则集，同时更准确。</p></li><li><p><strong>CART（Classification and Regression Trees （分类和回归树））</strong></p><p>与 C4.5 非常相似，但它不同之处在于它支持数值目标变量（回归），并且不计算规则集。CART 使用在每个节点产生最大信息增益的特征和阈值来构造二叉树。</p></li></ul><blockquote><p>scikit-learn 源代码中使用 CART 算法的优化版本。</p></blockquote><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h4 id="3-1-一般流程"><a href="#3-1-一般流程" class="headerlink" title="3.1 一般流程"></a>3.1 一般流程</h4><blockquote><p>收集数据：可以使用任何方法。<br>准备数据：树构造算法只适用于标称型数据，因此数值型数据必须离散化。<br>分析数据：可以使用任何方法，构造树完成之后，我们应该检查图形是否符合预期。<br>训练算法：构造树的数据结构。<br>测试算法：使用经验树计算错误率。（经验树没有搜索到较好的资料，有兴趣的同学可以来补充）<br>使用算法：此步骤可以适用于任何监督学习算法，而使用决策树可以更好地理解数据的内在含义。</p></blockquote><h4 id="3-2-调参"><a href="#3-2-调参" class="headerlink" title="3.2 调参"></a>3.2 调参</h4><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h4 id="4-1-核心算法"><a href="#4-1-核心算法" class="headerlink" title="4.1 核心算法"></a>4.1 核心算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(dataSet, labels)</span>:</span></span><br><span class="line">    classList = [example[<span class="number">-1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</span><br><span class="line">    <span class="comment"># 如果数据集的最后一列的第一个值出现的次数=整个集合的数量，也就说只有一个类别，就只直接返回结果就行</span></span><br><span class="line">    <span class="comment"># 第一个停止条件：所有的类标签完全相同，则直接返回该类标签。</span></span><br><span class="line">    <span class="comment"># count() 函数是统计括号中的值在list中出现的次数</span></span><br><span class="line">    <span class="keyword">if</span> classList.count(classList[<span class="number">0</span>]) == len(classList):</span><br><span class="line">        <span class="keyword">return</span> classList[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 如果数据集只有1列，那么最初出现label次数最多的一类，作为结果</span></span><br><span class="line">    <span class="comment"># 第二个停止条件：使用完了所有特征，仍然不能将数据集划分成仅包含唯一类别的分组。</span></span><br><span class="line">    <span class="keyword">if</span> len(dataSet[<span class="number">0</span>]) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> majorityCnt(classList)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择最优的列，得到最优列对应的label含义</span></span><br><span class="line">    bestFeat = chooseBestFeatureToSplit(dataSet)</span><br><span class="line">    <span class="comment"># 获取label的名称</span></span><br><span class="line">    bestFeatLabel = labels[bestFeat]</span><br><span class="line">    <span class="comment"># 初始化myTree</span></span><br><span class="line">    myTree = &#123;bestFeatLabel: &#123;&#125;&#125;</span><br><span class="line">    <span class="comment"># 注：labels列表是可变对象，在PYTHON函数中作为参数时传址引用，能够被全局修改</span></span><br><span class="line">    <span class="comment"># 所以这行代码导致函数外的同名变量被删除了元素，造成例句无法执行，提示'no surfacing' is not in list</span></span><br><span class="line">    <span class="keyword">del</span>(labels[bestFeat])</span><br><span class="line">    <span class="comment"># 取出最优列，然后它的branch做分类</span></span><br><span class="line">    featValues = [example[bestFeat] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</span><br><span class="line">    uniqueVals = set(featValues)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:</span><br><span class="line">        <span class="comment"># 求出剩余的标签label</span></span><br><span class="line">        subLabels = labels[:]</span><br><span class="line">        <span class="comment"># 遍历当前选择特征包含的所有属性值，在每个数据集划分上递归调用函数createTree()</span></span><br><span class="line">        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), subLabels)</span><br><span class="line">        <span class="comment"># print 'myTree', value, myTree</span></span><br><span class="line">    <span class="keyword">return</span> myTree</span><br></pre></td></tr></table></figure><h4 id="4-2-sklearn实现"><a href="#4-2-sklearn实现" class="headerlink" title="4.2 sklearn实现"></a>4.2 sklearn实现</h4><ul><li><strong>决策树分类器</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">n_classes = <span class="number">3</span></span><br><span class="line">plot_colors = <span class="string">"bry"</span></span><br><span class="line">plot_step = <span class="number">0.02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pairidx, pair <span class="keyword">in</span> enumerate([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>]]):</span><br><span class="line">    <span class="comment"># 我们只用两个相应的features</span></span><br><span class="line">    X = iris.data[:, pair]</span><br><span class="line">    y = iris.target</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    clf = DecisionTreeClassifier().fit(X, y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制决策边界</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, pairidx + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),</span><br><span class="line">                         np.arange(y_min, y_max, plot_step))</span><br><span class="line"></span><br><span class="line">    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    cs = plt.contourf(xx, yy, Z, cmap=plt.cm.Paired)</span><br><span class="line"></span><br><span class="line">    plt.xlabel(iris.feature_names[pair[<span class="number">0</span>]])</span><br><span class="line">    plt.ylabel(iris.feature_names[pair[<span class="number">1</span>]])</span><br><span class="line">    plt.axis(<span class="string">"tight"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制训练点</span></span><br><span class="line">    <span class="keyword">for</span> i, color <span class="keyword">in</span> zip(range(n_classes), plot_colors):</span><br><span class="line">        idx = np.where(y == i)</span><br><span class="line">        plt.scatter(X[idx, <span class="number">0</span>], X[idx, <span class="number">1</span>], c=color, label=iris.target_names[i],</span><br><span class="line">                    cmap=plt.cm.Paired)</span><br><span class="line"></span><br><span class="line">    plt.axis(<span class="string">"tight"</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">"Decision surface of a decision tree using paired features"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><strong>决策树回归器</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入必要的模型和库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个随机的数据集</span></span><br><span class="line"><span class="comment"># 参考 https://docs.scipy.org/doc/numpy-1.6.0/reference/generated/numpy.random.mtrand.RandomState.html</span></span><br><span class="line">rng = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print 'lalalalala===', rng</span></span><br><span class="line"><span class="comment"># rand() 是给定形状的随机值，rng.rand(80, 1)即矩阵的形状是 80行，1列</span></span><br><span class="line"><span class="comment"># sort() </span></span><br><span class="line">X = np.sort(<span class="number">5</span> * rng.rand(<span class="number">80</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># print 'X=', X</span></span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line"><span class="comment"># print 'y=', y</span></span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - rng.rand(<span class="number">16</span>))</span><br><span class="line"><span class="comment"># print 'yyy=', y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合回归模型</span></span><br><span class="line"><span class="comment"># regr_1 = DecisionTreeRegressor(max_depth=2)</span></span><br><span class="line"><span class="comment"># 保持 max_depth=5 不变，增加 min_samples_leaf=6 的参数，效果进一步提升了</span></span><br><span class="line">regr_2 = DecisionTreeRegressor(max_depth=<span class="number">5</span>)</span><br><span class="line">regr_2 = DecisionTreeRegressor(min_samples_leaf=<span class="number">6</span>)</span><br><span class="line"><span class="comment"># regr_3 = DecisionTreeRegressor(max_depth=4)</span></span><br><span class="line"><span class="comment"># regr_1.fit(X, y)</span></span><br><span class="line">regr_2.fit(X, y)</span><br><span class="line"><span class="comment"># regr_3.fit(X, y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">X_test = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)[:, np.newaxis]</span><br><span class="line"><span class="comment"># y_1 = regr_1.predict(X_test)</span></span><br><span class="line">y_2 = regr_2.predict(X_test)</span><br><span class="line"><span class="comment"># y_3 = regr_3.predict(X_test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制结果</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(X, y, c=<span class="string">"darkorange"</span>, label=<span class="string">"data"</span>)</span><br><span class="line"><span class="comment"># plt.plot(X_test, y_1, color="cornflowerblue", label="max_depth=2", linewidth=2)</span></span><br><span class="line">plt.plot(X_test, y_2, color=<span class="string">"yellowgreen"</span>, label=<span class="string">"max_depth=5"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># plt.plot(X_test, y_3, color="red", label="max_depth=3", linewidth=2)</span></span><br><span class="line">plt.xlabel(<span class="string">"data"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"target"</span>)</span><br><span class="line">plt.title(<span class="string">"Decision Tree Regression"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-3-《机器学习实战》（python3-x）"><a href="#4-3-《机器学习实战》（python3-x）" class="headerlink" title="4.3 《机器学习实战》（python3.x）"></a>4.3 《机器学习实战》（python3.x）</h4><p>​    <a href="https://github.com/KuiyuanZhang/Machine-Learning-in-Action/tree/master/chapter3/tree.ipynb" target="_blank" rel="noopener">第三章 决策树</a></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><ul><li>优化点</li><li>证明</li><li>参考：<ul><li>李航    《统计学习方法》</li><li>周志华《机器学习》</li><li><a href="http://www.apachecn.org/" target="_blank" rel="noopener">ApacheCN</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;无监督学习、判别模型、多分类/回归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;适用于小数据集，在进行逐步应答过程中，典型的决策树分析会使用分层变量或决策节点。&lt;/p&gt;
&lt;p&gt;场景举例：基于规则的信用评估、赛马结果预测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算量简单，可解释性强，比较适合处理有缺失属性值的样本，能够处理不相关的特征；&lt;/p&gt;
&lt;p&gt;擅长对人、地点、事物的一系列不同特征、品质、特性进行评估&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;容易过拟合（后续出现了随机森林，减小了过拟合现象）,使用剪枝来避免过拟合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;适用数据类型：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数值型和标称型&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之朴素贝叶斯（bayes）</title>
    <link href="http://yoursite.com/2018/02/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%EF%BC%88bayes%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/13/机器学习之朴素贝叶斯（bayes）/</id>
    <published>2018-02-13T10:07:04.000Z</published>
    <updated>2018-02-14T04:24:08.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>监督学习、生成模型、多类分类</p></blockquote><p><strong>特点：</strong></p><blockquote><p>使用先验知识得到后验概率，由期望风险最小化得到后验概率最大化。</p><p>场景举例：情感分析、消费者分类</p></blockquote><p><strong>优点：</strong></p><blockquote><p>小规模数据集表现好，适合多分类</p><p>对于在小数据集上有显著特征的相关对象，朴素贝叶斯方法可对其进行快速分类</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>需要条件独立假设，会牺牲一定准确率，分类性能不一定高</p></blockquote><p><strong>适用数据类型：</strong></p><blockquote><p>标称型数据</p></blockquote><a id="more"></a><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul><li><p><strong>条件概率（又称后验概率）</strong></p><p>事件A在另外一个事件B已经发生条件下的发生概率。条件概率表示为P(A|B)，读作“在B条件下A的概率”。</p></li><li><p><strong>频率主义学派</strong></p><p>认为参数虽然未知，但却是客观存在的固定值，因此，可以通过优化似然函数等准则来确定参数值，</p></li><li><p><strong>贝叶斯学派</strong></p><p>认为参数是未观察到的随机变量，其本身也可有分布，因此，可假定参数服从一个先验分布，然后基于观测到的数据来计算参数的后验分布。</p></li><li><p><strong>极大似然估计</strong></p><p>根据数据采样来估计概率分布参数的经典方法</p></li><li><p><strong>拉普拉斯修正</strong></p><p>为了避免其他属性携带的信息被训练集中未出现的属性值“抹去”，在估计概率值时通常进行“平滑”。</p><p>在先验概率中，分子加1，分母加N*1的情况。</p></li></ul><p>在某个事件已经发生的情况下，为了计算出另一个相同事件发生的概率，我们使用贝叶斯定理。根据某些变量的给定值，要想计算某个结果的概率，也就是根据我们的已知知识（d）计算假设（h）为真的概率，我们这样使用贝叶斯定理：</p><p>$$P(h|d)= (P(d|h) * P(h)) / P(d)$$</p><p>其中：</p><p>$$P(h|d)$$ =后验概率。假设h的概率为真，给定数据为d，那么 P(h|d)= P(d1| h)<em> P(d2| h)</em>….<em>P(dn| h)</em> P(d)</p><p>$$P(d|h)$$ =可能性。假设 h 为真时，数据 d 的概率。</p><p>$$P(h)$$ = 类的先验概率。假设 h 的概率为真（不管数据 d 的情况）。</p><p>$$P(d) = Predictor$$ 的先验概率。数据 d 的概率（不管假设 h 的情况）。</p><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><blockquote><p>提取所有文档中的词条并进行去重<br>获取文档的所有类别<br>计算每个类别中的文档数目<br>对每篇训练文档:<br>​    对每个类别:<br>​        如果词条出现在文档中–&gt;增加该词条的计数值（for循环或者矩阵相加）<br>​        增加所有词条的计数值（此类别下词条总数）<br>对每个类别:<br>​    对每个词条:<br>​        将该词条的数目除以总词条数目得到的条件概率（P(词条|类别)）<br>返回该文档属于每个类别的条件概率（P(类别|文档的所有词条)）</p></blockquote><p><strong>模型特点</strong></p><blockquote><p>特征与类别联合概率分布，条件独立假设</p></blockquote><p><strong>学习策略</strong></p><blockquote><p>极大似然估计，极大后验概率估计</p></blockquote><p><strong>学习的损失函数</strong></p><blockquote><p>对数似然损失</p></blockquote><p><strong>学习方法</strong></p><blockquote><p>概率计算公式，EM算法</p></blockquote><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h4 id="3-1-一般流程"><a href="#3-1-一般流程" class="headerlink" title="3.1 一般流程"></a>3.1 一般流程</h4><blockquote><p>收集数据: 可以使用任何方法。<br>准备数据: 需要数值型或者布尔型数据。<br>分析数据: 有大量特征时，绘制特征作用不大，此时使用直方图效果更好。<br>训练算法: 计算不同的独立特征的条件概率。<br>测试算法: 计算错误率。<br>使用算法: 一个常见的朴素贝叶斯应用是文档分类。可以在任意的分类场景中使用朴素贝叶斯分类器，不一定非要是文本。</p></blockquote><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h4 id="4-1-核心算法"><a href="#4-1-核心算法" class="headerlink" title="4.1 核心算法"></a>4.1 核心算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_trainNB0</span><span class="params">(trainMatrix, trainCategory)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    训练数据原版</span></span><br><span class="line"><span class="string">    :param trainMatrix: 文件单词矩阵 [[1,0,1,1,1....],[],[]...]</span></span><br><span class="line"><span class="string">    :param trainCategory: 文件对应的类别[0,1,1,0....]，列表长度等于单词矩阵数，其中的1代表对应的文件是侮辱性文件，0代表不是侮辱性矩阵</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 文件数</span></span><br><span class="line">    numTrainDocs = len(trainMatrix)</span><br><span class="line">    <span class="comment"># 单词数</span></span><br><span class="line">    numWords = len(trainMatrix[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 侮辱性文件的出现概率，即trainCategory中所有的1的个数，</span></span><br><span class="line">    <span class="comment"># 代表的就是多少个侮辱性文件，与文件的总数相除就得到了侮辱性文件的出现概率</span></span><br><span class="line">    pAbusive = sum(trainCategory) / float(numTrainDocs)</span><br><span class="line">    <span class="comment"># 构造单词出现次数列表</span></span><br><span class="line">    p0Num = zeros(numWords) <span class="comment"># [0,0,0,.....]</span></span><br><span class="line">    p1Num = zeros(numWords) <span class="comment"># [0,0,0,.....]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整个数据集单词出现总数</span></span><br><span class="line">    p0Denom = <span class="number">0.0</span></span><br><span class="line">    p1Denom = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTrainDocs):</span><br><span class="line">        <span class="comment"># 遍历所有的文件，如果是侮辱性文件，就计算此侮辱性文件中出现的侮辱性单词的个数</span></span><br><span class="line">        <span class="keyword">if</span> trainCategory[i] == <span class="number">1</span>:</span><br><span class="line">            p1Num += trainMatrix[i] <span class="comment">#[0,1,1,....]-&gt;[0,1,1,...]</span></span><br><span class="line">            p1Denom += sum(trainMatrix[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果不是侮辱性文件，则计算非侮辱性文件中出现的侮辱性单词的个数</span></span><br><span class="line">            p0Num += trainMatrix[i]</span><br><span class="line">            p0Denom += sum(trainMatrix[i])</span><br><span class="line">    <span class="comment"># 类别1，即侮辱性文档的[P(F1|C1),P(F2|C1),P(F3|C1),P(F4|C1),P(F5|C1)....]列表</span></span><br><span class="line">    <span class="comment"># 即 在1类别下，每个单词出现次数的占比</span></span><br><span class="line">    p1Vect = p1Num / p1Denom<span class="comment"># [1,2,3,5]/90-&gt;[1/90,...]</span></span><br><span class="line">    <span class="comment"># 类别0，即正常文档的[P(F1|C0),P(F2|C0),P(F3|C0),P(F4|C0),P(F5|C0)....]列表</span></span><br><span class="line">    <span class="comment"># 即 在0类别下，每个单词出现次数的占比</span></span><br><span class="line">    p0Vect = p0Num / p0Denom</span><br><span class="line">    <span class="keyword">return</span> p0Vect, p1Vect, pAbusive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainNB0</span><span class="params">(trainMatrix, trainCategory)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    训练数据优化版本</span></span><br><span class="line"><span class="string">    :param trainMatrix: 文件单词矩阵</span></span><br><span class="line"><span class="string">    :param trainCategory: 文件对应的类别</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 总文件数</span></span><br><span class="line">    numTrainDocs = len(trainMatrix)</span><br><span class="line">    <span class="comment"># 总单词数</span></span><br><span class="line">    numWords = len(trainMatrix[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 侮辱性文件的出现概率</span></span><br><span class="line">    pAbusive = sum(trainCategory) / float(numTrainDocs)</span><br><span class="line">    <span class="comment"># 构造单词出现次数列表</span></span><br><span class="line">    <span class="comment"># p0Num 正常的统计</span></span><br><span class="line">    <span class="comment"># p1Num 侮辱的统计 </span></span><br><span class="line">    <span class="comment"># 避免单词列表中的任何一个单词为0，而导致最后的乘积为0，所以将每个单词的出现次数初始化为 1</span></span><br><span class="line">    p0Num = ones(numWords)<span class="comment">#[0,0......]-&gt;[1,1,1,1,1.....]</span></span><br><span class="line">    p1Num = ones(numWords)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整个数据集单词出现总数，2.0根据样本/实际调查结果调整分母的值（2主要是避免分母为0，当然值可以调整）</span></span><br><span class="line">    <span class="comment"># p0Denom 正常的统计</span></span><br><span class="line">    <span class="comment"># p1Denom 侮辱的统计</span></span><br><span class="line">    p0Denom = <span class="number">2.0</span></span><br><span class="line">    p1Denom = <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTrainDocs):</span><br><span class="line">        <span class="keyword">if</span> trainCategory[i] == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 累加辱骂词的频次</span></span><br><span class="line">            p1Num += trainMatrix[i]</span><br><span class="line">            <span class="comment"># 对每篇文章的辱骂的频次 进行统计汇总</span></span><br><span class="line">            p1Denom += sum(trainMatrix[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p0Num += trainMatrix[i]</span><br><span class="line">            p0Denom += sum(trainMatrix[i])</span><br><span class="line">    <span class="comment"># 类别1，即侮辱性文档的[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]列表</span></span><br><span class="line">    p1Vect = log(p1Num / p1Denom)</span><br><span class="line">    <span class="comment"># 类别0，即正常文档的[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]列表</span></span><br><span class="line">    p0Vect = log(p0Num / p0Denom)</span><br><span class="line">    <span class="keyword">return</span> p0Vect, p1Vect, pAbusive</span><br></pre></td></tr></table></figure><h4 id="4-2-sklearn实现"><a href="#4-2-sklearn实现" class="headerlink" title="4.2 sklearn实现"></a>4.2 sklearn实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GaussianNB_高斯朴素贝叶斯</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.array([[<span class="number">-1</span>, <span class="number">-1</span>], [<span class="number">-2</span>, <span class="number">-1</span>], [<span class="number">-3</span>, <span class="number">-2</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>]])</span><br><span class="line">Y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line">clf = GaussianNB()</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line"><span class="keyword">print</span> (clf.predict([[<span class="number">-0.8</span>, <span class="number">-1</span>]]))</span><br><span class="line">clf_pf = GaussianNB()</span><br><span class="line">clf_pf.partial_fit(X, Y, np.unique(Y))</span><br><span class="line"><span class="keyword">print</span> (clf_pf.predict([[<span class="number">-0.8</span>, <span class="number">-1</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># MultinomialNB_多项朴素贝叶斯</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">import numpy as np</span></span><br><span class="line"><span class="string">X = np.random.randint(5, size=(6, 100))</span></span><br><span class="line"><span class="string">y = np.array([1, 2, 3, 4, 5, 6])</span></span><br><span class="line"><span class="string">from sklearn.naive_bayes import MultinomialNB</span></span><br><span class="line"><span class="string">clf = MultinomialNB()</span></span><br><span class="line"><span class="string">clf.fit(X, y)</span></span><br><span class="line"><span class="string">print (clf.predict(X[2:3]))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BernoulliNB_伯努利朴素贝叶斯</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">import numpy as np</span></span><br><span class="line"><span class="string">X = np.random.randint(2, size=(6, 100))</span></span><br><span class="line"><span class="string">Y = np.array([1, 2, 3, 4, 4, 5])</span></span><br><span class="line"><span class="string">from sklearn.naive_bayes import BernoulliNB</span></span><br><span class="line"><span class="string">clf = BernoulliNB()</span></span><br><span class="line"><span class="string">clf.fit(X, Y)</span></span><br><span class="line"><span class="string">print (clf.predict(X[2:3]))</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-3-《机器学习实战》（python3-x）"><a href="#4-3-《机器学习实战》（python3-x）" class="headerlink" title="4.3 《机器学习实战》（python3.x）"></a>4.3 《机器学习实战》（python3.x）</h3><p><a href="http://nbviewer.jupyter.org/github/KuiyuanZhang/Machine-Learning-in-Action/tree/master/chapter4/bayes.ipynb" target="_blank" rel="noopener">第四章 基于概率论的分类方法：朴素贝叶斯 </a></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><ul><li><p><strong>为什么朴素贝叶斯如此“朴素”？</strong> </p><p>因为它假定所有的特征在数据集中的作用是同样重要和独立的。</p><p>正如我们所知，这个假设在现实世界中是很不真实的，因此，说朴素贝叶斯真的很“朴素”。</p></li><li><p><strong>非朴素的贝叶斯方法</strong></p><p>1、半监督贝叶斯</p><p>2、EM算法，含有隐藏元素</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;监督学习、生成模型、多类分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用先验知识得到后验概率，由期望风险最小化得到后验概率最大化。&lt;/p&gt;
&lt;p&gt;场景举例：情感分析、消费者分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小规模数据集表现好，适合多分类&lt;/p&gt;
&lt;p&gt;对于在小数据集上有显著特征的相关对象，朴素贝叶斯方法可对其进行快速分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要条件独立假设，会牺牲一定准确率，分类性能不一定高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;适用数据类型：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标称型数据&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生成模型" scheme="http://yoursite.com/tags/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="朴素贝叶斯" scheme="http://yoursite.com/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之K近邻算法（KNN）</title>
    <link href="http://yoursite.com/2018/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BK%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%EF%BC%88KNN%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/12/机器学习之K近邻算法（KNN）/</id>
    <published>2018-02-12T13:30:45.000Z</published>
    <updated>2018-02-14T15:19:41.849Z</updated>
    
    <content type="html"><![CDATA[<p><strong>“近朱者赤，近墨者黑”</strong></p><blockquote><p>监督学习、多分类/回归、判别模型</p><p>没有显式的学习过程，K 最近邻算法使用整个数据集作为训练集，而非将数据集分割为一个数据集和一个测试集。</p></blockquote><p><strong>优点：</strong></p><blockquote><p>简单，精度高，无数据输入假定，对outlier不敏感，分类与回归均可操作，可用于非线性分类</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>计算复杂度高，空间复杂度高，K需预先设定，对大小不平衡的数据易偏向大容量数据</p></blockquote><p><strong>适用数据范围：</strong></p><blockquote><p>数值型、标称型</p></blockquote><p><strong>常用算法：</strong></p><blockquote><p>kd树：</p><p>对x的K个特征，一个一个做切分，使得每个数据最终都在切分点上（中位数），对输入的数据搜索kd树，找到K近邻</p></blockquote><a id="more"></a><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul><li><p>KNN的三个基本要素</p><p>K值的选择，距离度量、分类决策规则</p><p>​</p></li></ul><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><h4 id="2-1-工作原理"><a href="#2-1-工作原理" class="headerlink" title="2.1 工作原理"></a>2.1 工作原理</h4><ol><li>假设有一个带有标签的样本数据集（训练样本集），其中包含每条数据与所属分类的对应关系。</li><li>输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较。<ol><li>计算新数据与样本数据集中每条数据的距离。</li><li>对求得的所有距离进行排序（从小到大，越小表示越相似）。</li><li>取前 k （k 一般小于等于 20 ）个样本数据对应的分类标签。</li></ol></li><li>求 k 个数据中出现次数最多的分类标签作为新数据的分类。</li></ol><h4 id="2-2-实现kd树"><a href="#2-2-实现kd树" class="headerlink" title="2.2 实现kd树"></a>2.2 实现kd树</h4><ul><li><p><strong>kd树</strong></p><p>是一种对k维空间中实例点进行储存以便对其进行快速检索的树形数据结构。</p><p>是二叉树，表示对k维空间的一个划分。</p></li><li><p>构造kd树</p></li></ul><h4 id="2-3-对偶形式"><a href="#2-3-对偶形式" class="headerlink" title="2.3 对偶形式"></a>2.3 对偶形式</h4><ul><li><p><strong>基本想法</strong>    </p><p>将w和d表示为实例x和标记y的线性组合的形式，通过求解其系数求得w和b</p></li><li><p>对偶形式迭代是收敛的，存在多个解</p></li></ul><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h4 id="3-1-一般流程"><a href="#3-1-一般流程" class="headerlink" title="3.1 一般流程"></a>3.1 一般流程</h4><blockquote><p>收集数据：可以使用任何方法</p><p>准备数据：距离计算所需要的数值，最好是结构化的数据格式</p><p>分析数据：可以使用任何方法</p><p>训练算法：此步骤不适用于KNN算法</p><p>测试算法：计算错误率</p><p>使用算法：首先需要输入样本数据接结构化输出结果，然后运行KNN算法判定输入数据属于哪个分类，最后应用对计算出的分类执行后续处理。</p></blockquote><h4 id="3-2-调参"><a href="#3-2-调参" class="headerlink" title="3.2 调参"></a>3.2 调参</h4><ul><li><p><strong>距离度量</strong></p><p>使用距离为欧式距离</p><p>更一般的距离为Lp距离和曼哈顿距离</p></li><li><p><strong>K值的选择</strong></p><p>K值较小时，近似误差会减小，估计误差会变大。</p><p>K值较大时，估计误差减小，近似误差越大。</p><p>K=N时，无论实例输入什么，都简单地预测为训练实例中最多的一类。</p><p>实际应用中，K值一般取一个比较小的数值。通常采用<strong>交叉验证</strong>选取最优K值</p></li><li><p><strong>分类决策规则</strong></p><p>多数表决规则 等价于 经验风险最小化</p></li></ul><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><h4 id="4-1-算法核心"><a href="#4-1-算法核心" class="headerlink" title="4.1 算法核心"></a>4.1 算法核心</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    diffMat = tile(inX, (dataSetSize,<span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="4-2-sklearn实现"><a href="#4-2-sklearn实现" class="headerlink" title="4.2 sklearn实现"></a>4.2 sklearn实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors, datasets</span><br><span class="line"></span><br><span class="line">n_neighbors = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入一些要玩的数据</span></span><br><span class="line"><span class="comment"># iris = datasets.load_iris()</span></span><br><span class="line"><span class="comment"># X = iris.data[:, :2]  # 我们只采用前两个feature. 我们可以使用二维数据集避免这个丑陋的切片</span></span><br><span class="line"><span class="comment"># y = iris.target</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print 'X=', type(X), X</span></span><br><span class="line"><span class="comment"># print 'y=', type(y), y</span></span><br><span class="line"></span><br><span class="line">X = array([[<span class="number">-1.0</span>, <span class="number">-1.1</span>], [<span class="number">-1.0</span>, <span class="number">-1.0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1.0</span>, <span class="number">1.1</span>], [<span class="number">2.0</span>, <span class="number">2.0</span>], [<span class="number">2.0</span>, <span class="number">2.1</span>]])</span><br><span class="line">y = array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print 'X=', type(X), X</span></span><br><span class="line"><span class="comment"># print 'y=', type(y), y</span></span><br><span class="line"></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># 网格中的步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建彩色的地图</span></span><br><span class="line"><span class="comment"># cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])</span></span><br><span class="line"><span class="comment"># cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])</span></span><br><span class="line"></span><br><span class="line">cmap_light = ListedColormap([<span class="string">'#FFAAAA'</span>, <span class="string">'#AAFFAA'</span>])</span><br><span class="line">cmap_bold = ListedColormap([<span class="string">'#FF0000'</span>, <span class="string">'#00FF00'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weights <span class="keyword">in</span> [<span class="string">'uniform'</span>, <span class="string">'distance'</span>]:</span><br><span class="line">    <span class="comment"># 我们创建了一个knn分类器的实例，并适合数据。</span></span><br><span class="line">    clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights)</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制决策边界。为此，我们将为每个分配一个颜色</span></span><br><span class="line">    <span class="comment"># 来绘制网格中的点 [x_min, x_max]x[y_min, y_max].</span></span><br><span class="line">    x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),</span><br><span class="line">                         np.arange(y_min, y_max, h))</span><br><span class="line">    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将结果放入一个彩色图中</span></span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制训练点</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=cmap_bold)</span><br><span class="line">    plt.xlim(xx.min(), xx.max())</span><br><span class="line">    plt.ylim(yy.min(), yy.max())</span><br><span class="line">    plt.title(<span class="string">"3-Class classification (k = %i, weights = '%s')"</span></span><br><span class="line">              % (n_neighbors, weights))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-3-《机器学习实战》（python3-x）"><a href="#4-3-《机器学习实战》（python3-x）" class="headerlink" title="4.3 《机器学习实战》（python3.x）"></a>4.3 《机器学习实战》（python3.x）</h4><p>​        <a href="http://nbviewer.jupyter.org/github/KuiyuanZhang/Machine-Learning-in-Action/tree/master/chapter2/KNN.ipynb" target="_blank" rel="noopener">第二章 k-近邻算法 </a></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><ul><li>精度高（小于最优贝叶斯最有分类器的2倍。证明：周志华《机器学习》）</li><li>算法的收敛性（证明：李航《统计学习方法》P31）</li><li>墙裂推荐：<a href="https://github.com/apachecn/MachineLearning" target="_blank" rel="noopener">https://github.com/apachecn/MachineLearning</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“近朱者赤，近墨者黑”&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;监督学习、多分类/回归、判别模型&lt;/p&gt;
&lt;p&gt;没有显式的学习过程，K 最近邻算法使用整个数据集作为训练集，而非将数据集分割为一个数据集和一个测试集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单，精度高，无数据输入假定，对outlier不敏感，分类与回归均可操作，可用于非线性分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算复杂度高，空间复杂度高，K需预先设定，对大小不平衡的数据易偏向大容量数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;适用数据范围：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数值型、标称型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常用算法：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kd树：&lt;/p&gt;
&lt;p&gt;对x的K个特征，一个一个做切分，使得每个数据最终都在切分点上（中位数），对输入的数据搜索kd树，找到K近邻&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="k-近邻算法" scheme="http://yoursite.com/tags/k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="KNN" scheme="http://yoursite.com/tags/KNN/"/>
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>转&lt;吴恩达老师的机器学习课程&gt;</title>
    <link href="http://yoursite.com/2018/02/11/%E8%BD%AC-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/02/11/转-吴恩达老师的机器学习课程/</id>
    <published>2018-02-11T15:24:00.000Z</published>
    <updated>2018-02-11T15:28:26.073Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自  <a href="https://github.com/shurenlee/Coursera-ML-AndrewNg-Notes" target="_blank" rel="noopener">https://github.com/shurenlee/Coursera-ML-AndrewNg-Notes</a></p><p>一篇不错的关于吴恩达老师课程的个人笔记，希望对学习机器学习有所帮助。</p></blockquote><a id="more"></a>    <p>课程地址：&lt;<a href="https://www.coursera.org/course/ml" target="_blank" rel="noopener">https://www.coursera.org/course/ml</a></p><p>文件夹说明：</p><p>docx：笔记的word版本</p><p>media：笔记的图片</p><p>ppt：课程的原版课件</p><p>srt：课程的中英文字幕（mp4文件需要在百度云下载）</p><p>code：课程的python代码（有一部分是国外大牛写的）</p><p>机器学习视频下载链接：<a href="http://pan.baidu.com/s/1dFCQvxZ" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFCQvxZ</a> 密码：dce8</p><p>包含mp4视频和字幕</p><p><a href="http://fengdu78.gitee.io/coursera-ml-andrewng-notes" target="_blank" rel="noopener">笔记在线阅读</a></p><p><a href="机器学习个人笔记完整版v5.pdf">笔记pdf版本下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自  &lt;a href=&quot;https://github.com/shurenlee/Coursera-ML-AndrewNg-Notes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/shurenlee/Coursera-ML-AndrewNg-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一篇不错的关于吴恩达老师课程的个人笔记，希望对学习机器学习有所帮助。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="吴恩达" scheme="http://yoursite.com/tags/%E5%90%B4%E6%81%A9%E8%BE%BE/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>必备神器之seaborn</title>
    <link href="http://yoursite.com/2018/02/08/%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8%E4%B9%8Bseaborn/"/>
    <id>http://yoursite.com/2018/02/08/必备神器之seaborn/</id>
    <published>2018-02-08T15:47:40.000Z</published>
    <updated>2018-02-16T03:03:58.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>python绘图软件seaborn的常用介绍</p><p>官方文档： <a href="http://seaborn.pydata.org/tutorial.html" target="_blank" rel="noopener">seaborn官方文档</a></p><p>以下是常用功能</p></blockquote><h4 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> searborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="第一章-艺术化的图表控制"><a href="#第一章-艺术化的图表控制" class="headerlink" title="第一章 艺术化的图表控制"></a>第一章 艺术化的图表控制</h2><p>Matplotlib无疑是高度可定制的，但快速实施出吸引人的细节就变得有些复杂。Seaborn作为一个带着定制主题和高级界面控制的Matplotlib扩展包，能让绘图变得更轻松，本部分主要介绍seaborn是如何对matplotlib输出的外观进行控制的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline </span><br><span class="line"><span class="comment">#jupyter notebook 中的魔法函数，如果不是使用该软件请使用plt.show()用于显示图像</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">np.random.seed(sum(map(ord,<span class="string">"aesthetics"</span>)))  <span class="comment"># 定义种子</span></span><br></pre></td></tr></table></figure><p>定义一个含偏移的正弦图像，来比较传统的matplotlib和seaborn的不同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinplot</span><span class="params">(flip=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,<span class="number">14</span>,<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        plt.plot(x,np.sin(x+i*<span class="number">.5</span>)*(<span class="number">7</span>-i)*flip)</span><br></pre></td></tr></table></figure><p>使用matplotlib默认设置的图形效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-96e264d6b87333b0fb5db977588998f7_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import seaborn as sns</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-d0e5a4d24a0bcbe01d9c2fd995ae6099_hd.jpg" alt="img"></p><p>seaborn默认的灰色网格底色灵感来源于matplotlib却更加柔和。大多数情况下，图应优于表。seaborn的默认灰色网格底色避免了刺目的干扰，对于多个方面的图形尤其有用，是一些更复杂的工具的核心。</p><p>Seaborn将matplotlib参数分成两个独立的组。第一组设定了美学风格，第二组则是不同的度量元素，这样就可以很容易地添加到代码当中了。</p><p>操作这些参数的接口是两对函数。为了控制样式，使用axesstyle()和setstyle()函数。为了扩展绘图，请使用plotting_context()和set_context()函数。在这两种情况下，第一个函数返回一个参数字典，第二个函数则设置matplotlib默认属性。</p><h2 id="样式控制：axes-style-and-set-style"><a href="#样式控制：axes-style-and-set-style" class="headerlink" title="样式控制：axes_style() and set_style()"></a>样式控制：axes_style() and set_style()</h2><p>有5个seaborn的主题，适用于不同的应用和人群偏好：</p><ul><li>darkgrid 黑色网格（默认）</li><li>whitegrid 白色网格</li><li>dark 黑色背景</li><li>white 白色背景</li><li>ticks 应该是四周都有刻度线的白背景？</li></ul><p>网格能够帮助我们查找图表中的定量信息，而灰色网格主题中的白线能避免影响数据的表现，白色网格主题则类似的，当然更适合表达“重数据元素”（heavy data elements不理解）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;whitegrid&quot;)</span><br><span class="line">data = np.random.normal(size=(20, 6)) + np.arange(6) / 2</span><br><span class="line">sns.boxplot(data=data);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-436b148a808465534752b0e2f0cd127e_hd.jpg" alt="img"></p><p>对于许多场景，(特别是对于像对话这样的设置，您主要想使用图形来提供数据模式的印象)，网格就不那么必要了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;dark&quot;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-c180b44ec34056361c705928b083715a_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;white&quot;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-12960e1a69df3f22bde993970a446655_hd.jpg" alt="img"></p><p>有时你可能想要给情节增加一点额外的结构，这就是ticks参数的用途:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;ticks&quot;)</span><br><span class="line">sinplot()</span><br><span class="line"># 官方的例子在上方/右方也拥有刻度线，而验证时却没有（是jupyter notebook的原因？）</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-050c042daedc78711c5d1e34c1d01cba_hd.jpg" alt="img"></p><blockquote><p>这里是官方运行的结果，供参考：</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-6ff1e678229d4f1068153b36c7e3fc9e_hd.jpg" alt="img"></p><p>特别的可以通过sns.axes_style(style=None, rc=None) 返回一个sns.set_style()可传的参数的字典</p><p>通过类似sns.set_style(“ticks”, {“xtick.major.size”: 8, “ytick.major.size”: 8})的方式写入更具体的配置样式。</p><p>关于sns.axes_style()下面会有说明和运行结果</p><h2 id="用despine-进行边框控制"><a href="#用despine-进行边框控制" class="headerlink" title="用despine()进行边框控制"></a>用despine()进行边框控制</h2><p>white和ticks参数的样式，都可以删除上方和右方坐标轴上不需要的边框，这在matplotlib中是无法通过参数实现的，却可以在seaborn中通过despine()函数轻松移除他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;white&quot;)</span><br><span class="line">sinplot() # 默认无参数状态，就是删除上方和右方的边框</span><br><span class="line">sns.despine()</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-e3b1dd4ffa6601e8b9955b12b2550d16_hd.jpg" alt="img"></p><p>一些图的边框可以通过数据移位，当然调用despine()也能做同样的事。当边框没有覆盖整个数据轴的范围的时候，trim参数会限制留存的边框范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f, ax = plt.subplots()</span><br><span class="line">sns.violinplot(data=data)</span><br><span class="line">sns.despine(offset=10, trim=True); # offset 两坐标轴离开距离；</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-11a06ec6f0fbb3e18f6db83f7a288c63_hd.jpg" alt="img"></p><p>你也可以通过往despine()中添加参数去控制边框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;whitegrid&quot;)</span><br><span class="line">sns.boxplot(data=data, palette=&quot;deep&quot;)</span><br><span class="line">sns.despine(left=True) # 删除左边边框</span><br><span class="line">st = sns.axes_style(&quot;darkgrid&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-a36d19c549a4ea5a6bca0743ef7fec8c_hd.jpg" alt="img"></p><p>despine(fig=None, ax=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)</p><p>从plot()函数中移除顶部或右边的边框</p><h2 id="临时设定图形样式"><a href="#临时设定图形样式" class="headerlink" title="临时设定图形样式"></a>临时设定图形样式</h2><p>虽然来回切换非常容易，但sns也允许用with语句中套用axes_style()达到临时设置参数的效果（仅对with块内的绘图函数起作用）。这也允许创建不同风格的坐标轴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with sns.axes_style(&quot;darkgrid&quot;):</span><br><span class="line">    plt.subplot(211)</span><br><span class="line">    sinplot()</span><br><span class="line">plt.subplot(212)</span><br><span class="line">sinplot(-1)</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-074042f10a2a586a7c89b70bdde41f0e_hd.jpg" alt="img"></p><h2 id="seaborn样式中最重要的元素"><a href="#seaborn样式中最重要的元素" class="headerlink" title="seaborn样式中最重要的元素"></a>seaborn样式中最重要的元素</h2><p>如果您想要定制seanborn的样式，可以将参数字典传递给axes_style()和set_style()的rc参数。注意，只能通过该方法覆盖样式定义的一部分参数。(然而，更高层次的set()函数接受任何matplotlib参数的字典)。</p><p>如果您想要查看包含哪些参数，您可以只调用该函数而不带参数，这将返回当前设置的字典:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sns.axes_style()</span><br><span class="line"></span><br><span class="line">&#123;&apos;axes.axisbelow&apos;: True,</span><br><span class="line"> &apos;axes.edgecolor&apos;: &apos;white&apos;,</span><br><span class="line"> &apos;axes.facecolor&apos;: &apos;#EAEAF2&apos;,</span><br><span class="line"> &apos;axes.grid&apos;: True,</span><br><span class="line"> &apos;axes.labelcolor&apos;: &apos;.15&apos;,</span><br><span class="line"> &apos;axes.linewidth&apos;: 0.0,</span><br><span class="line"> &apos;figure.facecolor&apos;: &apos;white&apos;,</span><br><span class="line"> &apos;font.family&apos;: [&apos;sans-serif&apos;],</span><br><span class="line"> &apos;font.sans-serif&apos;: [&apos;Arial&apos;,</span><br><span class="line">  &apos;Liberation Sans&apos;,</span><br><span class="line">  &apos;Bitstream Vera Sans&apos;,</span><br><span class="line">  &apos;sans-serif&apos;],</span><br><span class="line"> &apos;grid.color&apos;: &apos;white&apos;,</span><br><span class="line"> &apos;grid.linestyle&apos;: &apos;-&apos;,</span><br><span class="line"> &apos;image.cmap&apos;: &apos;Greys&apos;,</span><br><span class="line"> &apos;legend.frameon&apos;: False,</span><br><span class="line"> &apos;legend.numpoints&apos;: 1,</span><br><span class="line"> &apos;legend.scatterpoints&apos;: 1,</span><br><span class="line"> &apos;lines.solid_capstyle&apos;: &apos;round&apos;,</span><br><span class="line"> &apos;text.color&apos;: &apos;.15&apos;,</span><br><span class="line"> &apos;xtick.color&apos;: &apos;.15&apos;,</span><br><span class="line"> &apos;xtick.direction&apos;: &apos;out&apos;,</span><br><span class="line"> &apos;xtick.major.size&apos;: 0.0,</span><br><span class="line"> &apos;xtick.minor.size&apos;: 0.0,</span><br><span class="line"> &apos;ytick.color&apos;: &apos;.15&apos;,</span><br><span class="line"> &apos;ytick.direction&apos;: &apos;out&apos;,</span><br><span class="line"> &apos;ytick.major.size&apos;: 0.0,</span><br><span class="line"> &apos;ytick.minor.size&apos;: 0.0&#125;</span><br></pre></td></tr></table></figure><p>或许，你可以试试不同种类的参数效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;darkgrid&quot;, &#123;&quot;axes.facecolor&quot;: &quot;.9&quot;&#125;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-657ac986e339294193453407806f9fca_hd.jpg" alt="img"></p><h2 id="通过-plotting-context-和-set-context-调整绘图元素"><a href="#通过-plotting-context-和-set-context-调整绘图元素" class="headerlink" title="通过 plotting_context() 和 set_context() 调整绘图元素"></a>通过 plotting_context() 和 set_context() 调整绘图元素</h2><p>另一组参数控制绘图元素的规模，这应该让您使用相同的代码来制作适合在较大或较小的情节适当的场景中使用的情节。</p><p>首先，可以通过sns.set()重置参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.set()</span><br></pre></td></tr></table></figure><p>四种预设，按相对尺寸的顺序(线条越来越粗)，分别是paper，notebook, talk, and poster。notebook的样式是默认的，上面的绘图都是使用默认的notebook预设。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_context(&quot;paper&quot;)</span><br><span class="line">plt.figure(figsize=(8,6))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-f9d617e2bdd21320b07a9dbe2ba7098f_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># default 默认设置</span><br><span class="line">sns.set_context(&quot;notebook&quot;)</span><br><span class="line">plt.figure(figsize=(8,6))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-89d18849932e697a973ee04d8216af1d_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_context(&quot;talk&quot;)</span><br><span class="line">plt.figure(figsize=(8,6))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-4098205f7671ffc7dd72c54d11e8a27e_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.set_context(&quot;poster&quot;)</span><br><span class="line">plt.figure(figsize=(8,6))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-dd92bb2302af238bd4887185749ba278_hd.jpg" alt="img"></p><p>通过观察各种样式的结果，你应当可以了解context函数</p><p>类似的，还可以使用其中一个名称来调用set_context()来设置参数，您可以通过提供参数值的字典来覆盖参数。</p><p>通过更改context还可以独立地扩展字体元素的大小。(这个选项也可以通过顶级set()函数获得）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.set_context(&quot;notebook&quot;, font_scale=1.5, rc=&#123;&quot;lines.linewidth&quot;: 2.5&#125;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-207352f0a3a968fdb8ab6f33d5b1b9e4_hd.jpg" alt="img"></p><p>类似地(尽管它可能用处不大)，也可以使用with嵌套语句进行临时的设置。</p><p>样式和上下文都可以用set()函数快速地进行配置。这个函数还设置了默认的颜色选项，在下一节将详细介绍这一功能。</p><hr><p>颜色显然比图形风格的其他方面都更加重要，因为颜色使用得当就可以有效显示或隐藏数据中的特征。有许多的好资源都可以了解关于在可视化中使用颜色的技巧，推荐<a href="http://link.zhihu.com/?target=https%3A//earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/05/subtleties-of-color-part-1-of-6/" target="_blank" rel="noopener">Rob Simmon的《series of blog posts》</a>和这篇进阶的<a href="http://link.zhihu.com/?target=https%3A//cfwebprod.sandia.gov/cfdocs/CompResearch/docs/ColorMapsExpanded.pdf" target="_blank" rel="noopener">技术文章</a>,<a href="http://link.zhihu.com/?target=http%3A//matplotlib.org/users/colormaps.html" target="_blank" rel="noopener">matplotlib文档</a>现在也有一个很好的教程，说明了如何在内置色彩映射中构建的一些感知特性。</p><p>Seaborn让你更容易选择和使用那些适合你数据和视觉的颜色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">sns.set(rc=&#123;&quot;figure.figsize&quot;: (6, 6)&#125;)</span><br><span class="line">np.random.seed(sum(map(ord, &quot;palettes&quot;)))</span><br></pre></td></tr></table></figure><h2 id="通过color-palette-创建调色板"><a href="#通过color-palette-创建调色板" class="headerlink" title="通过color_palette()创建调色板"></a>通过color_palette()创建调色板</h2><p>最重要的直接设置调色板的函数就是color_palette()。这个函数提供了许多（并非所有）在seaborn内生成颜色的方式。并且它可以用于任何函数内部的palette参数设置（在某些情况下当需要多种颜色时也可以传入到color参数）</p><p>color_palette()允许任意的seaborn调色板或matplotlib的颜色映射（除了jet，你应该完全不使用它）。它还可以使用任何有效的matplotlib格式指定的颜色列表(RGB元组、十六进制颜色代码或HTML颜色名称)。返回值总是一个RGB元组的列表。</p><p>最后，直接调用没有传入参数的color_palette()将返回默认的颜色循环。</p><p>对应的函数set_palette()接受相同的参数，并为所有图设置默认的颜色循环。你也可以在with块中使用color_palette()来实现临时的更改调色板配置（下面有详细例子）。</p><p>通常在不知道数据的具体特征的情况下不可能知道什么类型的调色板或颜色映射对于一组数据来说是最好的。因此，我们将用三种不同类型的调色板：分类色板、连续色板和离散色板，来区分和使用color_palette()函数。</p><h2 id="分类色板"><a href="#分类色板" class="headerlink" title="分类色板"></a>分类色板</h2><p>分类色板（定性）是在区分没有固定顺序的数据时最好的选择。</p><p>在导入seaborn库后，默认的颜色循环被更改为一组六种颜色。虽然这些颜色可能会让你想起matplotlib的标准颜色循环，但他们无疑更赏心悦目一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">current_palette = sns.color_palette()</span><br><span class="line">sns.palplot(current_palette)</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-5ad4013ce278d06d9bc1c633b5e740d9_hd.jpg" alt="img"></p><p>默认颜色主题共有六种不同的变化分别是：deep, muted, pastel, bright, dark, 和 colorblind。类似下面的方式直接传入即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">current_palette = sns.color_palette(&quot;dark&quot;) # 直接传入对应的参数即可变化</span><br><span class="line">sns.palplot(current_palette)</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-ba711a8887d5d3d217123c0796741c1b_hd.jpg" alt="img"></p><h2 id="使用圆形颜色系统"><a href="#使用圆形颜色系统" class="headerlink" title="使用圆形颜色系统"></a>使用圆形颜色系统</h2><p>当你有六个以上的分类要区分时，最简单的方法就是在一个圆形的颜色空间中画出均匀间隔的颜色(这样的色调会保持亮度和饱和度不变)。这是大多数的当他们需要使用比当前默认颜色循环中设置的颜色更多时的默认方案。</p><p>最常用的方法是使用hls的颜色空间，这是RGB值的一个简单转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;hls&quot;, 8))</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-f85e33b615f3f20cd930d8722f9feb26_hd.jpg" alt="img"></p><p>当然，也可以使用hls_palette()函数来控制颜色的亮度和饱和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.hls_palette(8, l=.3, s=.8))</span><br><span class="line"># l-亮度 lightness / s-饱和 saturation</span><br></pre></td></tr></table></figure><p><img src="https://pic7.zhimg.com/80/v2-1bed7a99683ef5c944c2fe5a13d703ff_hd.jpg" alt="img"></p><p>由于人类视觉系统的工作方式，会导致在RGB度量上强度一致的颜色在视觉中并不平衡。比如，我们黄色和绿色是相对较亮的颜色，而蓝色则相对较暗，使得这可能会成为与hls系统一致的一个问题。</p><p>为了解决这一问题，seaborn为husl系统提供了一个接口，这也使得选择均匀间隔的色彩变得更加容易，同时保持亮度和饱和度更加一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;husl&quot;, 8))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-24fcd5ec6caeb4b685d66cdbe86d41fe_hd.jpg" alt="img"></p><p>使用分类颜色调色板</p><p>另一种视觉上令人愉悦的分类调色板来自于Color Brewer工具(它也有连续调色板和离散调色板，我们将在下面的图中看到)。这些也存在于matplotlib颜色映射中，但是它们没有得到适当的处理。在这里，当你要求一个定性颜色的调色板时，你总是会得到离散的颜色，但这意味着在某一点它们会开始循环。</p><p>Color Brewer工具的一个很好的特点是，它提供了一些关于调色板是色盲安全的指导。有各种各样的<a href="http://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Color_blindness" target="_blank" rel="noopener">适合色盲的颜色</a>，但是最常见的变异导致很难区分红色和绿色。一般来说，避免使用红色和绿色来表示颜色以区分元素是一个不错的主意。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;Paired&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-3a8badc7c6ddf7f470ba89687e6835f4_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;Set2&quot;, 10))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-906e0e32ab89e6301fa0a19a24e98ec5_hd.jpg" alt="img"></p><p>为了帮助您从Color Brewer工具中选择调色板，这里有choose_colorbrewer_palette()函数。这个函数必须在IPython notebook中使用，它将启动一个交互式小部件，让您浏览各种选项并调整参数。</p><p>当然，您可能只想使用一组您特别喜欢的颜色。因为color_palette()接受一个颜色列表，这很容易做到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flatui = [&quot;#9b59b6&quot;, &quot;#3498db&quot;, &quot;#95a5a6&quot;, &quot;#e74c3c&quot;, &quot;#34495e&quot;, &quot;#2ecc71&quot;]</span><br><span class="line">sns.palplot(sns.color_palette(flatui))</span><br><span class="line">sns.choose_colorbrewer_palette(&quot;sequential&quot;)</span><br><span class="line"># data_type: &#123;‘sequential’, ‘diverging’, ‘qualitative’&#125;</span><br><span class="line">sns.choose_colorbrewer_palette(&quot;sequential&quot;,as_cmap=True)</span><br><span class="line"># as_cmap参数用来更改显示的颜色范围是离散的还是连续的</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-851229aebdd9a4256c954f62fafae005_hd.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-b9eecc1da38590eea5e0cf978f509ca8_hd.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-906536f92686620044e429423a774ffb_hd.jpg" alt="img"></p><p>使用xkcd颜色来命名颜色</p><p>xkcd包含了一套众包努力的针对随机RGB色的命名。产生了954个可以随时通过xdcd_rgb字典中调用的命名颜色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([0, 1], [0, 1], sns.xkcd_rgb[&quot;pale red&quot;], lw=3)</span><br><span class="line">plt.plot([0, 1], [0, 2], sns.xkcd_rgb[&quot;medium green&quot;], lw=3)</span><br><span class="line">plt.plot([0, 1], [0, 3], sns.xkcd_rgb[&quot;denim blue&quot;], lw=3);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-e5db2fc83e78b3090d4d9db3f42e2891_hd.jpg" alt="img"></p><p>如果你想花一些时间挑选颜色，或许这种<a href="http://link.zhihu.com/?target=http%3A//www.luminoso.com/colors/" target="_blank" rel="noopener">交互式的可视化</a>（官方链接失效）是非常有帮助的。除了将单一颜色从xkcd_rgb字典中取出，也可以通过名称列表传入xkcd_palette()函数中取得颜色组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colors = [&quot;windows blue&quot;, &quot;amber&quot;, &quot;greyish&quot;, &quot;faded green&quot;, &quot;dusty purple&quot;]</span><br><span class="line">sns.palplot(sns.xkcd_palette(colors))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-a4d334b52b4ce7fea79631b57b6ec23e_hd.jpg" alt="img"></p><p>连续色板</p><p>调色板中第二大类称为“顺序”。这种颜色映射对应的是从相对低价值（无意义）数据到高价值（有意义）的数据范围。虽然有时候你会需要一个连续的离散颜色调色板，用他们像kdeplot()或者corrplot()功能映射更加常见（以及可能类似的matplotlib功能）。</p><p>非常可能的是见到jet色彩映射（或其他采用调色板）在这种情况下使用，因为色彩范围提供有关数据的附加信息。然而，打的色调变化中往往会引入不连续性中不存在的数据和视觉系统不能自然的通过“彩虹色”定量产生“高”、“低”之分。其结果是，这样的可视化更像是一个谜题，模糊了数据中的信息而并非揭示这种信息。事实上，jet调色板可能非常糟糕，因为最亮的颜色，黄色和青色用于显示中间数值，这就导致强调了一些没有意义的数据而忽视了端点的数据。</p><p>所以对于连续的数据，最好是使用那些在色调上相对细微变化的调色板，同时在亮度和饱和度上有很大的变化。这种方法将自然地吸引数据中相对重要的部分</p><p>Color Brewer的字典中就有一组很好的调色板。它们是以在调色板中的主导颜色(或颜色)命名的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;Blues&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-f7df28002ee1abbd27d8ffa2f9b5e906_hd.jpg" alt="img"></p><p>就像在matplotlib中一样，如果您想要翻转渐变，您可以在面板名称中添加一个_r后缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;BuGn_r&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-5ffe4b697daf3596acaceb42b592f542_hd.jpg" alt="img"></p><p>seaborn还增加了一个允许创建没有动态范围的”dark”面板。如果你想按顺序画线或点，这可能是有用的，因为颜色鲜艳的线可能很难区分。</p><p>类似的，这种暗处理的颜色，需要在面板名称中添加一个_d后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;GnBu_d&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-e339949a2efaeef4c4384bf5e7534ae4_hd.jpg" alt="img"></p><p>牢记，你可能想使用choose_colorbrewer_palette()函数取绘制各种不同的选项。如果你想返回一个变量当做颜色映射传入seaborn或matplotlib的函数中，可以设置as_cmap参数为True。</p><h2 id="cubehelix-palette-函数的连续调色板"><a href="#cubehelix-palette-函数的连续调色板" class="headerlink" title="cubehelix_palette()函数的连续调色板"></a>cubehelix_palette()函数的连续调色板</h2><p><a href="http://link.zhihu.com/?target=http%3A//www.mrao.cam.ac.uk/%7Edag/CUBEHELIX/" target="_blank" rel="noopener">cubehelix</a>调色板系统具有线性增加或降低亮度和色调变化顺序的调色板。这意味着在你的映射信息会在保存为黑色和白色（为印刷）时或被一个色盲的人浏览时可以得以保留。</p><p>Matplotlib拥有一个默认的内置cubehelix版本可供创建:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;cubehelix&quot;, 8))</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-8c0cb56d05cc65498bffcb87164d055e_hd.jpg" alt="img"></p><p>seaborn为cubehelix系统添加一个接口使得其可以在各种变化中都保持良好的亮度线性梯度。</p><p>通过seaborn的cubehelix_palette()函数返回的调色板与matplotlib默认值稍有所不同，它不会在色轮周围旋转或覆盖更广的强度范围。seaborn还改变了排序使得更重要的值显得更暗：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.cubehelix_palette(8))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-66b181cb9d4fe29d58aaaaacd0fdacaf_hd.jpg" alt="img"></p><p>其他cubehelix_palette()的参数主要调整色板的视觉。两个重要的选择是：start(值的范围为03）和rot，还有rot的次数（-11之间的任意值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.cubehelix_palette(8, start=.5, rot=-.75))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-89c5b6e8210e426717b1c3dafc39e4b7_hd.jpg" alt="img"></p><p>你也可以控制断点的亮度和甚至对调结果顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.cubehelix_palette(8, start=2, rot=0, dark=0, light=.95, reverse=True))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-8a7dec638c0844e117a25c889e7324fc_hd.jpg" alt="img"></p><p>默认情况下你只会得到一些与seaborn调色板相似的颜色的列表，但你也可以让调色板返回一个可以用as_cmap=True传入seaborn或matplotlib函数的颜色映射对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y = np.random.multivariate_normal([0, 0], [[1, -.5], [-.5, 1]], size=300).T</span><br><span class="line">cmap = sns.cubehelix_palette(light=1, as_cmap=True)</span><br><span class="line">sns.kdeplot(x, y, cmap=cmap, shade=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-ef09b91ef4b313522a7915f2b41a5fdd_hd.jpg" alt="img"></p><p>类似的，也可以在notebook中使用choose_cubehelix_palette()函数启动一个互助程序来帮助选择更适合的调色板或颜色映射。如果想让函数返回一个类似hexbin的颜色映射而非一个列表则需要传入as_cmap=True。</p><h2 id="使用light-palette-和dark-palette-调用定制连续调色板"><a href="#使用light-palette-和dark-palette-调用定制连续调色板" class="headerlink" title="使用light_palette() 和dark_palette()调用定制连续调色板"></a>使用light_palette() 和dark_palette()调用定制连续调色板</h2><p>这里还有一个更简单的连续调色板的使用方式，就是调用light_palette() 和dark_palette()，这与一个单一颜色和种子产生的从亮到暗的饱和度的调色板。这些函数还伴有choose_light_palette() and choose_dark_palette()函数，这些函数启动了交互式小部件来创建这些调色板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.light_palette(&quot;green&quot;))</span><br><span class="line">sns.palplot(sns.dark_palette(&quot;purple&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-b9c0c3be1f396f59d225a31eb1fd2a0d_hd.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-8bf2abd6be5eb2703826fa778d73584b_hd.jpg" alt="img"></p><p>这些调色板结果也可以颠倒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.light_palette(&quot;navy&quot;, reverse=True))</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-2182193b71a409e7167973482029a86c_hd.jpg" alt="img"></p><p>当然也可以创建一个颜色映射对象取代颜色列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pal = sns.dark_palette(&quot;palegreen&quot;, as_cmap=True)</span><br><span class="line">sns.kdeplot(x, y, cmap=pal);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-d6aaa2f056c643055fc4ced364c2c910_hd.jpg" alt="img"></p><p>默认情况下，任何有效的matplotlib颜色可以传递给input参数。也可以在hls或husl空间中提供默认的rgb元组，您还可以使用任何有效的xkcd颜色的种子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.light_palette((210, 90, 60), input=&quot;husl&quot;))</span><br><span class="line">sns.palplot(sns.dark_palette(&quot;muted purple&quot;, input=&quot;xkcd&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-66a8b888f654677f08317e3a40af068d_hd.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-06b20374bc180f9e18dd80c73f825923_hd.jpg" alt="img"></p><p>需要注意的是，为默认的input空间提供交互的组件是husl，这与函数自身默认的并不同，但这在背景下却是更有用的。</p><h2 id="离散色板"><a href="#离散色板" class="headerlink" title="离散色板"></a>离散色板</h2><p>调色板中的第三类被称为“离散”。用于可能无论大的低的值和大的高的值都非常重要的数据。数据中通常有一个定义良好的中点。例如，如果你正在绘制温度变化从基线值，最好使用不同色图显示相对降低和相对增加面积的地区。</p><p>选择离散色板的规则类似于顺序色板，除了你想满足一个强调的颜色中点以及用不同起始颜色的两个相对微妙的变化。同样重要的是，起始值的亮度和饱和度是相同的。</p><p>同样重要的是要强调，应该避免使用红色和绿色，因为大量的潜在观众将无法分辨它们。</p><p>你不应该感到惊讶的是，Color Brewer颜色字典里拥有一套精心挑选的离散颜色映射:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;BrBG&quot;, 7))</span><br><span class="line">sns.palplot(sns.color_palette(&quot;RdBu_r&quot;, 7))</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-82c566f9a56048e6938994f4a4bf8701_hd.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-53b695758fee38c08e5b1708f3ee0afa_hd.jpg" alt="img"></p><p>另一个在matplotlib中建立的明智的选择是coolwarm面板。请注意，这个颜色映射在中间值和极端之间并没有太大的对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(&quot;coolwarm&quot;, 7))</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-7910df5f0403079b5a2f4c3bd1472640_hd.jpg" alt="img"></p><p>用diverging_palette()使用定制离散色板</p><p>你也可以使用海运功能diverging_palette()为离散的数据创建一个定制的颜色映射。（当然也有一个类似配套的互动工具：choose_diverging_palette()）。该函数使用husl颜色系统的离散色板。你需随意传递两种颜色，并设定明度和饱和度的端点。函数将使用husl的端点值及由此产生的中间值进行均衡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.diverging_palette(220, 20, n=7))</span><br><span class="line">sns.palplot(sns.diverging_palette(145, 280, s=85, l=25, n=7))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-5c105fb1180c8ea2de008284f5946833_hd.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-986c5b789c5d47aef369a811f4878678_hd.jpg" alt="img"></p><p>sep参数控制面板中间区域的两个渐变的宽度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.diverging_palette(10, 220, sep=80, n=7))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-752f50c1b496ea09cfa146150a5fe65c_hd.jpg" alt="img"></p><p>也可以用中间的色调来选择调色，而不是用亮度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.diverging_palette(255, 133, l=60, n=7, center=&quot;dark&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-4ae67f94a2ecbc090a991769ba81e43c_hd.jpg" alt="img"></p><p>用set_palette()更改色变的默认值</p><p>color_palette() 函数有一个名为set_palette()的配套。它们之间的关系类似于在美学教程中涉及的aesthetics tutorial. set_palette()。set_palette()接受与color_palette()相同的参数，但是它会更改默认的matplotlib参数，以便成为所有的调色板配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def sinplot(flip=1):</span><br><span class="line">    x = np.linspace(0, 14, 100)</span><br><span class="line">    for i in range(1, 7):</span><br><span class="line">        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)</span><br><span class="line">sns.set_palette(&quot;husl&quot;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-03706b0555fe936436722318fd52f79c_hd.jpg" alt="img"></p><p>color_palette()函数也可以在一个with块中使用，以达到临时更改调色板的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with sns.color_palette(&quot;PuBuGn_d&quot;):</span><br><span class="line">    sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-a66aeecfd2939bf38b9794e10520d618_hd.jpg" alt="img"></p><p>简单常用色彩总结：</p><ul><li>分类：hls husl Paired Set1~Set3（色调不同）</li><li>连续：Blues[蓝s，颜色+s] BuGn[蓝绿] cubehelix（同色系渐变）</li><li>离散：BrBG[棕绿] RdBu[红蓝] coolwarm[冷暖]（双色对称）</li></ul><h2 id="本章后记"><a href="#本章后记" class="headerlink" title="本章后记"></a>本章后记</h2><p>这章内容确认让对色彩与不同数据形式的图像之间的关系有了新的认识，恐怕色让图形好看和更有格调仅仅只是初级阶段。然而文中涉及了大量的色彩专用的名词和理论，只能不求甚解的翻出来强行理解了，谬误在所难免，欢迎各位大神指正，万分感谢！</p><h2 id="第三章-分布数据集的可视化"><a href="#第三章-分布数据集的可视化" class="headerlink" title="第三章 分布数据集的可视化"></a>第三章 分布数据集的可视化</h2><p>在处理一组数据时，通常首先要做的是了解变量是如何分布的。这一章将简要介绍seborn中用于检查单变量和双变量分布的一些工具。你可能还想看看分类变量的章节，来看看函数的例子，这些函数让我们很容易比较变量的分布。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">from scipy import stats, integrate</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">import seaborn as sns</span><br><span class="line">sns.set(color_codes=True)</span><br><span class="line"></span><br><span class="line">np.random.seed(sum(map(ord, &quot;distributions&quot;)))</span><br></pre></td></tr></table></figure><h2 id="单变量分布"><a href="#单变量分布" class="headerlink" title="单变量分布"></a>单变量分布</h2><p>最方便的方式是快速查看单变量分布无疑是使用distplot()函数。默认情况下，这将绘制一个直方图，并拟合出核密度估计(KDE)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.normal(size=100)</span><br><span class="line">sns.distplot(x);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-4c9f4c989b6281f1d1b9306a920e0602_hd.jpg" alt="img"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>直方图应当是非常熟悉的函数了，在matplotlib中就存在hist函数。直方图通过在数据的范围内切成数据片段，然后绘制每个数据片段中的观察次数，来表示整体数据的分布。</p><p>为了说明这一点，我们删除密度曲线并添加了地毯图，每个观察点绘制一个小的垂直刻度。您可以使用rugplot()函数来制作地毯图，但它也可以在distplot()中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, kde=False, rug=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-4eb0c4fdf780a89712e1ea2bc98473ca_hd.jpg" alt="img"></p><p>绘制直方图时，主要的选择是使用切分数据片段的数量或在何位置切分数据片段。 distplot()使用一个简单的规则来很好地猜测并给予默认的切分数量，但尝试更多或更少的数据片段可能会显示出数据中的其他特征：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, bins=20, kde=False, rug=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-b50ed85f634b9fd49b7934b606e75c7b_hd.jpg" alt="img"></p><h2 id="核密度估计-KDE-Kernel-density-estimaton"><a href="#核密度估计-KDE-Kernel-density-estimaton" class="headerlink" title="核密度估计(KDE) Kernel density estimaton"></a>核密度估计(KDE) Kernel density estimaton</h2><p>或许你对核密度估计可能不像直方图那么熟悉，但它是绘制分布形状的有力工具。如同直方图一样，KDE图会对一个轴上的另一轴的高度的观测密度进行描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(x, hist=False, rug=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-f61940455efe60159870ca345a334c97_hd.jpg" alt="img"></p><p>绘制KDE比绘制直方图更有计算性。所发生的是，每一个观察都被一个以这个值为中心的正态（ 高斯）曲线所取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.normal(0, 1, size=30)</span><br><span class="line">bandwidth = 1.06 * x.std() * x.size ** (-1 / 5.)</span><br><span class="line">support = np.linspace(-4, 4, 200)</span><br><span class="line"></span><br><span class="line">kernels = []</span><br><span class="line">for x_i in x:</span><br><span class="line"></span><br><span class="line">    kernel = stats.norm(x_i, bandwidth).pdf(support)</span><br><span class="line">    kernels.append(kernel)</span><br><span class="line">    plt.plot(support, kernel, color=&quot;r&quot;)</span><br><span class="line"></span><br><span class="line">sns.rugplot(x, color=&quot;.2&quot;, linewidth=3);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-95ccd4431c8d8ff0a9272eba9c539d73_hd.jpg" alt="img"></p><p>接下来，这些曲线可以用来计算支持网格中每个点的密度值。得到的曲线再用归一化使得它下面的面积等于1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">density = np.sum(kernels, axis=0)</span><br><span class="line">density /= integrate.trapz(density, support)</span><br><span class="line">plt.plot(support, density);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-80815da5ac27e9014310e3764262d883_hd.jpg" alt="img"></p><p>我们可以看到，如果我们在seaborn中使用kdeplot()函数，我们得到相同的曲线。 这个函数由distplot()使用，但是当您只想要密度估计时，它提供了一个更直接的界面，更容易访问其他选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(x, shade=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-b724e02aebc60307cd03eb62b9d78da5_hd.jpg" alt="img"></p><p>KDE的带宽bandwidth（bw）参数控制估计对数据的拟合程度，与直方图中的bin(数据切分数量参数)大小非常相似。 它对应于我们上面绘制的内核的宽度。 默认中会尝试使用通用引用规则猜测一个适合的值，但尝试更大或更小的值可能会有所帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(x)</span><br><span class="line">sns.kdeplot(x, bw=.2, label=&quot;bw: 0.2&quot;)</span><br><span class="line">sns.kdeplot(x, bw=2, label=&quot;bw: 2&quot;)</span><br><span class="line">plt.legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-c2476971d0f6b4b41c225826479401b3_hd.jpg" alt="img"></p><p>如上所述，高斯KDE过程的性质意味着估计延续了数据集中最大和最小的值。 可以通过cut参数来控制绘制曲线的极值值的距离; 然而，这只影响曲线的绘制方式，而不是曲线如何拟合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(x, shade=True, cut=0)</span><br><span class="line">sns.rugplot(x);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-25d44e68e4f633fd4d8839f1aad6a706_hd.jpg" alt="img"></p><h2 id="拟合参数分布"><a href="#拟合参数分布" class="headerlink" title="拟合参数分布"></a>拟合参数分布</h2><p>还可以使用distplot()将参数分布拟合到数据集，并可视化地评估其与观察数据的对应关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.gamma(6, size=200)</span><br><span class="line">sns.distplot(x, kde=False, fit=stats.gamma);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-45d1af1920f35dcbe81c390f5b0819cd_hd.jpg" alt="img"></p><h2 id="绘制双变量分布"><a href="#绘制双变量分布" class="headerlink" title="绘制双变量分布"></a>绘制双变量分布</h2><p>在绘制两个变量的双变量分布也是有用的。在seaborn中这样做的最简单的方法就是在jointplot()函数中创建一个多面板数字，显示两个变量之间的双变量（或联合）关系以及每个变量的单变量（或边际）分布和轴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mean, cov = [0, 1], [(1, .5), (.5, 1)]</span><br><span class="line">data = np.random.multivariate_normal(mean, cov, 200)</span><br><span class="line">df = pd.DataFrame(data, columns=[&quot;x&quot;, &quot;y&quot;])</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-03567ded62f761c697aaa298b2fad954_hd.jpg" alt="img"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>双变量分布的最熟悉的可视化方式无疑是散点图，其中每个观察结果以x和y值表示。这是两个方面的地毯图。可以使用matplotlib中的plt.scatter函数绘制散点图，它也是jointplot()函数显示的默认方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=df);</span><br></pre></td></tr></table></figure><h2 id="HexBin图"><a href="#HexBin图" class="headerlink" title="HexBin图"></a>HexBin图</h2><p>直方图的双变量类似物被称为“hexbin”图，因为它显示了落在六边形仓内的观测数。该图适用于较大的数据集。通过matplotlib plt.hexbin函数和jointplot()中的样式可以实现。 它最好使用白色背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y = np.random.multivariate_normal(mean, cov, 1000).T</span><br><span class="line">with sns.axes_style(&quot;white&quot;):</span><br><span class="line">    sns.jointplot(x=x, y=y, kind=&quot;hex&quot;, color=&quot;k&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-233cd7204e9bd51371dacaa573d35e94_hd.jpg" alt="img"></p><h2 id="核密度估计"><a href="#核密度估计" class="headerlink" title="核密度估计"></a>核密度估计</h2><p>使用上述内核密度估计程序可视化双变量分布也是可行的。在seaborn中，这种图用等高线图显示，可以在jointplot()中作为样式传入参数使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=df, kind=&quot;kde&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1e36212ecf46cdf74b9d6850f3620f15_hd.jpg" alt="img"></p><p>还可以使用kdeplot()函数绘制二维核密度图。这样可以将这种绘图绘制到一个特定的（可能已经存在的）matplotlib轴上，而jointplot()函数只能管理自己：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f, ax = plt.subplots(figsize=(6, 6))</span><br><span class="line">sns.kdeplot(df.x, df.y, ax=ax)</span><br><span class="line">sns.rugplot(df.x, color=&quot;g&quot;, ax=ax)</span><br><span class="line">sns.rugplot(df.y, vertical=True, ax=ax);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-ee67bc11795b85749a60376158a93ce7_hd.jpg" alt="img"></p><p>如果是希望更连续地显示双变量密度，您可以简单地增加n_levels参数增加轮廓级数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f, ax = plt.subplots(figsize=(6, 6))</span><br><span class="line">cmap = sns.cubehelix_palette(as_cmap=True, dark=0, light=1, reverse=True)</span><br><span class="line">sns.kdeplot(df.x, df.y, cmap=cmap, n_levels=60, shade=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-c0f2742a4086afc0ca7723b6d6d69ecc_hd.jpg" alt="img"></p><p>jointplot()函数使用JointGrid来管理。为了获得更多的灵活性，您可能需要直接使用JointGrid绘制图形。jointplot()在绘制后返回JointGrid对象，您可以使用它来添加更多图层或调整可视化的其他方面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=df, kind=&quot;kde&quot;, color=&quot;m&quot;)</span><br><span class="line">g.plot_joint(plt.scatter, c=&quot;w&quot;, s=30, linewidth=1, marker=&quot;+&quot;)</span><br><span class="line">g.ax_joint.collections[0].set_alpha(0)</span><br><span class="line">g.set_axis_labels(&quot;$X$&quot;, &quot;$Y$&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-6475a5dfb714783fd8eaafba94e300cd_hd.jpg" alt="img"></p><h2 id="呈现数据集中成对的关系"><a href="#呈现数据集中成对的关系" class="headerlink" title="呈现数据集中成对的关系"></a>呈现数据集中成对的关系</h2><p>要在数据集中绘制多个成对双变量分布，可以使用pairplot()函数。这将创建一个轴的矩阵，并显示DataFrame中每对列的关系。默认情况下，它也绘制每个变量在对角轴上的单变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = sns.load_dataset(&quot;iris&quot;)</span><br><span class="line">sns.pairplot(iris);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-570bac7c3154aa1dd684da7790f3d432_hd.jpg" alt="img"></p><p>对于jointplot()和JointGrid之间的关系，pairplot()函数是建立在一个PairGrid对象上的，可以直接使用它来获得更大的灵活性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_diag(sns.kdeplot)</span><br><span class="line">g.map_offdiag(sns.kdeplot, cmap=&quot;Blues_d&quot;, n_levels=6);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-2754ddfe86d6d99b205a5327d67a32d5_hd.jpg" alt="img"></p><p>这章介绍的针对回归类型的散点数据的可视化可能是未来机器学习最直接的助理，这章给我的感悟很多。</p><p>许多数据集包含多个定量变量，分析的目的通常是将这些变量相互关联起来。 我们以前讨论过可以通过显示两个变量的联合分布来实现的功能。 然而，使用统计模型来估计两个噪声观测组之间的简单关系可能是非常有帮助的。 本章讨论的功能将通过线性回归的通用框架进行。</p><p>在Tukey的精神中，Seaborn的回归图主要是为了添加一个视觉指南，有助于在探索性数据分析期间强调数据集中的模式。 也就是说，Seaborn本身并不是统计分析的一揽子计划。 要获得与回归模型拟合相关的量化措施，您应该使用<a href="http://link.zhihu.com/?target=http%3A//www.statsmodels.org/stable/index.html" target="_blank" rel="noopener">statsmodels</a>。 然而，Seaborn的目标是通过可视化快速，轻松地探索数据集，使之变得与通过统计表格来探索数据集一样重要（如果不是更重要的话）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib as mpl</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">import seaborn as sns</span><br><span class="line">sns.set(color_codes=True)</span><br><span class="line"></span><br><span class="line">np.random.seed(sum(map(ord, &quot;regression&quot;)))</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(&quot;tips&quot;)</span><br></pre></td></tr></table></figure><h2 id="绘制线性回归模型的函数"><a href="#绘制线性回归模型的函数" class="headerlink" title="绘制线性回归模型的函数"></a>绘制线性回归模型的函数</h2><p>使用Seaborn中的两个主要功能可视化通过回归确定的线性关系。这些函数regplot()和lmplot()是密切相关的，并且共享了大部分的核心功能。然而，了解他们不同的方式很重要，以便您可以快速为特定工作选择正确的工具。</p><p>在最简单的调用中，两个函数绘制了两个变量x和y的散点图，然后拟合回归模型y〜x并绘制了该回归线的结果回归线和95％置信区间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.regplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-d11475667844660f0c436f3b0bccdad4_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-23f70dd3ea13ab7f324d276cc2008d95_hd.jpg" alt="img"></p><p>很显然，所得到的的图的结果是相同的，除了图形形状略有些不同，这里会简短的解释。</p><p>目前，要知道的另一个主要区别是regplot()以各种格式接受x和y变量，包括numpy数组、Pandas的Series列或DataFrame对象的变量引用；不一样的是，lmplot()将数据集作为一个必需的参数，而x和y变量必须指定为字符串。这种数据格式称为“长格式”或“整洁”数据。除了这种输入灵活性，regplot()可以看做是拥有lmplot()特征的子集，所以后面将使用后者进行演示。</p><p>备注：</p><blockquote><p>这里官方的例子实际上并不好，比较容易的理解方式是：上面的结果可以在regplot()函数中通过只传入x和y绘出：sns.regplot(x=tips[“total_bill”], y=tips[“tip”])；而相应的sns.lmplot(x=tips[“total_bill”], y=tips[“tip”])这种写法就会报错，因为数据集data是lmplot()的必传参数。</p></blockquote><p>当其中一个变量取值为离散型的时候，可以拟合一个线性回归。然而，这种数据集生成的简单散点图通常不是最优的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tips.head()</span><br><span class="line"></span><br><span class="line">total_bill tip sex smoker day time size big_tip</span><br><span class="line">0 16.99 1.01 Female No Sun Dinner 2 False</span><br><span class="line">1 10.34 1.66 Male No Sun Dinner 3 True</span><br><span class="line">2 21.01 3.50 Male No Sun Dinner 3 True</span><br><span class="line">3 23.68 3.31 Male No Sun Dinner 2 False</span><br><span class="line">4 24.59 3.61 Female No Sun Dinner 4 False</span><br><span class="line">sns.lmplot(data=tips,x=&quot;size&quot;,y=&quot;tip&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-0dc26291b5ab53e04aa263644fb25de4_hd.jpg" alt="img"></p><p>一个常用的方法是为离散值添加一些随机噪声的“抖动”(jitter)，使得这些值的分布更加明晰。</p><p>值得注意的是，抖动仅适用于散点图数据，且不会影响拟合的回归线本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;size&quot;, y=&quot;tip&quot;, data=tips, x_jitter=.05);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-200767ca2c93d8dd165cd130be128aba_hd.jpg" alt="img"></p><p>另一种选择是在每个独立的数据分组中对观察结果进行折叠，以绘制中心趋势的估计以及置信区间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;size&quot;, y=&quot;tip&quot;, data=tips, x_estimator=np.mean);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-915b1d306d288386640f61e8d75c2b5e_hd.jpg" alt="img"></p><h2 id="不同类型的模型拟合"><a href="#不同类型的模型拟合" class="headerlink" title="不同类型的模型拟合"></a>不同类型的模型拟合</h2><p>上面使用的简单线性回归模型非常简单，但是，它不适用于某些种类的数据集。 <a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Anscombe%2527s_quartet" target="_blank" rel="noopener">Anscombe’s quartet</a>数据集显示了一些简单线性回归提供了简单目视检查清楚显示差异的关系估计的例子。 例如，在第一种情况下，线性回归是一个很好的模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anscombe = sns.load_dataset(&quot;anscombe&quot;)</span><br><span class="line">sns.lmplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;I&apos;&quot;),</span><br><span class="line">           ci=None, scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-11fb168d4145caa9ba18cfb33fab665e_hd.jpg" alt="img"></p><p>第二个数据集中的线性关系是一样的，但是基本清楚地表明这不是一个好的模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;II&apos;&quot;),</span><br><span class="line">           ci=None, scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-1022e90e7c26a3f650d2a77b5f35ca8e_hd.jpg" alt="img"></p><p>在存在这些高阶关系的情况下，lmplot()和regplot()可以拟合多项式回归模型来拟合数据集中的简单类型的非线性趋势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;II&apos;&quot;),</span><br><span class="line">           order=2, ci=None, scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-ade063eecbe8de6613831dc554f7bfcf_hd.jpg" alt="img"></p><p>除了正在研究的主要关系之外，“异常值”观察还有一个不同的问题，它们由于某种原因而偏离了主要关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;III&apos;&quot;),</span><br><span class="line">           ci=None, scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-6924a185e029a7958e7c9beb57c615fa_hd.jpg" alt="img"></p><p>在有异常值的情况下，它可以使用不同的损失函数来减小相对较大的残差，拟合一个健壮的回归模型，传入robust=True：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;III&apos;&quot;),</span><br><span class="line">           robust=True, ci=None, scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-a4fb4681f702314315e6351822710860_hd.jpg" alt="img"></p><p>当y变量是二进制时，简单的线性回归也“工作”了，但提供了不可信的预测结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tips[&quot;big_tip&quot;] = (tips.tip / tips.total_bill) &gt; .15</span><br><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;big_tip&quot;, data=tips,</span><br><span class="line">           y_jitter=.03);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-28961ac44138618edffeef42b40d65e8_hd.jpg" alt="img"></p><p>在这种情况下，解决方案是拟合逻辑(Logistic)回归，使得回归线显示给定值x的y=1的估计概率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;big_tip&quot;, data=tips,</span><br><span class="line">           logistic=True, y_jitter=.03);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-f5c4894edba577d09861e1421df61854_hd.jpg" alt="img"></p><p>请注意，逻辑回归估计比简单回归计算密集程度（Robust回归也是如此），并且由于使用引导程序计算回归线周围的置信区间，您可能希望将其关闭获得更快的迭代速度（使用参数ci=None）。</p><p>一个完全不同的方法是使用一个<a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Local_regression" target="_blank" rel="noopener">lowess smoother</a>拟合非参数回归。 这种方法具有最少的假设，尽管它是计算密集型的，因此目前根本不计算置信区间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips,</span><br><span class="line">           lowess=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-fa45001aca25e829494abc9a3c63ee20_hd.jpg" alt="img"></p><p>residplot()是一个有用的工具，用于检查简单的回归模型是否拟合数据集。它拟合并移除一个简单的线性回归，然后绘制每个观察值的残差值。 理想情况下，这些值应随机散布在y = 0附近：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.residplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;I&apos;&quot;),</span><br><span class="line">              scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-da316f22c219b098c7a02db9a0996c48_hd.jpg" alt="img"></p><p>如果残差中有结构，则表明简单的线性回归是不合适的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.residplot(x=&quot;x&quot;, y=&quot;y&quot;, data=anscombe.query(&quot;dataset == &apos;II&apos;&quot;),</span><br><span class="line">              scatter_kws=&#123;&quot;s&quot;: 80&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-bfa3f4084aaa8888b70ae957d2e6a2d1_hd.jpg" alt="img"></p><h2 id="调节其他变量"><a href="#调节其他变量" class="headerlink" title="调节其他变量"></a>调节其他变量</h2><p>上面的图表显示了许多方法来探索一对变量之间的关系。然而，通常，一个更有趣的问题是“这两个变量之间的关系如何作为第三个变量的函数而变化？”这是regplot()和lmplot()之间的区别。 虽然regplot()总是显示单个关系，lmplot()将regplot()与FacetGrid结合在一起，提供了一个简单的界面，可以在“faceted”图上显示线性回归，从而允许您探索与多达三个其他类别变量的交互。</p><p>分类关系的最佳方式是绘制相同轴上的两个级别，并使用颜色来区分它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, hue=&quot;smoker&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-284fd1744f3fc70dd08de901fda97b13_hd.jpg" alt="img"></p><p>除了颜色之外，还可以使用不同的散点图标记来使黑色和白色的图像更好地绘制。 您还可以完全控制所用的颜色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, hue=&quot;smoker&quot;, data=tips,</span><br><span class="line">           markers=[&quot;o&quot;, &quot;x&quot;], palette=&quot;Set1&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ff5b754c8df7a23667b65e5b71918843_hd.jpg" alt="img"></p><p>要添加另一个变量，您可以绘制多个“facet”，每个级别的变量出现在网格的行或列中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, hue=&quot;smoker&quot;, col=&quot;time&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-23ef0b29a7914c1da12851941be5245f_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, hue=&quot;smoker&quot;,</span><br><span class="line">           col=&quot;time&quot;, row=&quot;sex&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-c49c23d2b605cadcc894e4c82a6203df_hd.jpg" alt="img"></p><h2 id="控制绘制的大小和形状"><a href="#控制绘制的大小和形状" class="headerlink" title="控制绘制的大小和形状"></a>控制绘制的大小和形状</h2><p>在我们注意到由regplot()和lmplot()创建的默认绘图看起来是一样的，但在轴上却具有不同大小和形状。 这是因为func：regplot是一个“轴级”功能绘制到特定的轴上。 这意味着您可以自己制作多面板图形，并精确控制回归图的位置。 如果没有提供轴，它只需使用“当前活动的”轴，这就是为什么默认绘图与大多数其他matplotlib函数具有相同的大小和形状的原因。要控制大小，您需要自己创建一个图形对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f, ax = plt.subplots(figsize=(5, 6))</span><br><span class="line">sns.regplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips, ax=ax);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-d230b8523f6db3b4131b7d27bd59db97_hd.jpg" alt="img"></p><p>相反，lmplot()图的大小和形状通过FacetGrid界面使用size和aspect参数进行控制，这些参数适用于每个图中的设置，而不是整体图形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, col=&quot;day&quot;, data=tips,</span><br><span class="line">           col_wrap=2, size=3);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-a42a7a8428bdea6196f4d1f2e5fa4fd5_hd.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, col=&quot;day&quot;, data=tips,</span><br><span class="line">           aspect=.5);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-a1989baab51ac7fceb836838e93f6c50_hd.jpg" alt="img"></p><h2 id="在其他背景下绘制回归"><a href="#在其他背景下绘制回归" class="headerlink" title="在其他背景下绘制回归"></a>在其他背景下绘制回归</h2><p>另外一些Seaborn函数在更大，更复杂的绘制中使用regplot()。 第一个是在上一章分布介绍的jointplot()函数。 除了前面讨论的绘图样式之外，jointplot()可以使用regplot()通过传递kind =”reg”来显示关节轴上的线性回归拟合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips, kind=&quot;reg&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-f9fddfabd62ba91a9836b5d5c82e7b77_hd.jpg" alt="img"></p><p>使用kind=”reg”的pairplot()函数结合了regplot()和PairGrid来显示数据集中变量之间的线性关系。 注意这是不同于lmplot()的。 在下图中，两轴在第三个变量的两个级别上不显示相同的关系; 相反，PairGrid()用于显示数据集中变量的不同配对之间的多个关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips, x_vars=[&quot;total_bill&quot;, &quot;size&quot;], y_vars=[&quot;tip&quot;],</span><br><span class="line">             size=5, aspect=.8, kind=&quot;reg&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-7d0d715fb0ce8d1be8ea04ec4eb12e2e_hd.jpg" alt="img"></p><p>类似lmplot()，但不同于jointplot()，使用hue参数在pairplot()中内置了一个附加分类变量的条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(tips, x_vars=[&quot;total_bill&quot;, &quot;size&quot;], y_vars=[&quot;tip&quot;],</span><br><span class="line">             hue=&quot;smoker&quot;, size=5, aspect=.8, kind=&quot;reg&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-b3676d0e26bb8f06ba6aafb3d713c182_hd.jpg" alt="img"></p><h2 id="第五章-分类数据的绘制"><a href="#第五章-分类数据的绘制" class="headerlink" title="第五章 分类数据的绘制"></a>第五章 分类数据的绘制</h2><p>我们之前探讨了如何使用散点图和回归模型拟合来可视化两个变量之间的关系，以及如何在其他分类变量的层次之间进行展示。 当然，还有一大类问题就是分类数据的问题了？ 在这种情况下，散点图和回归模型方法将不起作用。当然，有几个观察可视化这种关系的选择，我们将在本章中讨论。</p><p>非常实用的方法是将Seaborn的分类图分为三类，将分类变量每个级别的每个观察结果显示出来，显示每个观察分布的抽象表示，以及应用统计估计显示的权重趋势和置信区间：</p><ul><li>第一个包括函数swarmplot()和stripplot()</li><li>第二个包括函数boxplot()和violinplot()</li><li>第三个包括函数barplot()和pointplt()</li></ul><p>在了解他们如何接受数据传入方面，尽管每个参数都聚有控制应用于该数据可视化细节的特定参数，但这些功能都共享一个基本的API。</p><p>这与之前的regplot()和lmplot()的关系非常相似（未禾备注：在seaborn的构架中很容易分成这样两类用途相似，使用有所差异的替代方案函数）。在Seaborn中，相对低级别和相对高级别的方法用于定制分类数据的绘制图，上面列出的函数都是低级别的，他们绘制在特定的matplotlib轴上。还有更高级别的factorplot()（未禾备注：这是一个非常简明的快速绘制函数，具体用法会在最后有详细介绍），它将这些功能与FacetGrid结合，以便在面板的网格中应用分类图像。</p><p>使用“整洁”格式的DataFrame调用这些函数是最简单和最好的，尽管较低级别的函数也接受宽形式的DataFrames或简单的观察向量。见下面的例子。</p><blockquote><p>未禾备注：你甚至可以理解为这一章都是在具体学习factorplot()函数，快速、直接、功能强大的绘图函数谁不爱？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib as mpl</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line">sns.set(style=&quot;whitegrid&quot;, color_codes=True)</span><br><span class="line"></span><br><span class="line">np.random.seed(sum(map(ord, &quot;categorical&quot;)))</span><br><span class="line">titanic = sns.load_dataset(&quot;titanic&quot;)</span><br><span class="line">tips = sns.load_dataset(&quot;tips&quot;)</span><br><span class="line">iris = sns.load_dataset(&quot;iris&quot;)</span><br></pre></td></tr></table></figure><h2 id="分类散点图"><a href="#分类散点图" class="headerlink" title="分类散点图"></a>分类散点图</h2><p>显示分类变量级别中某些定量变量的值的一种简单方法使用stripplot()，它会将分散图概括为其中一个变量是分类的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-eac310fc9db0ce1b8837481f32b345f0_hd.jpg" alt="img"></p><p>在条纹图中，散点图通常将重叠。这使得很难看到数据的完整分布。一个简单的解决方案是使用一些随机的“抖动”调整位置（仅沿着分类轴）</p><blockquote><p>未禾备注：抖动是平时可视化中的常用的观察“密度”的方法，除了使用参数抖动，特定的抖动需求也可以用numpy在数据上处理实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, data=tips, jitter=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-c630edb2eed84ab81c55cbb7aea84149_hd.jpg" alt="img"></p><p>不同的方法是使用函数swarmplot()，它使用避免重叠点的算法将分类轴上的每个散点图点定位：</p><blockquote><p>未禾备注：道理上，即使抖动还是会有重叠的可能，所以这种方法可能更好</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-b6a5c774a783e4a4352fd02f19fe9a8c_hd.jpg" alt="img"></p><p>当然也可以传入hue参数添加多个嵌套的分类变量。高于分类轴上的颜色和位置时冗余的，现在每个都提供有两个变量之一的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;sex&quot;,data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-fd71d973d0f4a8899368395c62293f08_hd.jpg" alt="img"></p><p>一般来说，Seaborn分类绘图功能试图从数据中推断类别的顺序。 如果您的数据有一个pandas分类数据类型，那么类别的默认顺序可以在那里设置。 对于其他数据类型，字符串类型的类别将按照它们在DataFrame中显示的顺序进行绘制，但是数组类别将被排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=&quot;size&quot;, y=&quot;total_bill&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-49256cda62e38f4033ff61dc6a5a9eb5_hd.jpg" alt="img"></p><p>使用这些图，将分类变量放在垂直轴上是非常有用的（当类别名称相对较长或有很多类别时，这一点特别有用）。 您可以使用orient关键字强制定向，但通常可以从传递给x和/或y的变量的数据类型推断绘图方向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.swarmplot(x=&quot;total_bill&quot;, y=&quot;day&quot;, hue=&quot;time&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-f203413ad0071e91d54ba4baa662914e_hd.jpg" alt="img"></p><h2 id="分类内的观测分布"><a href="#分类内的观测分布" class="headerlink" title="分类内的观测分布"></a>分类内的观测分布</h2><p>分类散点图固然简单实用，但在某些特定的的情况下，他们可以提供的值的分布信息会变得及其有限（并不明晰）。 有几种方式可以方便的解决这个问题，在类别之间进行简单比较并汇总信息，我们快速讨论并比较一些适合这类数据观测的函数。</p><h2 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h2><p>第一个是熟悉的boxplot()。这种图形显示了分布的三个四分位值与极值。“晶须”延伸到低于和低四分位数的1.5 IQR内的点，然后独立显示落在该范围之外的观测值。 重要的是，这意味着boxplot中的每个值的显示都对应于数据中的实际观察值：</p><blockquote><p>未禾备注：IQR即统计学概念四分位距，第一四分位与第三四分位之间的距离，具体内容请参考更深入的相关资料</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;time&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-25ccd01314cb4edc937940a238da92a1_hd.jpg" alt="img"></p><h2 id="提琴图"><a href="#提琴图" class="headerlink" title="提琴图"></a>提琴图</h2><p>不同的方法是一个violinplot()，它结合了箱体图和分布教程中描述的核心密度估计过程：</p><blockquote><p>未禾备注：核密度估计，即全文中提到的，或参数内传入的kde，具体概念内容请参考相关文档</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=&quot;total_bill&quot;, y=&quot;day&quot;, hue=&quot;time&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-6d411abcbe8dd7f6388423f82368b690_hd.jpg" alt="img"></p><p>这种方法使用核密度估计来更好地描述值的分布。此外，小提琴内还显示了箱体四分位数和晶须值。由于小提琴使用KDE，还有一些其他可以调整的参数，相对于简单的boxplot增加了一些复杂性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=&quot;total_bill&quot;, y=&quot;day&quot;, hue=&quot;time&quot;, data=tips,</span><br><span class="line">               bw=.1, scale=&quot;count&quot;, scale_hue=False);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-5e8455c06422bf0722c1308c4b8fa1a8_hd.jpg" alt="img"></p><p>当色调参数只有两个级别时，也可以传入参数split至violinplot()，这样可以更有效地利用空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;sex&quot;, data=tips, split=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-6a9d8b2e3db2c42168243d803138231a_hd.jpg" alt="img"></p><p>最后，在绘制提琴图的时候有几个选项，包括显示每个人的观察结果而不是总结框图值的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;sex&quot;, data=tips,</span><br><span class="line">               split=True, inner=&quot;stick&quot;, palette=&quot;Set3&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-05a4031ae91989627f25233eeac6f506_hd.jpg" alt="img"></p><p>将swarmplot()或者swarmplot()与violinplot()或boxplot()结合使用可以显示每个观察结果以及分布的摘要：</p><blockquote><p>未禾备注：说实话，并不推荐这么做，过多的信息除了炫技没有什么实际用处。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, data=tips, inner=None)</span><br><span class="line">sns.swarmplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, data=tips, color=&quot;w&quot;, alpha=.5);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-295c5b7b5c1a2b1f672265e64596ce1e_hd.jpg" alt="img"></p><h2 id="类别内的统计估计"><a href="#类别内的统计估计" class="headerlink" title="类别内的统计估计"></a>类别内的统计估计</h2><p>通常，不是显示每个类别中的分布，你可能希望显示值的集中趋势。 Seaborn有两种显示此信息的主要方法，但重要的是，这些功能的基本API与上述相同。（未禾：这是多么令人愉悦的事情）</p><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>最熟悉的方式完成这个目标是一个条形图。 在Seaborn中barplot()函数在完整数据集上运行，并显示任意估计，默认情况下使用均值。 当在每个类别中有多个观察值时，它还使用引导来计算估计周围的置信区间，并绘制使用误差条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot(x=&quot;sex&quot;, y=&quot;survived&quot;, hue=&quot;class&quot;, data=titanic);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-1318b9238be523bd01194cf7bb416261_hd.jpg" alt="img"></p><p>条形图的特殊情况是当您想要显示每个类别中的观察次数，而不是计算第二个变量的统计量。这类似于分类而不是定量变量的直方图。在Seaborn中，使用countplot()函数很容易绘制：</p><blockquote><p>未禾备注：函数将默认使用count参数作为x/y中未传的一组维度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=&quot;deck&quot;, data=titanic, palette=&quot;Greens_d&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-7b236c7baa6138d39982c3a5af64c9e6_hd.jpg" alt="img"></p><p>可以使用上面讨论的所有选项来调用barplot()和countplot()，以及在每个函数的详细文档中的其他选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(y=&quot;deck&quot;, hue=&quot;class&quot;, data=titanic, palette=&quot;Greens_d&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-8a4d0f0fdd1a829ec2d7c1bf9a75f428_hd.jpg" alt="img"></p><h2 id="点图"><a href="#点图" class="headerlink" title="点图"></a>点图</h2><p>pointplot()函数提供了可视化相同信息的另一种风格。该函数还对另一轴的高度估计值进行编码，而不是显示一个完整的柱型，它只绘制点估计和置信区间。另外，点图连接相同hue类别的点。这使得很容易看出主要关系如何随着第二个变量的变化而变化，因为你的眼睛很好地收集斜率的差异：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pointplot(x=&quot;sex&quot;, y=&quot;survived&quot;, hue=&quot;class&quot;, data=titanic);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-e34242c920fa9cba8a1c8063aa1dab02_hd.jpg" alt="img"></p><p>为了使能够在黑白中重现的图形，可以使用不同的标记和线条样式来展示不同hue类别的层次:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.pointplot(x=&quot;class&quot;, y=&quot;survived&quot;, hue=&quot;sex&quot;, data=titanic,</span><br><span class="line">              palette=&#123;&quot;male&quot;: &quot;g&quot;, &quot;female&quot;: &quot;m&quot;&#125;,</span><br><span class="line">              markers=[&quot;^&quot;, &quot;o&quot;], linestyles=[&quot;-&quot;, &quot;--&quot;]);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-30587c2b5672554dc53fdc562afbe879_hd.jpg" alt="img"></p><h2 id="绘制“宽格式”数据"><a href="#绘制“宽格式”数据" class="headerlink" title="绘制“宽格式”数据"></a>绘制“宽格式”数据</h2><p>虽然使用“长格式”或“整洁”数据是优选的，但是这些功能也可以应用于各种格式的“宽格式”数据，包括pandas DataFrame或二维numpy数组阵列。这些对象应该直接传递给数据参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(data=iris,orient=&quot;h&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-c5b73ff1bd2922a3b2ecc4f0993ccaef_hd.jpg" alt="img"></p><p>此外，这些函数接受Pandas或numpy对象的向量，而不是DataFrame中的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(x=iris.species, y=iris.sepal_length);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-fa08b00797eb9ab1ac7676f572b7ed12_hd.jpg" alt="img"></p><p>为了控制由上述功能制作的图形的大小和形状，您必须使用matplotlib命令自己设置图形。 当然，这也意味着这些图块可以和其他种类的图块一起在一个多面板的绘制中共存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f, ax = plt.subplots(figsize=(7, 3))</span><br><span class="line">sns.countplot(y=&quot;deck&quot;, data=titanic, color=&quot;c&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-0c0966051a5d01b14fb7f1adfcfc2646_hd.jpg" alt="img"></p><h2 id="绘制多层面板分类图"><a href="#绘制多层面板分类图" class="headerlink" title="绘制多层面板分类图"></a>绘制多层面板分类图</h2><p>正如我们上面提到的，有两种方法可以在Seaborn中绘制分类图。与回归图中的二元性相似，您可以使用上面介绍的函数，也可以使用更高级别的函数factorplot()，将这些函数与FacetGrid()相结合，通过这个图形的更大的结构来增加展示其他类别的能力。 默认情况下，factorplot()产生一个pairplot()：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;smoker&quot;, data=tips);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-d3e754236b6dd7f89e02eaadf26b566a_hd.jpg" alt="img"></p><p>然而，kind参数可以让您选择以上讨论的任何种类的图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;smoker&quot;, data=tips, kind=&quot;bar&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-1abe66cca352c63bd0a17d7e7c49f038_hd.jpg" alt="img"></p><p>使用factorplot()的主要优点是很容易调用”facet”展开更多其他分类变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=&quot;day&quot;, y=&quot;total_bill&quot;, hue=&quot;smoker&quot;,</span><br><span class="line">               col=&quot;time&quot;, data=tips, kind=&quot;swarm&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-48222058fd4ab295854bcc3d8ffba410_hd.jpg" alt="img"></p><p>任何一种图形都可以画出来。基于FacetGrid的工作原理，要更改图形的大小和形状，需要指定适用于每个方面的size和aspect参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=&quot;time&quot;, y=&quot;total_bill&quot;, hue=&quot;smoker&quot;,</span><br><span class="line">               col=&quot;day&quot;, data=tips, kind=&quot;box&quot;, size=4, aspect=.5);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-7a41b90a994fe70bf463cb70b04db49d_hd.jpg" alt="img"></p><p>重要的是要注意，你也可以直接使用boxplot()和FacetGrid来制作这个图。但是，必须特别注意确保分类变量的顺序在每个方面实施，方法是使用具有Categorical数据类型的数据或通过命令和hue_order。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=&quot;time&quot;, y=&quot;total_bill&quot;, hue=&quot;smoker&quot;,hue_order=[&quot;No&quot;,&quot;Yes&quot;]</span><br><span class="line">               ,col=&quot;day&quot;, data=tips, kind=&quot;box&quot;, size=4, aspect=.5,</span><br><span class="line">              palette=&quot;Set3&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-9a1be10821466554a2f7b171973133fe_hd.jpg" alt="img"></p><p>由于分类图的广义API，它们应该很容易应用于其他更复杂的上下文。 例如，它们可以轻松地与PairGrid结合，以显示多个不同变量之间的分类关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(tips,</span><br><span class="line">                 x_vars=[&quot;smoker&quot;, &quot;time&quot;, &quot;sex&quot;],</span><br><span class="line">                 y_vars=[&quot;total_bill&quot;, &quot;tip&quot;],</span><br><span class="line">                 aspect=.75, size=3.5)</span><br><span class="line">g.map(sns.violinplot, palette=&quot;pastel&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-3600c1e18a1f822a6cf03f98d51a6a9e_hd.jpg" alt="img"></p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p>最后在这章翻译结束后，未禾专门收集了这个重要函数的所有参数说明，方便参考：</p><p>seaborn.factorplot(x=None, y=None, hue=None, data=None, row=None, col=None, col_wrap=None, estimator=<function mean="">, ci=95, n_boot=1000, units=None, order=None, hue_order=None, row_order=None, col_order=None, kind=’point’, size=4, aspect=1, orient=None, color=None, palette=None, legend=True, legend_out=True, sharex=True, sharey=True, margin_titles=False, facet_kws=None, **kwargs)</function></p><p>Parameters：</p><ul><li>x,y,hue 数据集变量 变量名</li><li>date 数据集 数据集名</li><li>row,col 更多分类变量进行平铺显示 变量名</li><li>col_wrap 每行的最高平铺数 整数</li><li>estimator 在每个分类中进行矢量到标量的映射 矢量</li><li>ci 置信区间 浮点数或None</li><li>n_boot 计算置信区间时使用的引导迭代次数 整数</li><li>units 采样单元的标识符，用于执行多级引导和重复测量设计 数据变量或向量数据</li><li>order, hue_order 对应排序列表 字符串列表</li><li>row_order, col_order 对应排序列表 字符串列表</li><li>kind : 可选：point 默认, bar 柱形图, count 频次, box 箱体, violin 提琴, strip 散点，swarm 分散点（具体图形参考文章前部的分类介绍）</li><li>size 每个面的高度（英寸） 标量</li><li>aspect 纵横比 标量</li><li>orient 方向 “v”/“h”</li><li>color 颜色 matplotlib颜色</li><li>palette 调色板 seaborn颜色色板或字典</li><li>legend hue的信息面板 True/False</li><li>legend_out 是否扩展图形，并将信息框绘制在中心右边 True/False</li><li>share{x,y} 共享轴线 True/False</li><li>facet_kws <a href="https://link.zhihu.com/?target=http%3A//seaborn.pydata.org/generated/seaborn.FacetGrid.html%23seaborn.FacetGrid" target="_blank" rel="noopener">FacetGrid</a>的其他参数 字典</li></ul><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>终于抽时间把最重要的三章翻译完了，有了这三章seaborn在数据挖掘中已经可以覆盖到大部分数据格式，其快速做图能力已经可以得到足量的发挥。最近工作压力日趋增大，全文还有最难翻译的一章，会坚持在最近放出。最后吐槽下知乎的排版，代码+贴图非常不方便，费时费力唉。</p><p>如果文章对你有帮助，请不吝点个赞，方便更多的小伙伴能看到。</p><p>如果文章有理解、翻译谬误请留言，十分感谢！</p><p>【第五章完】</p><h2 id="绘制数据网格"><a href="#绘制数据网格" class="headerlink" title="绘制数据网格"></a>绘制数据网格</h2><p>在探索中等维度数据时，一个有用的方法是在数据集的不同子集上绘制相同绘图的多个实例。这种技术有时被称为“格子”或“格子”绘图，它与“小倍数”的想法有关。 它允许观看者快速提取大量关于复杂数据的信息。 Matplotlib可以很好地支持制作具有多个轴的图形; seaborn建立在此之上，以将结构直接链接到数据集结构上进行绘制。</p><p>要使用这些功能，您的数据必须位于Pandas DataFrame中，并且必须采用Hadley Whickam称为“整洁”数据的形式。 简而言之，这意味着您的数据框架应该被结构化，使得每一列都是一个变量，每一行都是一个观测。</p><p>对于高级使用，您可以直接使用本教程本部分中讨论的对象，这将提供最大的灵活性。一些Seaborn功能（如lmplot()，factorplot()和pairplot()）也在幕后使用。与其他Seaborn功能“Axes级别”不同，并且绘制在特定（可能已经存在的）matplotlib轴上，而无需其他操作的图形，这些较高级别的功能在调用时创建一个数字，并且通常更严格地说明如何设置。在某些情况下，对于这些函数或其依赖的类的构造函数的参数将提供与图形大小不同的接口属性，如lmplot()的情况，您可以在其中设置每个方面的高度和纵横比而不是整体尺寸。使用这些对象之一的任何函数总是在绘制之后返回，而且这些对象中的大多数都具有方便的方法来改变绘制，通常以更抽象和简单的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">from scipy import stats</span><br><span class="line">import matplotlib as mpl</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">sns.set(style=&quot;ticks&quot;)</span><br><span class="line">np.random.seed(sum(map(ord, &quot;axis_grids&quot;)))</span><br></pre></td></tr></table></figure><h2 id="用FacetGrid子集数据"><a href="#用FacetGrid子集数据" class="headerlink" title="用FacetGrid子集数据"></a>用FacetGrid子集数据</h2><p>当您想要在数据集的子集内可视化变量的分布或多个变量之间的关系时，FacetGrid类很有用。 FacetGrid可以绘制最多三个维度：row，col和hue。前两者与所得轴数有明显的对应关系;将hue变量视为沿着深度轴的第三维，其中不同的级别用不同的颜色绘制。</p><p>通过使用数据框初始化FacetGrid对象和将形成网格的行，列或色调维度的变量的名称来使用该类。 这些变量应该是分类的或离散的，然后变量的每个级别的数据将用于沿该轴的小平面。 例如，假设我们要检查tips数据集中的午餐和晚餐之间的差异。</p><p>另外，lmplot()和factorplot()在内部使用这个对象，并且当它们被修改时，它们返回该对象，以便可以用于进一步的调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tips = sns.load_dataset(&quot;tips&quot;)</span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p>total_billtipsexsmokerdaytimesize016.991.01FemaleNoSunDinner 2110.341.66MaleNoSunDinner 3221.013.50MaleNoSunDinner 3323.683.31MaleNoSunDinner 2424.593.61FemaleNoSunDinner 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, col=&quot;time&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-9f2b5608361b97c070b7875ce83b9e9b_hd.jpg" alt="img"></p><p>像这样初始化网格设置了matplotlib图形和轴，但并没有绘制任何东西。</p><p>在此网格上可视化数据的主要方法是使用FacetGrid.map()方法，提供一个绘图功能和数据框中变量的名称来绘制。我们来看一下这些子集中提示的分布，使用直方图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, col=&quot;time&quot;)</span><br><span class="line">g.map(plt.hist, &quot;tip&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-5889caed930f8e6456e0f5436f417bf0_hd.jpg" alt="img"></p><p>此功能将绘制图形并注释轴，并在一个步骤中生成完成。 要做一个关系图，只需传递多个变量名。可以提供关键字参数，将其传递给绘图功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, col=&quot;sex&quot;, hue=&quot;smoker&quot;)</span><br><span class="line">g.map(plt.scatter, &quot;total_bill&quot;, &quot;tip&quot;, alpha=.7)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-dd190201252b6e703f0aa27ccf3ef8d8_hd.jpg" alt="img"></p><p>有几个选项可以控制可以传递给类构造函数的网格的外观。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, row=&quot;smoker&quot;, col=&quot;time&quot;, margin_titles=True)</span><br><span class="line">g.map(sns.regplot, &quot;size&quot;, &quot;total_bill&quot;, color=&quot;.3&quot;, fit_reg=False, x_jitter=.1);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-550f3934b37563c402583046f2ecfa00_hd.jpg" alt="img"></p><p>请注意，matplotlib API没有正式支持margin_titles，并且在所有情况下都可能无法正常运行。 特别是，它目前不能用于图形之外的注释框。</p><p>通过提供每个图形的高度以及纵横比来达到设置图形大小的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, col=&quot;day&quot;, size=4, aspect=.5)</span><br><span class="line">g.map(sns.barplot, &quot;sex&quot;, &quot;total_bill&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-8bf26ec7f1b62170664af09f1ac0ed1f_hd.jpg" alt="img"></p><p>在matplotlib大于1.4的版本中，可以传递在gridspec模块中的参数，增加其尺寸来吸引注意力。当然，在每个方面可视化不同数量的组的数据集的分布时，这无疑是特别实用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">titanic = sns.load_dataset(&quot;titanic&quot;)</span><br><span class="line">titanic = titanic.assign(deck=titanic.deck.astype(object)).sort_values(&quot;deck&quot;)</span><br><span class="line">g = sns.FacetGrid(titanic, col=&quot;class&quot;, sharex=False,</span><br><span class="line">                  gridspec_kws=&#123;&quot;width_ratios&quot;: [5, 3, 3]&#125;)</span><br><span class="line">g.map(sns.boxplot, &quot;deck&quot;, &quot;age&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-88d412cb9e91f29e5925c7ddd661af4f_hd.jpg" alt="img"></p><p>这里，默认的顺序来自于DataFrame中的书序。如果用于定义facets具有分类变量的类型，则会实用类别的顺序。否则，facets将按照级别的顺序排列。当然，也可以使用适当的*_order参数来指定任何平面维度的数据顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ordered_days = tips.day.value_counts().index</span><br><span class="line">g = sns.FacetGrid(tips, row=&quot;day&quot;, row_order=ordered_days,</span><br><span class="line">                  size=1.7, aspect=4,)</span><br><span class="line">g.map(sns.distplot, &quot;total_bill&quot;, hist=False, rug=True);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-18b5561a458d45ccd80ce1d75f84a9ea_hd.jpg" alt="img"></p><p>可以提供任何Seaborn调色板（即可以传递给color_palette()的参数），还可以使用将色调变量中值的名称映射到有效的matplotlib颜色的字典：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pal = dict(Lunch=&quot;seagreen&quot;, Dinner=&quot;gray&quot;)</span><br><span class="line">g = sns.FacetGrid(tips, hue=&quot;time&quot;, palette=pal, size=5)</span><br><span class="line">g.map(plt.scatter, &quot;total_bill&quot;, &quot;tip&quot;, s=50, alpha=.7, linewidth=.5, edgecolor=&quot;white&quot;)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-46c8d268396fda740c3f3e0aa96ee0c7_hd.jpg" alt="img"></p><p>您还可以让色调的其他方面在色相变量的水平上有所不同，这对于绘制黑白打印时将更易于理解的图形将有所帮助。 为此，将字典传递给hue_kws，其中键是绘图函数关键字参数的名称，值是关键字值的列表，每个级别的hue对应一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, hue=&quot;sex&quot;, palette=&quot;Set1&quot;, size=5, hue_kws=&#123;&quot;marker&quot;: [&quot;^&quot;, &quot;v&quot;]&#125;)</span><br><span class="line">g.map(plt.scatter, &quot;total_bill&quot;, &quot;tip&quot;, s=100, linewidth=.5, edgecolor=&quot;white&quot;)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-8a74573c377e77af4ac699ac8ab1d07d_hd.jpg" alt="img"></p><p>如果您有多个级别的一个变量，您可以沿着列绘制，但是”wrap”它们，以便跨越多个行。 当这样做时，将不能使用行(row)变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">attend = sns.load_dataset(&quot;attention&quot;).query(&quot;subject &lt;= 12&quot;)</span><br><span class="line">g = sns.FacetGrid(attend, col=&quot;subject&quot;, col_wrap=4, size=2, ylim=(0, 10))</span><br><span class="line">g.map(sns.pointplot, &quot;solutions&quot;, &quot;score&quot;, color=&quot;.3&quot;, ci=None);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-0ac8d99ee4bed79a89b5f5abcd0bf161_hd.jpg" alt="img"></p><p>使用FacetGrid.map()（可以多次调用）绘制图形之后，您可能需要调整绘图的某些方面。 FacetGrid对象上还有一些方法可以在更高层次的抽象上操作图形。 最通用的是FacetGrid.set()，还有其他更专门的方法，如FacetGrid.set_axis_labels()，它遵循内部方面没有轴标签的效果。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">with sns.axes_style(&quot;white&quot;):</span><br><span class="line">    g = sns.FacetGrid(tips, row=&quot;sex&quot;, col=&quot;smoker&quot;, margin_titles=True, size=2.5)</span><br><span class="line">g.map(plt.scatter, &quot;total_bill&quot;, &quot;tip&quot;, color=&quot;#334488&quot;, edgecolor=&quot;white&quot;, lw=.5);</span><br><span class="line">g.set_axis_labels(&quot;Total bill (US Dollars)&quot;, &quot;Tip&quot;);</span><br><span class="line">g.set(xticks=[10, 30, 50], yticks=[2, 6, 10]);</span><br><span class="line">g.fig.subplots_adjust(wspace=.02, hspace=.02);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-ba89152565892ede64bd0374023bf980_hd.jpg" alt="img"></p><p>对于更多的定制，您可以直接使用underling matplotlib图形和Axes对象，它们分别作为图和轴（二维数组）的成员属性存储。 当没有行或列面的图形时，还可以使用ax属性直接访问单个轴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, col=&quot;smoker&quot;, margin_titles=True, size=4)</span><br><span class="line">g.map(plt.scatter, &quot;total_bill&quot;, &quot;tip&quot;, color=&quot;#338844&quot;, edgecolor=&quot;white&quot;, s=50, lw=1)</span><br><span class="line">for ax in g.axes.flat:</span><br><span class="line">    ax.plot((0, 50), (0, .2 * 50), c=&quot;.2&quot;, ls=&quot;--&quot;)</span><br><span class="line">g.set(xlim=(0, 60), ylim=(0, 14));</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-3fed5e7268b4d3d86c908828fafba138_hd.jpg" alt="img"></p><h2 id="将自定义函数应用在网格上"><a href="#将自定义函数应用在网格上" class="headerlink" title="将自定义函数应用在网格上"></a>将自定义函数应用在网格上</h2><p>在使用FacetGrid时，并不限于现有的matplotlib和Seaborn功能。但是，要正常工作，使用必须遵循以下规则：</p><ol><li>必须绘制在“当前活动”的matplotlib轴上。 这对matplotlib.pyplot命名空间中的函数是正确的，如果要使用其方法，可以调用plt.gca来获取对当前Axes的直接引用。</li><li>它必须接受它在位置参数中绘制的数据。 在内部，FacetGrid将传递一系列针对传递给FacetGrid.map()的命名位置参数的数据。</li><li>它必须能够接受color和label关键字参数，理想情况下它将非常有用。在大多数情况下，使用一个通用的**kwargs字典是最简单的，并将其传递给底层的绘图函数。</li></ol><p>我们来看一下您可以绘制的功能的最简单的例子。该函数只需要给出每个方向的向量的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def quantile_plot(x, **kwargs):</span><br><span class="line">    qntls, xr = stats.probplot(x, fit=False)</span><br><span class="line">    plt.scatter(xr, qntls, **kwargs)</span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(tips, col=&quot;sex&quot;, size=4)</span><br><span class="line">g.map(quantile_plot, &quot;total_bill&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-80ed14890b57bc617c6493cbc8fff50c_hd.jpg" alt="img"></p><p>如果我们想做一个双变量图，你应该编写函数，以便它接受x轴为第一个变量和y轴为第二个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def qqplot(x, y, **kwargs):</span><br><span class="line">    _, xr = stats.probplot(x, fit=False)</span><br><span class="line">    _, yr = stats.probplot(y, fit=False)</span><br><span class="line">    plt.scatter(xr, yr, **kwargs)</span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(tips, col=&quot;smoker&quot;, size=4)</span><br><span class="line">g.map(qqplot, &quot;total_bill&quot;, &quot;tip&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-f4ee5c76f8143f72924da221976adf62_hd.jpg" alt="img"></p><p>因为plt.scatter接受color和label关键字参数并正确运行，我们可以简单的再添加一个hue参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, hue=&quot;time&quot;, col=&quot;sex&quot;, size=4)</span><br><span class="line">g.map(qqplot, &quot;total_bill&quot;, &quot;tip&quot;)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-5fc741b1c3808d9446f8e2da9019b6fc_hd.jpg" alt="img"></p><p>这种方法还允许我们使用额外的sns设置来区分hue变量的级别，依赖这些关键字的参数将使得显示摆脱对刻面变量的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = sns.FacetGrid(tips, hue=&quot;time&quot;, col=&quot;sex&quot;, size=4,</span><br><span class="line">                  hue_kws=&#123;&quot;marker&quot;: [&quot;s&quot;, &quot;D&quot;]&#125;)</span><br><span class="line">g.map(qqplot, &quot;total_bill&quot;, &quot;tip&quot;, s=40, edgecolor=&quot;w&quot;)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-8a7d63e43590a4859faaed76a4d6dabd_hd.jpg" alt="img"></p><p>一些时候，将需要映射一个适合的color和label关键字参数以达到预期的效果。在这种情况下，您将会有明确地把握并熟悉处理自定义函数的逻辑。例如这种方法将允许使用映射plt.hexbin函数和那些类似的不方便使用FacetGrid API的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def hexbin(x, y, color, **kwargs):</span><br><span class="line">    cmap = sns.light_palette(color, as_cmap=True)</span><br><span class="line">    plt.hexbin(x, y, gridsize=15, cmap=cmap, **kwargs)</span><br><span class="line"></span><br><span class="line">with sns.axes_style(&quot;dark&quot;):</span><br><span class="line">    g = sns.FacetGrid(tips, hue=&quot;time&quot;, col=&quot;time&quot;, size=4)</span><br><span class="line">g.map(hexbin, &quot;total_bill&quot;, &quot;tip&quot;, extent=[0, 50, 0, 10]);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-977af27c7a944bdbddd261133b670150_hd.jpg" alt="img"></p><h2 id="用PairGrid-and-pairplot-绘制成对的关系"><a href="#用PairGrid-and-pairplot-绘制成对的关系" class="headerlink" title="用PairGrid and pairplot()绘制成对的关系"></a>用PairGrid and pairplot()绘制成对的关系</h2><p>PairGrid还允许您使用相同的绘图类型快速绘制小子图的网格，以在每个图形中显示数据。在一个PairGrid中，每个行和列分配给一个不同的变量，所以生成的图显示了数据集中的每个成对关系。这种风格的绘图有时被称为“散点图矩阵”，因为这是显示每个关系的最常见方式，但是PairGrid不仅限于散点图。</p><p>了解FacetGrid和PairGrid之间的区别很重要。在前者中，每个方面显示出与其他变量的不同级别相同的关系。在后者中，每个图都显示不同的关系（尽管上下三角形将具有镜像图）。使用PairGrid可以为您提供非常快速，非常高级的汇总数据集中有趣的关系。</p><p>该类的基本用法与FacetGrid非常相似。首先初始化网格，然后将绘图函数传递给map方法，并在每个子图上调用它。还有一个配套功能，pairplot（）交易了一些灵活性更快的绘图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iris = sns.load_dataset(&quot;iris&quot;)</span><br><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map(plt.scatter);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-66aa5c89da0590b8df1fb1aaaa27bc05_hd.jpg" alt="img"></p><p>可以在对角线上绘制不同的函数，以显示每列中变量的单变量分布。 请注意，轴刻度线将不对应于该图的计数或密度轴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_diag(plt.hist)</span><br><span class="line">g.map_offdiag(plt.scatter);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-7d38ba75d236d8825de65263e38bbabc_hd.jpg" alt="img"></p><p>使用该图的非常常见的方法是通过单独的分类变量来绘制观察值。 例如，虹膜数据集对于三种不同种类的鸢尾花中的每一种进行四次测量，以便您可以看到它们如何不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(iris, hue=&quot;species&quot;)</span><br><span class="line">g.map_diag(plt.hist)</span><br><span class="line">g.map_offdiag(plt.scatter)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-c8f204087140c869503ab1c64f5b764d_hd.jpg" alt="img"></p><p>默认情况下，使用数据集中的每个数字列，但如果需要，您可以专注于特定的关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(iris, vars=[&quot;sepal_length&quot;, &quot;sepal_width&quot;], hue=&quot;species&quot;)</span><br><span class="line">g.map(plt.scatter);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-5fd801e317ef34c26e1b0c1872260126_hd.jpg" alt="img"></p><p>也可以在上下三角形中使用不同的功能来强调关系的不同方面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_upper(plt.scatter)</span><br><span class="line">g.map_lower(sns.kdeplot, cmap=&quot;Blues_d&quot;)</span><br><span class="line">g.map_diag(sns.kdeplot, lw=3, legend=False);</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-f354d67e2bf8ac1b14f8fe9078524245_hd.jpg" alt="img"></p><p>具有对角线上的身份关系的方形网格实际上只是一个特殊情况，您可以在行和列中绘制不同的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(tips, y_vars=[&quot;tip&quot;], x_vars=[&quot;total_bill&quot;, &quot;size&quot;], size=4)</span><br><span class="line">g.map(sns.regplot, color=&quot;.3&quot;)</span><br><span class="line">g.set(ylim=(-1, 11), yticks=[0, 5, 10]);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-16f09c835b8b486e21d3eed601c3ad84_hd.jpg" alt="img"></p><p>当然，sns属性是可配置的。 例如，您可以使用不同的调色板（例如，显示色调变量的顺序），并将关键字参数传递到绘图函数中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.PairGrid(tips, hue=&quot;size&quot;, palette=&quot;GnBu_d&quot;)</span><br><span class="line">g.map(plt.scatter, s=50, edgecolor=&quot;white&quot;)</span><br><span class="line">g.add_legend();</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-1cbe14644fb39c93745daea2f5e56a06_hd.jpg" alt="img"></p><p>PairGrid是灵活的，但是要快速查看一个数据集，可以使用pairplot()更容易。 默认情况下，该功能使用散点图和直方图，但是还可以添加其他几种（目前还可以绘制对角线上的对角线和KDEs的回归图）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(iris, hue=&quot;species&quot;, size=2.5);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-e50e0b8bdd127530871188188ea7c8bc_hd.jpg" alt="img"></p><p>您还可以使用关键字参数控制显示细节，并返回PairGrid实例进行进一步的调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = sns.pairplot(iris, hue=&quot;species&quot;, palette=&quot;Set2&quot;, diag_kind=&quot;kde&quot;, size=2.5)</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-099c4a8bac808e3e6d7ba63258d10615_hd.jpg" alt="img"></p><p>松了口气，最终全部完成了，没有烂尾。有时间未禾将对每个章节进行再次的校对和注释，感谢诸多朋友的支持和鼓励，闲暇也许还会针对这六章内容出一个快速上手笔记，感谢！</p><p>【全文完】</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python绘图软件seaborn的常用介绍&lt;/p&gt;
&lt;p&gt;官方文档： &lt;a href=&quot;http://seaborn.pydata.org/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;seaborn官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是常用功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;import语句&quot;&gt;&lt;a href=&quot;#import语句&quot; class=&quot;headerlink&quot; title=&quot;import语句&quot;&gt;&lt;/a&gt;import语句&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; searborn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Seaborn" scheme="http://yoursite.com/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>必备神器之pandas</title>
    <link href="http://yoursite.com/2018/02/07/%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8%E4%B9%8Bpandas/"/>
    <id>http://yoursite.com/2018/02/07/必备神器之pandas/</id>
    <published>2018-02-07T15:32:51.000Z</published>
    <updated>2018-02-08T15:52:09.569Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>python工具包pandas，数据分析</p></blockquote><h4 id="1-import语句"><a href="#1-import语句" class="headerlink" title="1 import语句"></a>1 import语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2-文件读取"><a href="#2-文件读取" class="headerlink" title="2 文件读取"></a>2 文件读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(path=<span class="string">'file.csv'</span>)</span><br><span class="line">参数：header=<span class="keyword">None</span>  用默认列名，<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，<span class="number">3.</span>..</span><br><span class="line">     names=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>...] 自定义列名</span><br><span class="line">     index_col=<span class="string">'A'</span>|[<span class="string">'A'</span>, <span class="string">'B'</span>...]  给索引列指定名称，如果是多重索引，可以传list</span><br><span class="line">     skiprows=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] 需要跳过的行号，从文件头<span class="number">0</span>开始，skip_footer从文件尾开始</span><br><span class="line">     nrows=N 需要读取的行数，前N行</span><br><span class="line">     chunksize=M 返回迭代类型TextFileReader，每M条迭代一次，数据占用较大内存时使用</span><br><span class="line">     sep=<span class="string">':'</span>数据分隔默认是<span class="string">','</span>，根据文件选择合适的分隔符，如果不指定参数，会自动解析</span><br><span class="line">     skip_blank_lines=<span class="keyword">False</span> 默认为<span class="keyword">True</span>，跳过空行，如果选择不跳过，会填充NaN</span><br><span class="line">     converters=&#123;<span class="string">'col1'</span>, func&#125; 对选定列使用函数func转换，通常表示编号的列会使用（避免转换成int）</span><br><span class="line">     </span><br><span class="line">dfjs = pd.read_json(<span class="string">'file.json'</span>)  可以传入json格式字符串</span><br><span class="line">dfex = pd.read_excel(<span class="string">'file.xls'</span>, sheetname=[<span class="number">0</span>,<span class="number">1.</span>.]) 读取多个sheet页，返回多个df的字典</span><br></pre></td></tr></table></figure><h4 id="3-数据预处理"><a href="#3-数据预处理" class="headerlink" title="3 数据预处理"></a>3 数据预处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()           返回各行是否是上一行的重复行</span><br><span class="line">df.drop_duplicates()      删除重复行，如果需要按照列过滤，参数选填[<span class="string">'col1'</span>, <span class="string">'col2'</span>,...]</span><br><span class="line">df.fillna(<span class="number">0</span>)              用实数<span class="number">0</span>填充na</span><br><span class="line">df.dropna()               axis=<span class="number">0</span>|<span class="number">1</span>  <span class="number">0</span>-index <span class="number">1</span>-column</span><br><span class="line">                          how=<span class="string">'all'</span>|<span class="string">'any'</span> all-全部是NA才删  any-只要有NA就全删</span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'col1'</span>]            直接删除某一列              </span><br><span class="line">df.drop([<span class="string">'col1'</span>,...], aixs=<span class="number">1</span>)   删除指定列，也可以删除行                          </span><br><span class="line">df.column = col_lst       重新制定列名</span><br><span class="line">df.rename(index=&#123;<span class="string">'row1'</span>:<span class="string">'A'</span>&#125;,   重命名索引名和列名</span><br><span class="line">          columns=&#123;<span class="string">'col1'</span>:<span class="string">'A1'</span>&#125;)  </span><br><span class="line">df.replace(dict)          替换df值，前后值可以用字典表，&#123;<span class="number">1</span>:‘A’, <span class="string">'2'</span>:<span class="string">'B'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_digits</span><span class="params">(str)</span>:</span></span><br><span class="line">    m = re.match(<span class="string">r'(\d+(\.\d+)?)'</span>, str.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:   </span><br><span class="line">        <span class="keyword">return</span> float(m.groups()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">df.apply(get_digits)      DataFrame.apply，只获取小数部分，可以选定某一列或行</span><br><span class="line">df[<span class="string">'col1'</span>].map(func)      Series.map，只对列进行函数转换</span><br><span class="line"></span><br><span class="line">pd.merge(df1, df2, on=<span class="string">'col1'</span>, </span><br><span class="line">         how=<span class="string">'inner'</span>，sort=<span class="keyword">True</span>) 合并两个DataFrame，按照共有的某列做内连接（交集），outter为外连接（并集），结果排序</span><br><span class="line">         </span><br><span class="line">pd.merge(df1, df2, left_on=<span class="string">'col1'</span>, </span><br><span class="line">         right_on=<span class="string">'col2'</span>)   df1 df2没有公共列名，所以合并需指定两边的参考列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd.concat([sr1, sr2, sr3,...], axis=<span class="number">0</span>) 多个Series堆叠成多行，结果仍然是一个Series</span><br><span class="line">pd.concat([sr1, sr2, sr3,...], axis=<span class="number">1</span>) 多个Series组合成多行多列，结果是一个DataFrame，索引取并集，没有交集的位置填入缺省值NaN</span><br><span class="line"> </span><br><span class="line">df1.combine_first(df2)   用df2的数据补充df1的缺省值NaN，如果df2有更多行，也一并补上</span><br><span class="line"></span><br><span class="line">df.stack()              列旋转成行，也就是列名变为索引名，原索引变成多层索引，结果是具有多层索引的Series，实际上是把数据集拉长</span><br><span class="line"></span><br><span class="line">df.unstack()            将含有多层索引的Series转换为DataFrame，实际上是把数据集压扁，如果某一列具有较少类别，那么把这些类别拉出来作为列</span><br><span class="line">df.pivot()              实际上是unstack的应用，把数据集压扁</span><br><span class="line"></span><br><span class="line">pd.get_dummies(df[<span class="string">'col1'</span>], prefix=<span class="string">'key'</span>) 某列含有有限个值，且这些值一般是字符串，例如国家，借鉴位图的思想，可以把k个国家这一列量化成k列，每列用<span class="number">0</span>、<span class="number">1</span>表示</span><br></pre></td></tr></table></figure><h4 id="4-数据筛选"><a href="#4-数据筛选" class="headerlink" title="4 数据筛选"></a>4 数据筛选</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df.columns             列名，返回Index类型的列的集合</span><br><span class="line">df.index               索引名，返回Index类型的索引的集合</span><br><span class="line">df.shape               返回tuple，行x列</span><br><span class="line">df.head(n=N)           返回前N条</span><br><span class="line">df.tail(n=M)           返回后M条</span><br><span class="line">df.values              值的二维数组，以numpy.ndarray对象返回</span><br><span class="line">df.index               DataFrame的索引，索引不可以直接赋值修改</span><br><span class="line">df.reindex(index=[<span class="string">'row1'</span>, <span class="string">'row2'</span>,...]</span><br><span class="line">           columns=[<span class="string">'col1'</span>, <span class="string">'col2'</span>,...]) 根据新索引重新排序</span><br><span class="line">df[m:n]                切片，选取m~n<span class="number">-1</span>行</span><br><span class="line">df[df[<span class="string">'col1'</span>] &gt; <span class="number">1</span>]     选取满足条件的行</span><br><span class="line">df.query(<span class="string">'col1 &gt; 1'</span>)   选取满足条件的行</span><br><span class="line">df.query(<span class="string">'col1==[v1,v2,...]'</span>) </span><br><span class="line">df.ix[:,<span class="string">'col1'</span>]        选取某一列</span><br><span class="line">df.ix[<span class="string">'row1'</span>, <span class="string">'col2'</span>]  选取某一元素</span><br><span class="line">df.ix[:,:<span class="string">'col2'</span>]       切片选取某一列之前（包括col2）的所有列</span><br><span class="line">df.loc[m:n]            获取从m~n行（推荐）</span><br><span class="line">df.iloc[m:n]           获取从m~n<span class="number">-1</span>行</span><br><span class="line">df.loc[m:n<span class="number">-1</span>,<span class="string">'col1'</span>:<span class="string">'coln'</span>]   获取从m~n行的col1~coln列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sr=df[<span class="string">'col'</span>]           取某一列，返回Series</span><br><span class="line">sr.values              Series的值，以numpy.ndarray对象返回</span><br><span class="line">sr.index               Series的索引，以index对象返回</span><br></pre></td></tr></table></figure><h4 id="5-数据运算与排序"><a href="#5-数据运算与排序" class="headerlink" title="5 数据运算与排序"></a>5 数据运算与排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.T                   DataFrame转置</span><br><span class="line">df1 + df2              按照索引和列相加，得到并集，NaN填充</span><br><span class="line">df1.add(df2, fill_value=<span class="number">0</span>) 用其他值填充</span><br><span class="line">df1.add/sub//mul/div   四则运算的方法</span><br><span class="line">df - sr                DataFrame的所有行同时减去Series</span><br><span class="line">df * N                 所有元素乘以N</span><br><span class="line">df.add(sr, axis=<span class="number">0</span>)     DataFrame的所有列同时减去Series</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sr.order()             Series升序排列</span><br><span class="line">df.sort_index(aixs=<span class="number">0</span>, ascending=<span class="keyword">True</span>) 按行索引升序</span><br><span class="line">df.sort_index(by=[<span class="string">'col1'</span>, <span class="string">'col2'</span>...])  按指定列优先排序</span><br><span class="line">df.rank()              计算排名rank值</span><br></pre></td></tr></table></figure><h4 id="6-数学统计"><a href="#6-数学统计" class="headerlink" title="6 数学统计"></a>6 数学统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sr.unique             Series去重</span><br><span class="line">sr.value_counts()     Series统计频率，并从大到小排序，DataFrame没有这个方法</span><br><span class="line">sr.describe()         返回基本统计量和分位数</span><br><span class="line"></span><br><span class="line">df.describe()         按各列返回基本统计量和分位数</span><br><span class="line">df.count()            求非NA值得数量</span><br><span class="line">df.max()              求最大值</span><br><span class="line">df.min()              求最大值</span><br><span class="line">df.sum(axis=<span class="number">0</span>)        按各列求和</span><br><span class="line">df.mean()             按各列求平均值</span><br><span class="line">df.median()           求中位数</span><br><span class="line">df.var()              求方差</span><br><span class="line">df.std()              求标准差</span><br><span class="line">df.mad()              根据平均值计算平均绝对利差</span><br><span class="line">df.cumsum()           求累计和</span><br><span class="line">sr1.corr(sr2)         求相关系数</span><br><span class="line">df.cov()              求协方差矩阵</span><br><span class="line">df1.corrwith(df2)     求相关系数</span><br><span class="line"></span><br><span class="line">pd.cut(array1, bins)  求一维数据的区间分布</span><br><span class="line">pd.qcut(array1, <span class="number">4</span>)    按指定分位数进行区间划分，<span class="number">4</span>可以替换成自定义的分位数列表   </span><br><span class="line"></span><br><span class="line">df[<span class="string">'col1'</span>].groupby(df[<span class="string">'col2'</span>]) 列<span class="number">1</span>按照列<span class="number">2</span>分组，即列<span class="number">2</span>作为key</span><br><span class="line">df.groupby(<span class="string">'col1'</span>)    DataFrame按照列<span class="number">1</span>分组</span><br><span class="line">grouped.aggreagte(func) 分组后根据传入函数来聚合</span><br><span class="line">grouped.aggregate([f1, f2,...]) 根据多个函数聚合，表现成多列，函数名为列名</span><br><span class="line">grouped.aggregate([(<span class="string">'f1_name'</span>, f1), (<span class="string">'f2_name'</span>, f2)]) 重命名聚合后的列名</span><br><span class="line">grouped.aggregate(&#123;<span class="string">'col1'</span>:f1, <span class="string">'col2'</span>:f2,...&#125;) 对不同的列应用不同函数的聚合，函数也可以是多个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.pivot_table([<span class="string">'col1'</span>, <span class="string">'col2'</span>], </span><br><span class="line">               rows=[<span class="string">'row1'</span>, <span class="string">'row2'</span>], </span><br><span class="line">               aggfunc=[np.mean, np.sum]</span><br><span class="line">               fill_value=<span class="number">0</span>,</span><br><span class="line">               margins=<span class="keyword">True</span>)  根据row1, row2对col1， col2做分组聚合，聚合方法可以指定多种，并用指定值替换缺省值</span><br><span class="line">               </span><br><span class="line">          </span><br><span class="line">pd.crosstab(df[<span class="string">'col1'</span>], df[<span class="string">'col2'</span>]) 交叉表，计算分组的频率</span><br></pre></td></tr></table></figure><hr><hr><h1 id="1-对象创建-Data-Structure-Intro-section"><a href="#1-对象创建-Data-Structure-Intro-section" class="headerlink" title="1. 对象创建 Data Structure Intro section"></a>1. 对象创建 <a href="dsintro.html#dsintro">Data Structure Intro section</a></h1><h3 id="1-1-Series-Series"><a href="#1-1-Series-Series" class="headerlink" title="1.1 Series Series"></a>1.1 Series <a href="generated/pandas.Series.html#pandas.Series"><code>Series</code></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [4]: s = pd.Series([1,3,5,np.nan,6,8])</span><br><span class="line"></span><br><span class="line">In [5]: s</span><br><span class="line">Out[5]: </span><br><span class="line">0    1.0</span><br><span class="line">1    3.0</span><br><span class="line">2    5.0</span><br><span class="line">3    NaN</span><br><span class="line">4    6.0</span><br><span class="line">5    8.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="1-2-DataFrame-DataFrame"><a href="#1-2-DataFrame-DataFrame" class="headerlink" title="1.2 DataFrame DataFrame"></a>1.2 DataFrame <a href="generated/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [6]: dates = pd.date_range(&apos;20130101&apos;, periods=6)</span><br><span class="line"></span><br><span class="line">In [7]: dates</span><br><span class="line">Out[7]: </span><br><span class="line">DatetimeIndex([&apos;2013-01-01&apos;, &apos;2013-01-02&apos;, &apos;2013-01-03&apos;, &apos;2013-01-04&apos;,</span><br><span class="line">               &apos;2013-01-05&apos;, &apos;2013-01-06&apos;],</span><br><span class="line">              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br><span class="line"></span><br><span class="line">In [8]: df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list(&apos;ABCD&apos;))</span><br><span class="line"></span><br><span class="line">In [9]: df</span><br><span class="line">Out[9]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line">2013-01-01  0.469112 -0.282863 -1.509059 -1.135632</span><br><span class="line">2013-01-02  1.212112 -0.173215  0.119209 -1.044236</span><br><span class="line">2013-01-03 -0.861849 -2.104569 -0.494929  1.071804</span><br><span class="line">2013-01-04  0.721555 -0.706771 -1.039575  0.271860</span><br><span class="line">2013-01-05 -0.424972  0.567020  0.276232 -1.087401</span><br><span class="line">2013-01-06 -0.673690  0.113648 -1.478427  0.524988</span><br></pre></td></tr></table></figure><h1 id="2-导入数据"><a href="#2-导入数据" class="headerlink" title="2. 导入数据"></a>2. 导入数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv()           默认分割符为逗号</span><br><span class="line">参数：header=None  用默认列名，0，1，2，3...</span><br><span class="line">     names=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;...] 自定义列名</span><br><span class="line">     index_col=&apos;A&apos;|[&apos;A&apos;, &apos;B&apos;...]  给索引列指定名称，如果是多重索引，可以传list</span><br><span class="line">     skiprows=[0,1,2] 需要跳过的行号，从文件头0开始，skip_footer从文件尾开始</span><br><span class="line">     nrows=N 需要读取的行数，前N行</span><br><span class="line">     chunksize=M 返回迭代类型TextFileReader，每M条迭代一次，数据占用较大内存时使用</span><br><span class="line">     sep=&apos;:&apos;数据分隔默认是&apos;,&apos;，根据文件选择合适的分隔符，如果不指定参数，会自动解析</span><br><span class="line">     skip_blank_lines=False 默认为True，跳过空行，如果选择不跳过，会填充NaN</span><br><span class="line">     converters=&#123;&apos;col1&apos;, func&#125; 对选定列使用函数func转换，通常表示编号的列会使用（避免转换成int）</span><br><span class="line"></span><br><span class="line">pd.read_json()          可以传入json格式字符串</span><br><span class="line">pd.read_excel(&apos;file.xls&apos;, sheetname=[0,1..]) 读取多个sheet页，返回多个df的字典</span><br><span class="line">pd.read_table()默认分隔符为制表符</span><br><span class="line">pd.read_fwf()没有分隔符</span><br><span class="line">pd.read_clipboard()</span><br></pre></td></tr></table></figure><h1 id="3-查看数据Basics-section"><a href="#3-查看数据Basics-section" class="headerlink" title="3. 查看数据Basics section"></a>3. 查看数据<a href="basics.html#basics">Basics section</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.head()              查看开始五行</span><br><span class="line">df.tail(3)             查看最后三行</span><br><span class="line">df.index               展示行名</span><br><span class="line">df.columns             展示列名</span><br><span class="line">df.values              展示所有值</span><br><span class="line">df.describe()          描述数据的统计摘要</span><br><span class="line">df.T                   转置数据</span><br><span class="line">df.sort_index(axis=1, ascending=False)        通过一个轴排序</span><br><span class="line">df.sort_values(by=&apos;B&apos;) 通过值排序</span><br></pre></td></tr></table></figure><h1 id="4-选择"><a href="#4-选择" class="headerlink" title="4. 选择"></a>4. 选择</h1><h1 id="Indexing-and-Selecting-Data-MultiIndex-Advanced-Indexing"><a href="#Indexing-and-Selecting-Data-MultiIndex-Advanced-Indexing" class="headerlink" title="Indexing and Selecting Data MultiIndex / Advanced Indexing"></a><a href="indexing.html#indexing">Indexing and Selecting Data</a> <a href="advanced.html#advanced">MultiIndex / Advanced Indexing</a></h1><h3 id="4-1-get"><a href="#4-1-get" class="headerlink" title="4.1 get"></a>4.1 get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;A&apos;]           得到一列，想当年于df.A</span><br><span class="line">df[0:3]           切片。取1-3行</span><br><span class="line">df[&apos;20130102&apos;:&apos;20130104&apos;]  得到两个行标之间的部分</span><br></pre></td></tr></table></figure><h3 id="4-2-通过标签选择-Selection-by-Label"><a href="#4-2-通过标签选择-Selection-by-Label" class="headerlink" title="4.2 通过标签选择 Selection by Label"></a>4.2 通过标签选择 <a href="indexing.html#indexing-label">Selection by Label</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.loc[dates[0]]              通过行标签获取横截面</span><br><span class="line">df.loc[:,[&apos;A&apos;,&apos;B&apos;]]           通过列标签获取纵界面</span><br><span class="line">In [28]: df.loc[&apos;20130102&apos;:&apos;20130104&apos;,[&apos;A&apos;,&apos;B&apos;]]     获取横纵截面</span><br><span class="line">df.loc[dates[0],&apos;A&apos;]          获取标量值</span><br><span class="line">df.at[dates[0],&apos;A&apos;]           快速获取标量值</span><br></pre></td></tr></table></figure><h3 id="4-3-通过位置选择Selection-by-Position"><a href="#4-3-通过位置选择Selection-by-Position" class="headerlink" title="4.3 通过位置选择Selection by Position"></a>4.3 通过位置选择<a href="indexing.html#indexing-integer">Selection by Position</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[3]                      获得第三行横截面</span><br><span class="line">df.iloc[[1,2,4],[0,2]]          获得2，3，5行和1，3列</span><br><span class="line">df.iloc[1:3,:]                  获得2，3行</span><br><span class="line">df.iloc[:,1:3]                  获得2，3列</span><br><span class="line">df.iloc[1,1]                    获取2，2明确值</span><br><span class="line">df.iat[1,1]                     快速获取2，2明确值</span><br></pre></td></tr></table></figure><h3 id="4-4-布尔索引isin"><a href="#4-4-布尔索引isin" class="headerlink" title="4.4 布尔索引isin()"></a>4.4 布尔索引<a href="generated/pandas.Series.isin.html#pandas.Series.isin"><code>isin()</code></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[df.A &gt; 0]                    获得A列中大于0的行</span><br><span class="line">df[df &gt; 0]                      选择所有大于0的值</span><br><span class="line">df2[df2[&apos;E&apos;].isin([&apos;two&apos;,&apos;four&apos;])]   通过isin方法过滤</span><br></pre></td></tr></table></figure><h3 id="4-5-设置"><a href="#4-5-设置" class="headerlink" title="4.5 设置"></a>4.5 设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.Series([1,2,3,4,5,6], index=pd.date_range(&apos;20130102&apos;, periods=6))   设置新列自动按索引排列数据</span><br><span class="line">df.at[dates[0],&apos;A&apos;] = 0   通过标签设置值</span><br><span class="line">df.iat[0,1] = 0           通过位置设置值</span><br><span class="line">df.loc[:,&apos;D&apos;] = np.array([5] * len(df))    通过numpy数组设置值</span><br></pre></td></tr></table></figure><p>### </p><h1 id="5-数据缺失-Missing-Data-section"><a href="#5-数据缺失-Missing-Data-section" class="headerlink" title="5. 数据缺失 Missing Data section"></a>5. 数据缺失 <a href="missing_data.html#missing-data">Missing Data section</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&apos;E&apos;])</span><br><span class="line">df1.loc[dates[0]:dates[1],&apos;E&apos;] = 1      Reindex允许您更改/添加/删除指定轴上的索引   </span><br><span class="line">df1.dropna(how=&apos;any&apos;)                   删除任何缺少数据的行</span><br><span class="line">df1.fillna(value=5)                     填写缺少的数据</span><br><span class="line">pd.isna(df1)                            获取值为nan的布尔值掩码</span><br></pre></td></tr></table></figure><p>### </p><h1 id="6-操作Basic-section-on-Binary-Ops"><a href="#6-操作Basic-section-on-Binary-Ops" class="headerlink" title="6. 操作Basic section on Binary Ops"></a>6. 操作<a href="basics.html#basics-binop">Basic section on Binary Ops</a></h1><h3 id="6-1-统计"><a href="#6-1-统计" class="headerlink" title="6.1 统计"></a>6.1 统计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.mean()                    描述性统计</span><br><span class="line">df.mean(1)                   一个轴上的统计</span><br><span class="line">s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2)</span><br></pre></td></tr></table></figure><h3 id="6-2-Apply"><a href="#6-2-Apply" class="headerlink" title="6.2 Apply"></a>6.2 Apply</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [66]: df.apply(np.cumsum)</span><br><span class="line">Out[66]: </span><br><span class="line">                   A         B         C   D     F</span><br><span class="line">2013-01-01  0.000000  0.000000 -1.509059   5   NaN</span><br><span class="line">2013-01-02  1.212112 -0.173215 -1.389850  10   1.0</span><br><span class="line">2013-01-03  0.350263 -2.277784 -1.884779  15   3.0</span><br><span class="line">2013-01-04  1.071818 -2.984555 -2.924354  20   6.0</span><br><span class="line">2013-01-05  0.646846 -2.417535 -2.648122  25  10.0</span><br><span class="line">2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0</span><br><span class="line"></span><br><span class="line">In [67]: df.apply(lambda x: x.max() - x.min())</span><br><span class="line">Out[67]: </span><br><span class="line">A    2.073961</span><br><span class="line">B    2.671590</span><br><span class="line">C    1.785291</span><br><span class="line">D    0.000000</span><br><span class="line">F    4.000000</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="6-3-直方图化-Histogramming-and-Discretization"><a href="#6-3-直方图化-Histogramming-and-Discretization" class="headerlink" title="6.3 直方图化 Histogramming and Discretization"></a>6.3 直方图化 <a href="basics.html#basics-discretization">Histogramming and Discretization</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.random.randint(0, 7, size=10))    </span><br><span class="line">s.value_counts()</span><br></pre></td></tr></table></figure><h3 id="6-4-字符串方法Vectorized-String-Methods"><a href="#6-4-字符串方法Vectorized-String-Methods" class="headerlink" title="6.4 字符串方法Vectorized String Methods."></a>6.4 字符串方法<a href="text.html#text-string-methods">Vectorized String Methods</a>.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;Aaba&apos;, &apos;Baca&apos;, np.nan, &apos;CABA&apos;, &apos;dog&apos;, &apos;cat&apos;])</span><br><span class="line">s.str.lower()</span><br></pre></td></tr></table></figure><h1 id="7-MergeMerging-section"><a href="#7-MergeMerging-section" class="headerlink" title="7. MergeMerging section"></a>7. Merge<a href="merging.html#merging">Merging section</a></h1><h3 id="7-1-Concat-concat"><a href="#7-1-Concat-concat" class="headerlink" title="7.1 Concat concat()"></a>7.1 Concat <a href="generated/pandas.concat.html#pandas.concat"><code>concat()</code></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(10, 4))</span><br><span class="line">pieces = [df[:3], df[3:7], df[7:]]</span><br><span class="line">pd.concat(pieces)</span><br></pre></td></tr></table></figure><h3 id="7-2-Join-Database-style-joining"><a href="#7-2-Join-Database-style-joining" class="headerlink" title="7.2 Join Database style joining"></a>7.2 Join <a href="merging.html#merging-join">Database style joining</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;&apos;key&apos;: [&apos;foo&apos;, &apos;foo&apos;], &apos;lval&apos;: [1, 2]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;&apos;key&apos;: [&apos;foo&apos;, &apos;foo&apos;], &apos;rval&apos;: [4, 5]&#125;)</span><br><span class="line">pd.merge(left, right, on=&apos;key&apos;)</span><br></pre></td></tr></table></figure><h3 id="7-3-AppendAppending"><a href="#7-3-AppendAppending" class="headerlink" title="7.3 AppendAppending"></a>7.3 Append<a href="merging.html#merging-concatenation">Appending</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(8, 4), columns=[&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;])</span><br><span class="line">s = df.iloc[3]</span><br><span class="line">df.append(s, ignore_index=True)</span><br></pre></td></tr></table></figure><p>### </p><h1 id="8-GroupingGrouping-section"><a href="#8-GroupingGrouping-section" class="headerlink" title="8.GroupingGrouping section"></a>8.Grouping<a href="groupby.html#groupby">Grouping section</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(&apos;A&apos;).sum()         分组，然后将函数总和应用于结果组。</span><br><span class="line">df.groupby([&apos;A&apos;,&apos;B&apos;]).sum()   按多列分组会形成一个分层索引，然后我们应用这个函数。</span><br></pre></td></tr></table></figure><h1 id="9-Reshape-Reshaping"><a href="#9-Reshape-Reshaping" class="headerlink" title="9.Reshape Reshaping"></a>9.Reshape <a href="reshaping.html#reshaping-stacking">Reshaping</a></h1><h1 id="Hierarchical-Indexing"><a href="#Hierarchical-Indexing" class="headerlink" title="Hierarchical Indexing"></a><a href="advanced.html#advanced-hierarchical">Hierarchical Indexing</a></h1><h3 id="9-1-堆stack"><a href="#9-1-堆stack" class="headerlink" title="9.1 堆stack()"></a>9.1 堆<a href="generated/pandas.DataFrame.stack.html#pandas.DataFrame.stack"><code>stack()</code></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = pd.MultiIndex.from_tuples(tuples, names=[&apos;first&apos;, &apos;second&apos;]) </span><br><span class="line">df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&apos;A&apos;, &apos;B&apos;])</span><br><span class="line">df2 = df[:4]</span><br></pre></td></tr></table></figure><h3 id="9-2-数据透视表Pivot-Tables"><a href="#9-2-数据透视表Pivot-Tables" class="headerlink" title="9.2 数据透视表Pivot Tables"></a>9.2 数据透视表<a href="reshaping.html#reshaping-pivot">Pivot Tables</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python工具包pandas，数据分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-import语句&quot;&gt;&lt;a href=&quot;#1-import语句&quot; class=&quot;headerlink&quot; title=&quot;1 import语句&quot;&gt;&lt;/a&gt;1 import语句&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>人物之李奥布瑞曼</title>
    <link href="http://yoursite.com/2018/02/05/%E4%BA%BA%E7%89%A9%E4%B9%8B%E6%9D%8E%E5%A5%A5%E5%B8%83%E7%91%9E%E6%9B%BC/"/>
    <id>http://yoursite.com/2018/02/05/人物之李奥布瑞曼/</id>
    <published>2018-02-05T14:18:28.000Z</published>
    <updated>2018-02-05T14:45:38.345Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>李奥 布瑞曼（Leo Breiman，1928-2005），是二十世纪伟大的统计学家，机器学习学家。</p><p>他不仅是CART决策树的作者，还对集成学习有三代贡献：Bagging，随机森林以及关于Boosting的理论探讨。有趣的是这些都是在他1993年从加州大学伯克利分校统计系退休后完成的。</p><p>他自认为一生中最重要的研究成果——随机森林，是70岁时做出来的。</p></blockquote><a id="more"></a>    <p>​    Breiman是犹太后裔，他主要在洛杉矶的Boyle Height长大，这里是犹太人聚居地。他那个少年时代(1930-1940)，犹太移民聚集地其实比贫民区好不了多少。<br>​    犹太人尊知重教的传统不是盖的，比如Breiman就被爸妈送去纽约州的罗斯福高中读书。然后Breiman就本科考进了加州理工Caltech（钱学森就是那个时代的Caltech的博士）。Caltech很难进，要亲自去考数理化和语文四科，每科考四小时，几千人申请，那年录取了250个。Breiman考进了物理系。大一他很上进，GPA很高，拿到了奖学金。但大二大三大四就日渐颓废，受不了被填鸭太多物理知识，他觉得Caltech太像一个苦修科学的和尚庙了，估计是给憋坏了，大四时主科拿了4个D…若再差点就要拿F挂科了。<br>​    好不容易从Caltech毕业后，Breiman申请了一通研究院，他物理主课一塌糊涂，但好在数学的科目分还不错，还是拿到了一个读硕士的offer。是哥大给的（就是李云迪女朋友那学校），硕士也没奖学金，家里也没钱供他读，但好在他之前打工存了不少钱。<br>​    带着对Caltech的遗憾，他去了哥大。物理把他伤得如此之深，他去哥大，首先去的是哲学系，因为他万念俱灰想读哲学。Breiman去找哲学系系主任，系主任关心地拍了拍他，语重心长的说，我最好的两个研究生毕业了都找不到出处，要不你还是在数学系呆着，有空就来这边上上课？<br>​    Breiman只好回数学系，也上了几堂哲学课，然后就死心塌地学数学。。。一年后他就硕士毕业，然后申请到了去    伯克利读数学博士。读博之余，他还跑到船上餐厅端盘子，赚了很多小费。<br>​    他在伯克利的老板是Loeve，跟Loeve学概率论学得不错。但Loeve是完美主义者，传言说要做他的博士生，如果不能科科拿A，那就要被他直接从窗户里扔出去。<br>​    Breiman即使科科拿A，可博士论文改了又改，Loeve还是不满意。研究院都急着催Breiman，老延期不行啊。Loeve也受到压力，赶在最后期限前，让Breiman一两星期就答辩通过了。<br>​    Breiman可能是被Loeve伤到了，他也没找教职，去当兵了。<br>​    服兵役一年多时，他看到一个政策，说找到工作的话，兵役最后两个月可以免掉。于是他求着伯克利数学系系主任    给了个临时工作，回到了伯克利。<br>​    在伯克利他跟Blackwell很熟，Blackwell就经常出些难题挑战Breiman，说你丫牛啊，那有没有本事证明这个证明那个？结果Breiman就证明了一个不错的定理，后来以他的名字命名，叫做Shannon-McMillan-Breiman(SMB)定理。定理里面第一个名字是香农。这是1957年，Breiman 29岁的时候。不过Breiman这个证明不怎么靠谱，但也没几个人看得出来没证明的对错，因为这定理太难懂了。不过1960年时他还是很有职业道德滴把证明重新修订了一下。<br>​    1948年香农发表他的信息论开山之作后几十年，信息论在很多领域都有应用。这也是Breiman在57-60年关注SMB定理的原因。另外，就在1956年，凯利根据香农的信息论，发表了对量化交易界影响巨大的凯利指数。Breiman这种天才当然也不会闲着，他太会证明东西了，根据凯利指数发表了两篇跟博彩系统有关的论文。其中有篇Optimal Gambling Systems for Favorable Games，Breiman和索普都用这个题目写过论文，Breiman写得很抽象，索普写得生动浅白。所以这也决定了Breiman后来不像索普利用凯利指数发财，他在这个领域客串了一下，就继续搞概率论去了。<br>​    1960年他去了UCLA,当了七年教授，终身教职也拿到了。在UCLA他主要就是教概率论，同时不断倒腾概率论哪些地方还讲不通的，他就负责把讲不通的搞通，该证明的就给个证明。<br>​    在UCLA轮到他Sabbatical时，他也很特立独行，说不想去任何学校。于是学校帮他找啊找啊，找到一个去非洲利比里亚的事情，以“教育统计学家”的身份去的。干的事情的确很教育也很统计，就是帮利比里亚统计全国有多少学生。这事情听起来太简单了，但利比里亚不少学校是在原始森林里，他们要做的是分成若干队伍，去一个一个森林部落探访，去把学生数记录下来。黑人小孩看到他这个白人很新奇，总觉得他的白皮肤涂了粉，一见到他就跑过来搓他皮肤，看能不能把白涂料搓下来……<br>​    七年之后，他又闲不住了，对自己说，纯数学是不错，但还是没劲。因为他觉得当时数学的教法让学生觉得枯燥，跟现实生活脱节，于是他从UCLA辞职，把社保养老金全部取出来。辞职半年里，他啥也不干，写了一本《概率论》。但毕竟概率论是教材不是索普那种《打败市场》的畅销书，半年后他感觉到生活有压力了，于是开始找工作。<br>​    因为他在63年时跟兰德公司旗下的SDC公司合作过关于交通数据研究，里面的顾问员就介绍他去了TSC这个顾问公司。在这里他干了十几年。帮政府环保部门研究大气污染，犯罪预防等，接触了很多需要对数据分类和进行预测的任务。也正是这段时间的积累，他对统计的实际价值有了比较深刻的认识，像CART就是那之后发明的。<br>他这期间还成为一个小学的校董，因为他想搞明白美国小孩不喜欢数学，数学不行的原因。最后他认为有两点根源：数学的教法没跟实际结合；数学能力其实是语言能力，能把数学公式和原理翻译成语言说出来，能把说的翻译成数学，这事才成。<br>​    在顾问公司这十几年他也没发过论文。不过伯克利还是把他请回去了。这让他一直纳闷伯克利搭错了哪根筋。<br>​    回到伯克利，他发现那里搞统计的计算机设备太弱了。他要教多元统计，没有好设备可不行，于是他发挥在顾问公司写提案申请经费的本领，帮伯克利弄到不少经费，买了很多电脑。为伯克利开创了计算统计系。<br>​    但Breiman再一次表现他的特立独行，在被问及对年轻人的建议时，他说：不要学统计专业，学术界把统计搞得迷失了。他说他从咨询界回到伯克利时，感觉就像丛林里找不到北的爱丽丝。工业界和政府使用数据的方法，学术界相比差上光年之遥，把统计搞成了抽象数学。他们偏离了Fisher的初衷，统计应该是关于预测、解释和处理数据的学问。<br>​    所以在90年中开始，Breiman说他跟机器学习和神经网络界走得更近。因为这行是在处理有挑战的数据问题，虽然他们多是没接受过统计训练的人。<br>​    此外，Breiman还是个雕塑家，他还在64年投资创业过，给饮料店提供冰块。</p><blockquote><p>我最深的感触，Breiman真是个不墨守陈规、敢于挑战自己的人。</p></blockquote><p>注：</p><p>以上摘自</p><p>周志华老师的《机器学习》</p><p><a href="http://dataunion.org/16511.html" target="_blank" rel="noopener">http://dataunion.org/16511.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;李奥 布瑞曼（Leo Breiman，1928-2005），是二十世纪伟大的统计学家，机器学习学家。&lt;/p&gt;
&lt;p&gt;他不仅是CART决策树的作者，还对集成学习有三代贡献：Bagging，随机森林以及关于Boosting的理论探讨。有趣的是这些都是在他1993年从加州大学伯克利分校统计系退休后完成的。&lt;/p&gt;
&lt;p&gt;他自认为一生中最重要的研究成果——随机森林，是70岁时做出来的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="人物" scheme="http://yoursite.com/categories/%E4%BA%BA%E7%89%A9/"/>
    
    
      <category term="人物" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之集成学习综述</title>
    <link href="http://yoursite.com/2018/02/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E7%BB%BC%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/02/03/机器学习之集成学习综述/</id>
    <published>2018-02-03T14:53:22.000Z</published>
    <updated>2018-02-16T03:04:38.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>集成学习 也称为 元算法</p><p>以达到减小方差（bagging）、偏差（boosting）或改进预测（stacking）的效果。</p></blockquote><h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a><strong>由来</strong></h3><p>​    集成学习是一种机器学习框架，其主要思想就是将多个基础模型组合起来，提高整体模型的泛化能力。集成学习的思想背后有比较成熟的数学理论作支撑，也即Valiant和Kearns提出的PAC (Probably approximately correct) 学习框架下的强可学习和弱可学习理论。该理论指出：在PAC 的学习框架中，一个概念如果存在一个多项式的学习方法能够学习它，并且如果预测正确率很高，那么就称这个概念是强可学习的；如果正确率仅比随机猜测略好，那么就称这个概念是弱可学习的。随后，Schapire证明了强可学习和若可学习是等价的，也就是说弱学习模型是可以通过组合提升为强学习模型的，由此便形成了后来的集成学习的思想。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>boosting</p><ul><li>Adaboosting</li><li>GBDT</li></ul></li><li><p>bagging   自举汇聚法</p><p>是从原始数据集中选择S次后得到S个新数据集的一种技术。</p><ul><li>Random Forest</li></ul></li><li><p>stacking</p></li></ul><a id="more"></a><p>集合方法可分为两类：</p><ul><li>序列集成方法，其中参与训练的基础学习器按照顺序生成（例如 AdaBoost）。序列方法的原理是利用基础学习器之间的依赖关系。通过对之前训练中错误标记的样本赋值较高的权重，可以提高整体的预测效果。</li><li>并行集成方法，其中参与训练的基础学习器并行生成（例如 Random Forest）。并行方法的原理是利用基础学习器之间的独立性，通过平均可以显著降低错误。</li></ul><p>大多数集成方法使用单一基础学习算法来产生同质的基础学习器，即相同类型的学习器，为同质集成。</p><p>还有一些使用异构学习器的方法，即不同类型的学习器，为异构集成。为了使集成方法比其中的任何单一算法更准确，基础学习器必须尽可能准确和多样化。</p><p><strong>Bagging</strong></p><p>Bagging 是 bootstrap aggregation 的缩写。一种减小估计方差的方法是将多个估计值一起平均。例如，我们可以在不同的数据子集上训练 M 个不同的树（随机选择）并计算集成结果：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/b7f1872f53404d029a2cf80ab02575e6.png" alt="img"></p><p>Bagging 使用 bootstrap 抽样来获取训练基础学习器的数据子集。Bagging 使用投票分类和均值回归来聚合得到基础学习者的输出。</p><p>我们可以在 Iris 数据集上研究 bagging 方法的分类效果。为了对比预测效果，我们选用两个基准估计器：决策树和 k-NN 分类器。图 1 显示了基准估计器和 bagging 集成算法在 Iris 数据集上的学习决策边界。</p><p>准确率：0.63（+/- 0.02）[决策树]</p><p>准确率：0.70（+/- 0.02）[K-NN]</p><p>准确率：0.64（+/- 0.01）[bagging 树]</p><p>准确率：0.59（+/- 0.07）[bagging K-NN]</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/971806c9a2924483a322b717bc861ea8.jpeg" alt="img"></p><p>决策树的决策边界与轴并行，而 K-NN 算法在 k=1 时决策边界与数据点紧密贴合。Bagging 集成了 10 个基础估计器进行训练，其中以 0.8 的概率抽样训练数据和以 0.8 的概率抽样特征。</p><p>与 k-NN bagging 集成相比，决策树 bagging 集成实现了更高的准确率。K-NN 对训练样本的扰动较不敏感，因此被称为稳定学习器。</p><blockquote><p>集成稳定学习器不利于提高预测效果，因为集成方法不能有助于提高泛化性能。</p></blockquote><p>最右侧的图还显示了测试集的准确率如何随着集成的大小而提高。根据交叉验证的结果，我们可以看到准确率随着估计器的数量而增加，一直到约 10 个基础估计器时达到最大值，然后保持不变。因此对于 Iris 数据集，添加超过 10 个的基本估计器仅仅增加了计算复杂度而不增加准确率。</p><p>我们还可以看到 bagging 树集成的学习曲线。注意训练数据的平均误差为 0.3，测试数据为 U 形误差曲线。训练误差和测试误差之间的最小差距出现在训练集大小的 80％左右的位置。</p><blockquote><p>常用的一类集成算法是随机森林。</p></blockquote><p>在随机森林中，集成中的每棵树都是由从训练集中抽取的样本（即 bootstrap 样本）构建的。另外，与使用所有特征不同，这里随机选择特征子集，从而进一步达到对树的随机化目的。</p><p>因此，随机森林产生的偏差略有增加，但是由于对相关性较小的树计算平均值，估计方差减小了，导致模型的整体效果更好。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/684902ce376b41e78d398dffc3f3b28d.jpeg" alt="img"></p><p>在非常随机化树（extremely randomized trees）算法中，进一步增加随机性：分割阈值是随机的。与寻找最具有区分度的阈值不同，每个备选特征的阈值是随机选择的，这些随机生成的阈值中的最佳值将作为分割规则。这通常能够减少模型的方差，但代价是偏差的略微增加。</p><p><strong>Boosting</strong></p><p>Boosting 是指能够将弱学习器转化为强学习器的一类算法族。Boosting 的主要原理是适应一系列弱学习器模型，这些模型只是稍微优于随机猜测，比如小决策树——数据加权模型。更多的权重赋值早期训练错误分类的例子。</p><p>然后通过结合加权多数投票（分类）或加权求和（回归）以产生最终预测。Boosting 与 bagging 等方法的主要区别是基础学习器通过加权的数据进行顺序训练。</p><p>下面的算法阐述了最广泛使用的 boosting 算法形式，称为 AdaBoost，是 adaptive boosting 的缩写。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/5171674feb8146f2a018b3d3acfb350b.jpeg" alt="img"></p><p>我们看到第一个基础分类器 y1(x) 使用全部相等的权重进行训练。在随后的 boosting 训练中，增加错误分类的数据点的系数权重，同时减少正确分类的数据点的系数权重。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/93de826093af4d6d900c9e98a2ad1838.jpeg" alt="img"></p><p>数值 epsilon 表示每个基础分类器的加权误差率。因此，系数权重 alpha 对更准确的分类器赋值更大的权重。</p><p>AdaBoost 算法如上图所示。每个基础学习器由深度为 1 的决策树组成，从而基于特征阈值对数据进行分类，该特征阈值将空间分割成由与一个轴平行的线性决策表面分开的两个区域。该图还显示了测试集的准确率随集合大小的增加而改善，同时显示了训练数据和测试数据的学习曲线。</p><p>梯度 boosting 树（Gradient Tree Boosting）是 boosting 使用任意可微分损失函数的推广。它可以用于回归和分类问题。梯度 Boosting 以顺序的方式构建模型。</p><p>在每一步，给定当前的模型 Fm-1(x)，决策树 hm(x) 通过最小化损失函数 L 更新模型：</p><p>回归和分类算法在使用的损失函数的类型上有所不同。</p><p><strong>Stacking</strong></p><p>Stacking 是一种集成学习技术，通过元分类器或元回归聚合多个分类或回归模型。基础层次模型（level model）基于完整的训练集进行训练，然后元模型基于基础层次模型的输出进行训练。</p><p>基础层次通常由不同的学习算法组成，因此 stacking 集成通常是异构的。下面的算法概括了 stacking 算法的逻辑：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/780bfba1a8284c8fb564cf6a150166c3.jpeg" alt="img"></p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170828/9cfb7cf5f08a4c7ca33a7193dd9b9bba.jpeg" alt="img"></p><p>下面是几种算法的准确率，表示在上图右边的图形中：</p><p>准确率：0.91（+/- 0.01）[K-NN]</p><p>准确率：0.91（+/- 0.06）[随机森林]</p><p>准确率：0.92（+/- 0.03）[朴素贝叶斯]</p><p>准确率：0.95（+/- 0.03）[Stacking 分类器]</p><p>stacking 集成如上图所示。它由 k-NN、随机森林和朴素贝叶斯基础分类器组成，它的预测结果由作为元分类器的 Logistic 回归组合。我们可以看到 stacking 分类器实现的混合决策边界。该图还显示，stacking 能够实现比单个分类器更高的准确率，并且从学习曲线看出，其没有显示过拟合的迹象。</p><p>在 Kaggle 数据科学竞赛中，像 stacking 这样的技术常常赢得比赛。例如，赢得奥托（Otto）集团产品分类挑战赛的第一名所使用的技术是集成了 30 多个模型的 stacking，它的输出又作为三个元分类器的特征：XGBoost、神经网络和 Adaboost。有关详细信息，请参阅以下链接：<a href="https://www.kaggle.com/c/otto-group-product-classification-challenge/discussion/14335。" target="_blank" rel="noopener">https://www.kaggle.com/c/otto-group-product-classification-challenge/discussion/14335。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;集成学习 也称为 元算法&lt;/p&gt;
&lt;p&gt;以达到减小方差（bagging）、偏差（boosting）或改进预测（stacking）的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;&lt;strong&gt;由来&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​    集成学习是一种机器学习框架，其主要思想就是将多个基础模型组合起来，提高整体模型的泛化能力。集成学习的思想背后有比较成熟的数学理论作支撑，也即Valiant和Kearns提出的PAC (Probably approximately correct) 学习框架下的强可学习和弱可学习理论。该理论指出：在PAC 的学习框架中，一个概念如果存在一个多项式的学习方法能够学习它，并且如果预测正确率很高，那么就称这个概念是强可学习的；如果正确率仅比随机猜测略好，那么就称这个概念是弱可学习的。随后，Schapire证明了强可学习和若可学习是等价的，也就是说弱学习模型是可以通过组合提升为强学习模型的，由此便形成了后来的集成学习的思想。&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;boosting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adaboosting&lt;/li&gt;
&lt;li&gt;GBDT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bagging   自举汇聚法&lt;/p&gt;
&lt;p&gt;是从原始数据集中选择S次后得到S个新数据集的一种技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Random Forest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stacking&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="集成学习" scheme="http://yoursite.com/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之随机森林</title>
    <link href="http://yoursite.com/2018/02/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    <id>http://yoursite.com/2018/02/02/机器学习之随机森林/</id>
    <published>2018-02-02T08:41:01.000Z</published>
    <updated>2018-02-16T03:04:45.422Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>集成学习，判别模型，多分类与回归，正则化的极大似然估计</p><p>随机森林主页：<a href="https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#inter" target="_blank" rel="noopener">https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#inter</a></p></blockquote><p><strong>套袋法(bagging)</strong></p><blockquote><p>​    该方法的第一步就是用数据集（用抽样法创建而成）创建多个模型。在抽样法中，每个生成的训练集由原始数据集的随机次级样本组成。每个训练集都和原始数据集一样大小，但有些记录会重复几次，有些记录则完全不出现。然后，整个原始数据集会被用作测试集。这样，如果原始数据集的大小为N，那么每个生成的训练集大小也为N，特殊记录的数量大约为（2N/3），测试集的大小也是N。</p><p>​    第二步就是用和生成的不同数据集中一样的算法构建多个模型。在这一步中，我们讨论一下随机森林。不像决策树中，每个节点在将错误最小化的最佳特征处分裂，在随机森林中，我们选择各个特征的一个随机抽样用以构建最佳节点。之所以是随机，是因为：即便是用套袋法，当决策树选择一个最佳特征之处分裂时，最终会是相同的结构和相互关联的预测。但在各个特征的随机子集处分裂后再套袋（bagging）意味着根据子树的预测之间的相关性较低。</p><p>​    在每个分叉点要搜索的特征数量被指定为随机森林算法的一个参数。</p><p>​    这样，在随机森林 bagging 中，用记录中的随机样本构造每个决策树，用预测器的随机样本构造每个分裂。</p></blockquote><a id="more"></a><p><strong>特点：</strong></p><blockquote><ul><li>在当前所有算法中，具有极好的准确率/It is unexcelled in accuracy among current algorithms；</li><li>能够有效地运行在大数据集上/It runs efficiently on large data bases；</li><li>能够处理具有高维特征的输入样本，而且不需要降维/It can handle thousands of input variables without variable deletion；</li><li>能够评估各个特征在分类问题上的重要性/It gives estimates of what variables are important in the classification；</li><li>在生成过程中，能够获取到内部生成误差的一种无偏估计/It generates an internal unbiased estimate of the generalization error as the forest building progresses；</li><li>对于缺省值问题也能够获得很好得结果/It has an effective method for estimating missing data and maintains accuracy when a large proportion of the data are missing</li></ul><p>随机森林是机器学习方法中的Leatherman（多功能折叠刀）。你几乎可以把任何东西扔给它。它在估计推断映射方面做的特别好，从而不需要类似SVM一样过多的调参。</p></blockquote><p><strong>优点:</strong></p><blockquote><p>​    不易过拟合，可能比Bagging和Boosting更快。由于在每次划分时只考虑很少的属性，因此它们在大型数据库上非常有效。有很好的方法来填充缺失值，即便有很大一部分数据缺失，仍能维持很高准确度。给出了变量重要性的内在估计，对于不平衡样本分类，它可以平衡误差。可以计算各实例的亲近度，对于数据挖掘、检测离群点和数据可视化非常有用。</p><p>​    随机森林方法被证明对大规模数据集和存在大量且有时不相关特征的项（item）来说很有用</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>​    在某些噪声较大的分类和回归问题上会过拟合。对于有不同级别的属性的数据，级别划分较多的属性会对随机森林产生更大的影响，所以随机森林在这种数据上产生的属性权值是不可信的。</p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li><p><strong>决策树</strong></p><p>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。常见的决策树算法有C4.5、ID3和CART。</p></li><li><p><strong>信息、熵以及信息增益</strong></p><p>如果带分类的事物集合可以划分为多个类别当中，则某个类（xi）的信息可以定义如下:</p><p><img src="https://images0.cnblogs.com/blog2015/764050/201506/182127101856815.png" alt=""></p><p>　　I(x)用来表示随机变量的信息，p(xi)指是当xi发生时的概率。</p><p>　　熵是用来度量不确定性的，当熵越大，X=xi的不确定性越大，反之越小。对于机器学习中的分类问题而言，熵越大即这个类别的不确定性更大，反之越小。</p><p>　　信息增益在决策树算法中是用来选择特征的指标，信息增益越大，则这个特征的选择性越好。</p></li><li><p><strong>随机决策树</strong></p><p>​    我们知道随机森林是将其他的模型进行聚合， 但具体是哪种模型呢？从其名称也可以看出，随机森林聚合的是分类（或回归） 树。一颗决策树是由一系列的决策组合而成的，可用于数据集的观测值进行分类 。</p></li></ul><p>​      <img src="https://upload-images.jianshu.io/upload_images/3129325-d9a81dbdaa0155d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><p>​                           如果一个观测值为length=45,blue eye,legs=2,那么它将被划分为红色</p><ul><li><p><strong>随机森林</strong></p><p>​    引入的随机森林算法将自动创建随机决策树群。由于这些树是随机生成的，大部分的树(甚至 99.9%)对解决你的分类或回归问题是没有有意义。</p></li><li><p><strong>投票</strong></p><p>​    当你要做预测的时候，新的观察值随着决策树自上而下走下来并被赋予一个预测值或标签。一旦森林中的每棵树都给有了预测值或标签，所有的预测结果将被归总到一起，所有树的投票返回做为最终的预测结果。</p><p>​    简单来说，99.9%不相关的树做出的预测结果涵盖所有的情况，这些预测结果将会彼此抵消。少数优秀的树的预测结果将会脱颖而出，从而得到一个好的预测结果。</p><p><img src="https://upload-images.jianshu.io/upload_images/3129325-b67e8fb7b448a0f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><p>​</p><p>​                                        随机森林</p></li></ul><h3 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h3><h4 id="2-1-步骤"><a href="#2-1-步骤" class="headerlink" title="2.1 步骤"></a>2.1 步骤</h4><ol><li>创建随机向量</li><li>使用随机向量建立多个决策树</li><li>组合决策树</li></ol><h4 id="2-2-每棵树生成规则"><a href="#2-2-每棵树生成规则" class="headerlink" title="2.2 每棵树生成规则"></a>2.2 每棵树生成规则</h4><ul><li>如果训练集大小为N，对于每棵树而言，随机且有放回地从训练集中的抽取N个训练样本（这种采样方式称为bootstrap sample方法），作为该树的训练集；从这里我们可以知道：每棵树的训练集都是不同的，而且里面包含重复的训练样本（理解这点很重要）。</li><li>如果每个样本的特征维度为M，指定一个常数m&lt;&lt;M，随机地从M个特征中选取m个特征子集，每次树进行分裂时，从这m个特征中选择最优的；</li><li>每棵树都尽最大程度的生长，并且没有剪枝过程。</li></ul><h4 id="2-3-问题"><a href="#2-3-问题" class="headerlink" title="2.3 问题"></a>2.3 问题</h4><ul><li><p><strong>“随机“</strong></p><p>随机森林的随机有两层意思。</p><ul><li>训练样本选取随机。虽然每一棵树的训练样本个数都是样本总数N，但是每一个样本的随机选取都是有放回的选取。这样，每一颗树的训练样本几乎都不相同。</li><li>特征选取随机。假设训练数据有M个特征，随机森林的每一颗树只选取m（m&lt; M）个特征用于构建决策树。每一颗树选取的特征可能都不完全相同。</li></ul></li><li><p><strong>”森林“</strong></p><ul><li>“森林”我们很好理解，一棵叫做树，那么成百上千棵就可以叫做森林了，这样的比喻还是很贴切的，其实这也是随机森林的主要思想–集成思想的体现。</li></ul></li><li><p><strong>为什么要随机抽样训练集？</strong></p><p>​    如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的，这样的话完全没有bagging的必要；</p></li><li><p><strong>为什么要有放回地抽样？</strong></p><p>​    如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是”有偏的”，都是绝对”片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决，这种表决应该是”求同”，因此使用完全不同的训练集来训练每棵树这样对最终分类结果是没有帮助的，这样无异于是”盲人摸象”。</p></li></ul><blockquote><p>两个随机性的引入对随机森林的分类性能至关重要。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力（比如：对缺省值不敏感）。</p></blockquote><ul><li><strong>随机森林分类效果（错误率）与两个因素有关：</strong><ul><li>森林中任意两棵树的相关性：相关性越大，错误率越大；</li><li>森林中每棵树的分类能力：每棵树的分类能力越强，整个森林的错误率越低。</li></ul></li></ul><h4 id="2-3-参数"><a href="#2-3-参数" class="headerlink" title="2.3 参数"></a>2.3 参数</h4><ul><li><strong>森林中树的数量</strong>：一般建议取很大</li><li><p><strong>m的大小</strong>：推荐m的值为M的均方根。</p><blockquote><p>​减小特征选择个数m，树的相关性和分类能力也会相应的降低；增大m，两者也会随之增大。所以关键问题是如何选择最优的m（或者是范围），这也是随机森林唯一的一个参数。主要依据计算袋外错误率oob error（out-of-bag error）。</p></blockquote></li></ul><h3 id="3-袋外错误率（oob-error）"><a href="#3-袋外错误率（oob-error）" class="headerlink" title="3. 袋外错误率（oob error）"></a>3. 袋外错误率（oob error）</h3><blockquote><p>​    可以在内部进行评估，也就是说在生成的过程中就可以对误差建立一个无偏估计。</p><p>​    我们知道，在构建每棵树时，我们对训练集使用了不同的bootstrap sample（随机且有放回地抽取）。所以对于每棵树而言（假设对于第k棵树），大约有1/3的训练实例没有参与第k棵树的生成，它们称为第k棵树的oob样本。</p></blockquote><p>​    在构建每棵树时，我们对训练集使用了不同的bootstrap sample（随机且有放回地抽取）。所以对于每棵树而言（假设对于第k棵树），大约有<strong>1/3的训练实例</strong>没有参与第k棵树的生成，它们称为第k棵树的oob样本。</p><p>而这样的采样特点就允许我们进行oob估计，它的计算方式如下：</p><p>　　<strong>（note：以样本为单位）</strong></p><ul><li>对每个样本，计算它作为oob样本的树对它的分类情况（约1/3的树）。</li><li>然后以简单多数投票作为该样本的分类结果。</li><li>最后用误分个数占样本总数的比率作为随机森林的oob误分率。</li></ul><blockquote><p>oob误分率是随机森林泛化误差的一个无偏估计，它的结果近似于需要大量计算的k折交叉验证。</p></blockquote><h3 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4. 使用方法"></a>4. 使用方法</h3><h4 id="4-1-特征选择"><a href="#4-1-特征选择" class="headerlink" title="4.1 特征选择"></a>4.1 特征选择</h4><p>​    随机森林的一个最好用例是特征选择。尝试很多个决策树变量的一个副产品就是，你可以检查变量在每棵树中表现的是最佳还是最糟糕。当一些树使用一个变量，而其他的不使用这个变量，你就可以对比信息的丢失或增加。实现的比较好的随机森林工具能够为你做这些事情，所以你需要做的仅仅是去查看那个方法或参数。</p><h4 id="4-2-分类"><a href="#4-2-分类" class="headerlink" title="4.2 分类"></a>4.2 分类</h4><p>​    随机森林也很善长分类问题。它可以被用于为多个可能目标类别做预测，它也可以在调整后输出概率。你需要注意的一件事情是过拟合。</p><p>​    随机森林容易产生过拟合，特别是在数据集相对小的时候。当你的模型对于测试集合做出“太好”的预测的时候就应该怀疑一下了。避免过拟合的一个方法是在模型中只使用有相关性的特征，比如使用之前提到的特征选择。</p><p><img src="https://upload-images.jianshu.io/upload_images/3129325-07621a5b85cee3bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/499" alt=""></p><h4 id="4-3-回归"><a href="#4-3-回归" class="headerlink" title="4.3 回归"></a>4.3 回归</h4><p>​    随机森林也可以用于回归问题。    </p><p>​    我发现，不像其他的方法，随机森林非常擅长于分类变量或分类变量与连续变量混合的情况。</p><h3 id="5-实例"><a href="#5-实例" class="headerlink" title="5. 实例"></a>5. 实例</h3><p><strong>描述</strong>：</p><p>​    根据已有的训练集已经生成了对应的随机森林，随机森林如何利用某一个人的年龄（Age）、性别（Gender）、教育情况（Highest Educational Qualification）、工作领域（Industry）以及住宅地（Residence）共5个字段来预测他的收入层次。</p><p><strong>收入层次 :</strong></p><p>　　　　Band 1 : Below $40,000</p><p>　　　　Band 2: $40,000 – 150,000</p><p>　　　　Band 3: More than $150,000</p><p>　　随机森林中每一棵树都可以看做是一棵CART（分类回归树），这里假设森林中有5棵CART树，总特征个数N=5，我们取m=1（这里假设每个CART树对应一个不同的特征）。</p><p><strong>CART 1 : Variable Age</strong></p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/rf1.png" alt="rf1"></p><p><strong>CART 2 : Variable Gender</strong></p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/rf2.png" alt="rf2"></p><p><strong>CART 3 : Variable Education</strong></p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/rf3.png" alt="rf3"></p><p><strong>CART 4 : Variable Residence</strong></p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/rf4.png" alt="rf4"></p><p><strong>CART 5 : Variable Industry</strong></p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/rf5.png" alt="rf5"></p><p>　　我们要预测的某个人的信息如下：</p><p>  　　1. Age : 35 years ; 2. Gender : Male ; 3. Highest Educational Qualification : Diploma holder; 4. Industry : Manufacturing; 5. Residence : Metro.</p><p>　　根据这五棵CART树的分类结果，我们可以针对这个人的信息建立收入层次的分布情况：</p><p>　　<img src="http://www.analyticsvidhya.com/blog/wp-content/uploads/2014/06/DF.png" alt="DF"></p><p>　　最后，我们得出结论，这个人的收入层次70%是一等，大约24%为二等，6%为三等，所以最终认定该人属于一等收入层次（小于$40,000）。</p><h3 id="6-Scikit-learn实现随机森林"><a href="#6-Scikit-learn实现随机森林" class="headerlink" title="6. Scikit-learn实现随机森林"></a>6. Scikit-learn实现随机森林</h3><h4 id="6-1-以函数f-x-log-x-为例"><a href="#6-1-以函数f-x-log-x-为例" class="headerlink" title="6.1 以函数f(x)=log(x)为例"></a>6.1 以函数f(x)=log(x)为例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> pl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">x = np.random.uniform(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">y = np.log(x) + np.random.normal(<span class="number">0</span>, <span class="number">.3</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">pl.scatter(x, y, s=<span class="number">1</span>, label=<span class="string">"log(x) with noise"</span>)</span><br><span class="line"></span><br><span class="line">pl.plot(np.arange(<span class="number">1</span>, <span class="number">100</span>), np.log(np.arange(<span class="number">1</span>, <span class="number">100</span>)), c=<span class="string">"b"</span>, label=<span class="string">"log(x) true function"</span>)</span><br><span class="line">pl.xlabel(<span class="string">"x"</span>)</span><br><span class="line">pl.ylabel(<span class="string">"f(x) = log(x)"</span>)</span><br><span class="line">pl.legend(loc=<span class="string">"best"</span>)</span><br><span class="line">pl.title(<span class="string">"A Basic Log Function"</span>)</span><br><span class="line">pl.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3129325-32c47591f535a457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/610" alt=""></p><h4 id="6-2-简单python示例"><a href="#6-2-简单python示例" class="headerlink" title="6.2 简单python示例"></a>6.2 简单python示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">df = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">df[<span class="string">'is_train'</span>] = np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, len(df)) &lt;= <span class="number">.75</span></span><br><span class="line">df[<span class="string">'species'</span>] = pd.Categorical.from_codes(iris.target, iris.target_names)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">train, test = df[df[<span class="string">'is_train'</span>]==<span class="keyword">True</span>], df[df[<span class="string">'is_train'</span>]==<span class="keyword">False</span>]</span><br><span class="line"></span><br><span class="line">features = df.columns[:<span class="number">4</span>]</span><br><span class="line">clf = RandomForestClassifier(n_jobs=<span class="number">2</span>)</span><br><span class="line">y, _ = pd.factorize(train[<span class="string">'species'</span>])</span><br><span class="line">clf.fit(train[features], y)</span><br><span class="line"></span><br><span class="line">preds = iris.target_names[clf.predict(test[features])]</span><br><span class="line">pd.crosstab(test[<span class="string">'species'</span>], preds, rownames=[<span class="string">'actual'</span>], colnames=[<span class="string">'preds'</span>])</span><br></pre></td></tr></table></figure><h4 id="6-3-与其他机器学习分类算法进行对比"><a href="#6-3-与其他机器学习分类算法进行对比" class="headerlink" title="6.3 与其他机器学习分类算法进行对比"></a>6.3 与其他机器学习分类算法进行对比</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_moons, make_circles, make_classification</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier, AdaBoostClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"><span class="keyword">from</span> sklearn.lda <span class="keyword">import</span> LDA</span><br><span class="line"><span class="keyword">from</span> sklearn.qda <span class="keyword">import</span> QDA</span><br><span class="line"></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># step size in the mesh</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">"Nearest Neighbors"</span>, <span class="string">"Linear SVM"</span>, <span class="string">"RBF SVM"</span>, <span class="string">"Decision Tree"</span>,</span><br><span class="line">         <span class="string">"Random Forest"</span>, <span class="string">"AdaBoost"</span>, <span class="string">"Naive Bayes"</span>, <span class="string">"LDA"</span>, <span class="string">"QDA"</span>]</span><br><span class="line">classifiers = [</span><br><span class="line">    KNeighborsClassifier(<span class="number">3</span>),</span><br><span class="line">    SVC(kernel=<span class="string">"linear"</span>, C=<span class="number">0.025</span>),</span><br><span class="line">    SVC(gamma=<span class="number">2</span>, C=<span class="number">1</span>),</span><br><span class="line">    DecisionTreeClassifier(max_depth=<span class="number">5</span>),</span><br><span class="line">    RandomForestClassifier(max_depth=<span class="number">5</span>, n_estimators=<span class="number">10</span>, max_features=<span class="number">1</span>),</span><br><span class="line">    AdaBoostClassifier(),</span><br><span class="line">    GaussianNB(),</span><br><span class="line">    LDA(),</span><br><span class="line">    QDA()]</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_features=<span class="number">2</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>,</span><br><span class="line">                           random_state=<span class="number">1</span>, n_clusters_per_class=<span class="number">1</span>)</span><br><span class="line">rng = np.random.RandomState(<span class="number">2</span>)</span><br><span class="line">X += <span class="number">2</span> * rng.uniform(size=X.shape)</span><br><span class="line">linearly_separable = (X, y)</span><br><span class="line"></span><br><span class="line">datasets = [make_moons(noise=<span class="number">0.3</span>, random_state=<span class="number">0</span>),</span><br><span class="line">            make_circles(noise=<span class="number">0.2</span>, factor=<span class="number">0.5</span>, random_state=<span class="number">1</span>),</span><br><span class="line">            linearly_separable</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">figure = plt.figure(figsize=(<span class="number">27</span>, <span class="number">9</span>))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># iterate over datasets</span></span><br><span class="line"><span class="keyword">for</span> ds <span class="keyword">in</span> datasets:</span><br><span class="line">    <span class="comment"># preprocess dataset, split into training and test part</span></span><br><span class="line">    X, y = ds</span><br><span class="line">    X = StandardScaler().fit_transform(X)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line">    x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">.5</span>, X[:, <span class="number">0</span>].max() + <span class="number">.5</span></span><br><span class="line">    y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">.5</span>, X[:, <span class="number">1</span>].max() + <span class="number">.5</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),</span><br><span class="line">                         np.arange(y_min, y_max, h))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just plot the dataset first</span></span><br><span class="line">    cm = plt.cm.RdBu</span><br><span class="line">    cm_bright = ListedColormap([<span class="string">'#FF0000'</span>, <span class="string">'#0000FF'</span>])</span><br><span class="line">    ax = plt.subplot(len(datasets), len(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">    <span class="comment"># Plot the training points</span></span><br><span class="line">    ax.scatter(X_train[:, <span class="number">0</span>], X_train[:, <span class="number">1</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">    <span class="comment"># and testing points</span></span><br><span class="line">    ax.scatter(X_test[:, <span class="number">0</span>], X_test[:, <span class="number">1</span>], c=y_test, cmap=cm_bright, alpha=<span class="number">0.6</span>)</span><br><span class="line">    ax.set_xlim(xx.min(), xx.max())</span><br><span class="line">    ax.set_ylim(yy.min(), yy.max())</span><br><span class="line">    ax.set_xticks(())</span><br><span class="line">    ax.set_yticks(())</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># iterate over classifiers</span></span><br><span class="line">    <span class="keyword">for</span> name, clf <span class="keyword">in</span> zip(names, classifiers):</span><br><span class="line">        ax = plt.subplot(len(datasets), len(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">        clf.fit(X_train, y_train)</span><br><span class="line">        score = clf.score(X_test, y_test)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot the decision boundary. For that, we will assign a color to each</span></span><br><span class="line">        <span class="comment"># point in the mesh [x_min, m_max]x[y_min, y_max].</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(clf, <span class="string">"decision_function"</span>):</span><br><span class="line">            Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Z = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put the result into a color plot</span></span><br><span class="line">        Z = Z.reshape(xx.shape)</span><br><span class="line">        ax.contourf(xx, yy, Z, cmap=cm, alpha=<span class="number">.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot also the training points</span></span><br><span class="line">        ax.scatter(X_train[:, <span class="number">0</span>], X_train[:, <span class="number">1</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">        <span class="comment"># and testing points</span></span><br><span class="line">        ax.scatter(X_test[:, <span class="number">0</span>], X_test[:, <span class="number">1</span>], c=y_test, cmap=cm_bright,</span><br><span class="line">                   alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">        ax.set_xlim(xx.min(), xx.max())</span><br><span class="line">        ax.set_ylim(yy.min(), yy.max())</span><br><span class="line">        ax.set_xticks(())</span><br><span class="line">        ax.set_yticks(())</span><br><span class="line">        ax.set_title(name)</span><br><span class="line">        ax.text(xx.max() - <span class="number">.3</span>, yy.min() + <span class="number">.3</span>, (<span class="string">'%.2f'</span> % score).lstrip(<span class="string">'0'</span>),</span><br><span class="line">                size=<span class="number">15</span>, horizontalalignment=<span class="string">'right'</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">figure.subplots_adjust(left=<span class="number">.02</span>, right=<span class="number">.98</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​    比对图：</p><p><img src="https://images0.cnblogs.com/blog2015/764050/201506/191810324821860.png" alt=""></p><h3 id="推荐图书"><a href="#推荐图书" class="headerlink" title="推荐图书"></a>推荐图书</h3><ul><li><p>《Decision Forests for Computer Vision and Medical Image Analysis》</p><p><a href="http://www.springer.com/us/book/9781447149286" target="_blank" rel="noopener">http://www.springer.com/us/book/9781447149286</a></p><p>除了微软研究院的综述论文外，它还包括了一些在计算机视觉、医疗领域的应用论文。</p></li></ul><ul><li><a href="https://en.wikipedia.org/wiki/Kernel_random_forest" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Kernel_random_forest</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;集成学习，判别模型，多分类与回归，正则化的极大似然估计&lt;/p&gt;
&lt;p&gt;随机森林主页：&lt;a href=&quot;https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#inter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#inter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;套袋法(bagging)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​    该方法的第一步就是用数据集（用抽样法创建而成）创建多个模型。在抽样法中，每个生成的训练集由原始数据集的随机次级样本组成。每个训练集都和原始数据集一样大小，但有些记录会重复几次，有些记录则完全不出现。然后，整个原始数据集会被用作测试集。这样，如果原始数据集的大小为N，那么每个生成的训练集大小也为N，特殊记录的数量大约为（2N/3），测试集的大小也是N。&lt;/p&gt;
&lt;p&gt;​    第二步就是用和生成的不同数据集中一样的算法构建多个模型。在这一步中，我们讨论一下随机森林。不像决策树中，每个节点在将错误最小化的最佳特征处分裂，在随机森林中，我们选择各个特征的一个随机抽样用以构建最佳节点。之所以是随机，是因为：即便是用套袋法，当决策树选择一个最佳特征之处分裂时，最终会是相同的结构和相互关联的预测。但在各个特征的随机子集处分裂后再套袋（bagging）意味着根据子树的预测之间的相关性较低。&lt;/p&gt;
&lt;p&gt;​    在每个分叉点要搜索的特征数量被指定为随机森林算法的一个参数。&lt;/p&gt;
&lt;p&gt;​    这样，在随机森林 bagging 中，用记录中的随机样本构造每个决策树，用预测器的随机样本构造每个分裂。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="监督学习" scheme="http://yoursite.com/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="集成学习" scheme="http://yoursite.com/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随机森林" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之AdaBoost</title>
    <link href="http://yoursite.com/2018/02/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BAdaBoost/"/>
    <id>http://yoursite.com/2018/02/01/机器学习之AdaBoost/</id>
    <published>2018-02-01T15:28:36.000Z</published>
    <updated>2018-02-16T03:04:57.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分类、集成、属于Boosting</p><p>什么是Boosting？</p><p>Boosting是一种广泛应用的集成学习框架，该框架一般的训练过程是依次训练基础模型，并在训练过程中对训练集不断地进行调整，也即当前训练所用的训练集由前一次训练的训练集根据某些策略调整得到，最后将所有基础模型组合起来即为最终得到的模型。</p><p>监督学习最优方法之一</p><p>AdaBoost算法是模型为加法模型、损失函数为指数函数、学习算法为向前同步算法时的二类分类学习方法。</p><p>优点：泛化错误率低，易编码，可以应用到大部分分类器上，少参数调整。</p><p>缺点：对离群点敏感。</p><p>适用数据类型：数值型和标称型数据    /     二分类问题、多分类问题、回归问题</p></blockquote><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p><strong>强可学习</strong></p><p>在概率近似正确学习的框架中，一个概念（类），如果存在一个多项式的学习算法能够学习它，并且正确率很高。</p></li></ul><ul><li><p><strong>弱可学习</strong></p><p>在概率近似正确学习的框架中，一个概念，如果存在一个多项式的学习算法能够学习它，学习的正确率仅比随机猜测略好。</p></li><li><p><strong>提升方法</strong></p><p>从弱学习算法除法，反复学习，得到一系列弱分类器（又称基本分类器），然后组合这些弱分类器，构成一个强分类器</p></li></ul><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li><p>每一轮如何改变训练数据的权值或者概率分布</p><p>提高前一轮中被错误分类的样本的权值，降低被正确分类的样本的权值。</p><p>目的：没有得到正确分类的数据的权值的加大受到后一轮弱分类器的关注。</p></li><li><p>如何将弱分类器组合成一个强分类器</p><p>加权多数表决方法。</p><p>加大正确率高的弱分类器，减小正确率低的分类器。</p></li></ol><h4 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h4><p>​    先从初始训练集合中训练出一个基学习器，再根据基学习器的表现对训练样本的权重进行调整，使得先前基学习器做错的样本在后续得到更多的关注，然后基于调整后的样本权重来训练下一个基学习器，直到基学习器的数目达到事先指定的数目M，最终将这M个学习器进行加权组合。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>输入：</p><p>​                                       <img src="http://www.zhihu.com/equation?tex=T%3D%5Cleft%5C%7B+%28x_%7B1%7D%2Cy_%7B1%7D%29%2C+%28x_%7B2%7D%2Cy_%7B2%7D%29%2C...+%28x_%7BN%7D%2Cy_%7BN%7D%29%5Cright%5C%7D" alt="T=\left\{ (x_{1},y_{1}), (x_{2},y_{2}),... (x_{N},y_{N})\right\}">    其中 <img src="http://www.zhihu.com/equation?tex=x%5Cin+R%5E%7Bn%7D" alt="x\in R^{n}"> , <img src="http://www.zhihu.com/equation?tex=y%5Cin+%5Cleft%5C%7B+-1%2C%2B1+%5Cright%5C%7D" alt="y\in \left\{ -1,+1 \right\}"> 和一个弱学习算法</p><ul><li>初始化训练数据权值</li></ul><p><img src="http://www.zhihu.com/equation?tex=D_%7B1%7D%3D%5Cleft%5C%7B+w_%7B11%7D%2Cw_%7B12%7D%2C...w_%7B1N%7D+%5Cright%5C%7D%2Cw_%7B1i%7D%3D%5Cfrac%7B1%7D%7BN%7D" alt="D_{1}=\left\{ w_{11},w_{12},...w_{1N} \right\},w_{1i}=\frac{1}{N}"></p><p>​            第m个基分类器的样本权重为：<img src="http://www.zhihu.com/equation?tex=D_%7Bm%7D%3D%5Cleft%5C%7B+w_%7Bm1%7D%2Cw_%7Bm2%7D%2C...w_%7BmN%7D+%5Cright%5C%7D%EF%BC%8C%5Csum_%7Bi%3D1%7D%5E%7BN%7D%7Bw_%7Bmi%7D%3D1%7D" alt="D_{m}=\left\{ w_{m1},w_{m2},...w_{mN} \right\}，\sum_{i=1}^{N}{w_{mi}=1}"></p><ul><li><p>在此权值上训练弱分类器（策略为最小化分类误差率）  </p></li><li><p>计算分类误差率（误分类样本的权值之和）</p><p>​                                        <img src="http://www.zhihu.com/equation?tex=f%28x%29%3D%5Csum_%7Bi%3D1%7D%5E%7BM%7D%7B%5Calpha_%7Bi%7DG_%7Bi%7D%28x%29%7D" alt="f(x)=\sum_{i=1}^{M}{\alpha_{i}G_{i}(x)}"></p><p>其中 <img src="http://www.zhihu.com/equation?tex=%5Calpha_%7Bi%7D" alt="\alpha_{i}"> 为第i个基学习器的系数， <img src="http://www.zhihu.com/equation?tex=G_%7Bi%7D%28x%29" alt="G_{i}(x)"> 为第i个基学习器。            </p></li><li><p>计算分类器系数（要用到上一步的分类误差率）</p><p>​</p></li><li><p>更新训练权值-&gt;</p></li><li><p>构建基本分类器的线性组合，一直循环，直到基本分类器的线性组合没有误分类点。   </p></li></ul><h3 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h3><h4 id="单决策树生成函数："><a href="#单决策树生成函数：" class="headerlink" title="单决策树生成函数："></a>单决策树生成函数：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadsimpData</span><span class="params">()</span>:</span></span><br><span class="line">    dataMat=matrix([[<span class="number">1</span>,<span class="number">2.1</span>],</span><br><span class="line">                    [<span class="number">2</span>,<span class="number">1.1</span>],</span><br><span class="line">                    [<span class="number">1.3</span>,<span class="number">1</span>],</span><br><span class="line">                    [<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                    [<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line">    classLabels=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> dataMat,classLabels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单层决策树生成函数</span></span><br><span class="line"><span class="comment"># dimen是哪一个特征；threshVal是特征阈值；threshIneq是大于还是小于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stumpClassify</span><span class="params">(dataMatrix,dimen,threshVal,threshIneq)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化一个全1列表</span></span><br><span class="line">    retArray=ones((shape(dataMatrix)[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(threshIneq==<span class="string">'lt'</span>):</span><br><span class="line">        <span class="comment"># 以阈值划分后，小于等于阈值的，类别定为-1</span></span><br><span class="line">        retArray[dataMatrix[:,dimen]&lt;=threshVal]=<span class="number">-1.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        retArray[dataMatrix[:,dimen]&gt;threshVal]=<span class="number">-1.0</span></span><br><span class="line">    <span class="keyword">return</span> retArray</span><br><span class="line"></span><br><span class="line"><span class="comment"># D是权重向量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildStump</span><span class="params">(dataArr,classLabels,D)</span>:</span></span><br><span class="line">    dataMatrix=mat(dataArr);labelMat=mat(classLabels).T</span><br><span class="line">    m,n=shape(dataMatrix)</span><br><span class="line">    numSteps=<span class="number">10.0</span>;bestStump=&#123;&#125;;bestClassEst=mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="comment"># 最小值初始化为无穷大</span></span><br><span class="line">    minError=inf</span><br><span class="line">    <span class="comment"># 对每一个特征</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="comment"># 找到最大值和最小值</span></span><br><span class="line">        rangeMin=dataMatrix[:,i].min()</span><br><span class="line">        rangeMax=dataMatrix[:,i].max()</span><br><span class="line">        <span class="comment"># 确定步长</span></span><br><span class="line">        stepSize=(rangeMax-rangeMin)/numSteps</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1</span>,int(numSteps)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> inequal <span class="keyword">in</span> [<span class="string">'lt'</span>,<span class="string">'gt'</span>]:</span><br><span class="line">                <span class="comment"># 得到阈值</span></span><br><span class="line">                threshVal=(rangeMin+float(j)*stepSize)</span><br><span class="line">                <span class="comment"># 调用函数，并得到分类列表</span></span><br><span class="line">                predictedVals=stumpClassify(dataMatrix,i,threshVal,inequal)</span><br><span class="line">                <span class="comment"># 初始化errArr</span></span><br><span class="line">                errArr=mat(ones((m,<span class="number">1</span>)))</span><br><span class="line">                <span class="comment"># 将errArr中分类正确的置为0</span></span><br><span class="line">                errArr[predictedVals==labelMat]=<span class="number">0</span></span><br><span class="line">                <span class="comment"># 计算加权错误率</span></span><br><span class="line">                weightedError=D.T*errArr</span><br><span class="line">                <span class="comment"># print("split:dim %d,thresh %.2f,thresh inequal:"</span></span><br><span class="line">                       <span class="comment"># "%s,the weighted error is %.3f"%(i,threshVal,</span></span><br><span class="line">                          inequal,weightedError))</span><br><span class="line">                <span class="comment"># 如果错误率比之前的小</span></span><br><span class="line">                <span class="keyword">if</span>(weightedError&lt;minError):</span><br><span class="line">                    minError=weightedError</span><br><span class="line">                    <span class="comment"># bestClassEst中是错误最小的分类类别</span></span><br><span class="line">                    bestClassEst=predictedVals.copy()</span><br><span class="line">                    bestStump[<span class="string">'dim'</span>]=i</span><br><span class="line">                    bestStump[<span class="string">'thresh'</span>]=threshVal</span><br><span class="line">                    bestStump[<span class="string">'ineq'</span>]=inequal</span><br><span class="line">    <span class="keyword">return</span> bestStump,minError,bestClassEst</span><br></pre></td></tr></table></figure><h4 id="基于单决策树的Adaboosting训练过程："><a href="#基于单决策树的Adaboosting训练过程：" class="headerlink" title="基于单决策树的Adaboosting训练过程："></a>基于单决策树的Adaboosting训练过程：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于单层决策树的Adaboost训练过程</span></span><br><span class="line"><span class="comment"># numIt表示最多迭代的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaBoostTrainDS</span><span class="params">(dataArr,classLabels,numIt=<span class="number">40</span>)</span>:</span></span><br><span class="line">    weakClassArr=[]</span><br><span class="line">    m=shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 初始化权重矩阵D,1/m</span></span><br><span class="line">    D=mat(ones((m,<span class="number">1</span>))/m)</span><br><span class="line">    <span class="comment"># 初始化，aggClassEst里面存放的是类别估计的累计值</span></span><br><span class="line">    aggClassEst=mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numIt):</span><br><span class="line">        bestStump,error,classEst=buildStump(dataArr,classLabels,D)</span><br><span class="line">        print(<span class="string">"D:"</span>,D.T)</span><br><span class="line">        <span class="comment"># 计算分类器的系数；max（）的作用是防止error=0</span></span><br><span class="line">        alpha=float(<span class="number">0.5</span>*log((<span class="number">1.0</span>-error)/max(error,<span class="number">1e-16</span>)))</span><br><span class="line">        bestStump[<span class="string">'alpha'</span>]=alpha</span><br><span class="line">        weakClassArr.append(bestStump)</span><br><span class="line">        print(<span class="string">"classEst:"</span>,classEst.T)</span><br><span class="line">        <span class="comment"># 下面三行是对权重向量进行更新，具体公式推导见正文</span></span><br><span class="line">        expon=multiply(<span class="number">-1</span>*alpha*mat(classLabels).T,classEst)</span><br><span class="line">        D=multiply(D,exp(expon))</span><br><span class="line">        D=D/D.sum()</span><br><span class="line">        <span class="comment"># 计算类别估计的累加值</span></span><br><span class="line">        aggClassEst+=alpha*classEst</span><br><span class="line">        print(<span class="string">'aggClassEst:'</span>,aggClassEst.T)</span><br><span class="line">        <span class="comment"># 计算分类错误的个数</span></span><br><span class="line">        aggErrors=multiply(sign(aggClassEst)!=mat(classLabels).T,</span><br><span class="line">                           ones((m,<span class="number">1</span>)))</span><br><span class="line">        <span class="comment"># 计算分类错误率</span></span><br><span class="line">        errorRate=aggErrors.sum()/m</span><br><span class="line">        print(<span class="string">"total error:"</span>,errorRate,<span class="string">"\n"</span>)</span><br><span class="line">        <span class="comment"># 如果分类错误率为0，则结束</span></span><br><span class="line">        <span class="keyword">if</span>(errorRate==<span class="number">0</span>):<span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 返回建立的分类器列表</span></span><br><span class="line">    <span class="keyword">return</span> weakClassArr</span><br></pre></td></tr></table></figure><h4 id="daboost分类函数"><a href="#daboost分类函数" class="headerlink" title="daboost分类函数"></a>daboost分类函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># adaBoost分类函数</span></span><br><span class="line"><span class="comment"># datToClass是待分类数据；classifierArr是建立好的分类器列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaClassify</span><span class="params">(datToClass,classifierArr)</span>:</span></span><br><span class="line">    dataMatrix=mat(datToClass)</span><br><span class="line">    m=shape(dataMatrix)[<span class="number">0</span>]</span><br><span class="line">    aggClassEst=mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="comment"># 对每一个弱分类器</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(classifierArr)):</span><br><span class="line">        <span class="comment"># 得到分类类别</span></span><br><span class="line">        classEst=stumpClassify(dataMatrix,classifierArr[i][<span class="string">'dim'</span>],</span><br><span class="line">                               classifierArr[i][<span class="string">'thresh'</span>],</span><br><span class="line">                               classifierArr[i][<span class="string">'ineq'</span>])</span><br><span class="line">        <span class="comment"># 计算类别估计累加值</span></span><br><span class="line">        aggClassEst+=classifierArr[i][<span class="string">'alpha'</span>]*classEst</span><br><span class="line">        print(aggClassEst)</span><br><span class="line">    <span class="comment"># 返回类别；sign(x)函数：x&gt;0返回1；x&lt;0返回-1；x=0返回0</span></span><br><span class="line">    <span class="keyword">return</span> sign(aggClassEst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自适应数据加载函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    <span class="comment"># 得到特征数目</span></span><br><span class="line">    numFeat=len(open(fileName).readline().split(<span class="string">'\t'</span>))</span><br><span class="line">    dataMat=[];labelMat=[]</span><br><span class="line">    fr=open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        lineArr=[]</span><br><span class="line">        curLine=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># 对每一个特征</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numFeat<span class="number">-1</span>):</span><br><span class="line">            lineArr.append(float(curLine[i]))</span><br><span class="line">        dataMat.append(lineArr)</span><br><span class="line">        labelMat.append(float(curLine[<span class="number">-1</span>]))</span><br><span class="line">    <span class="comment"># 返回特征矩阵和类别矩阵</span></span><br><span class="line">    <span class="keyword">return</span> dataMat,labelMat</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>提升树</strong></p><p>是以分类树或回归树为基本分类器的提升方法。</p><p>提升树被认为是统计学习中性能最好的方法之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分类、集成、属于Boosting&lt;/p&gt;
&lt;p&gt;什么是Boosting？&lt;/p&gt;
&lt;p&gt;Boosting是一种广泛应用的集成学习框架，该框架一般的训练过程是依次训练基础模型，并在训练过程中对训练集不断地进行调整，也即当前训练所用的训练集由前一次训练的训练集根据某些策略调整得到，最后将所有基础模型组合起来即为最终得到的模型。&lt;/p&gt;
&lt;p&gt;监督学习最优方法之一&lt;/p&gt;
&lt;p&gt;AdaBoost算法是模型为加法模型、损失函数为指数函数、学习算法为向前同步算法时的二类分类学习方法。&lt;/p&gt;
&lt;p&gt;优点：泛化错误率低，易编码，可以应用到大部分分类器上，少参数调整。&lt;/p&gt;
&lt;p&gt;缺点：对离群点敏感。&lt;/p&gt;
&lt;p&gt;适用数据类型：数值型和标称型数据    /     二分类问题、多分类问题、回归问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="AdaBoost 集成学习" scheme="http://yoursite.com/tags/AdaBoost-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之感知机</title>
    <link href="http://yoursite.com/2018/01/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/01/22/机器学习之感知机/</id>
    <published>2018-01-21T16:07:57.000Z</published>
    <updated>2018-02-12T04:40:02.390Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>监督学习、二类分类、线性分类模型、判别模型</p><p>感知器是 ANN 和 SVM 的基础。</p></blockquote><p><strong>背景</strong>：</p><blockquote><p>在生物神经网络中，每个神经元与其他神经元相连，当它‘兴奋‘时，就会向相连的神经元发送化学物种，从而改变这些神经元内的点位；如果某神经元的点位超过了一个’阈值‘，那就它就会被激活，进而向其他神经元发送化学物质。</p><p>感知器在 20 世纪五、六⼗年代由科学家 Frank Rosenblatt 基于MCP神经元模型发明的，⼀个感知器接受多个输⼊，并产⽣⼀个输出。</p></blockquote><p><strong>前提</strong>：</p><blockquote><p>两个类别必须是线性可分的，且学习速率足够小。</p></blockquote><a id="more"></a><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul><li><p><strong>M-P神经元模型/阈值逻辑单元</strong>：</p><p>神经元接收到来自n个其他神经元传递过来的输入信号，这些输入信号通过带权重的连接进行传递，神经元接收到的总输入值与神经元的阈值进行比较，然后通过激活函数处理产生神经元输出。</p></li><li><p><strong>线性可分</strong></p><p>​</p></li><li><p><strong>非线性可分</strong></p></li></ul><blockquote><p>若两类模式是线性可分的，即存在一个线性超平面能将他们分开，则感知机学习过程中一定会收敛，而求得适当的权向量w。否则感知机学习过程中将会发生震荡，w难以稳定下来，不能求得合适解。</p></blockquote><h3 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h3><blockquote><p>模型特点：分离超平面</p><p>学习策略：极小化误分点到超平面距离</p><p>学习的损失函数：误分点到超平面的距离</p><p>学习算法：随机梯度下降</p></blockquote><p><strong>基本步骤</strong>：</p><p>感知器可以表示为 f:RN→{−1,1} 的映射函数。其中 f 的形式如下： </p><p>f(x)=sign(w.x+b)</p><p>其中，w 和 b 都是 N 维向量，是感知器的模型参数。感知器的训练过程其实就是求解w 和 b 的过程。</p><p>正确的 w 和 b 所构成的超平面 w.x+b=0 恰好将两类数据点分割在这个平面的两侧。</p><h4 id="2-1-原始形式"><a href="#2-1-原始形式" class="headerlink" title="2.1 原始形式"></a>2.1 <strong>原始形式</strong></h4><p><strong>组成部分</strong>：</p><ul><li><p><strong>输入权值</strong> </p><p>一个感知器可以接收多个输入<br>(x1,x2,…,xn∣xi∈R)，每个输入上有一个权值wi∈R，此外还有一个偏置项b∈R，就是上图中的w0。</p></li><li><p><strong>求和单元</strong></p><p>用突触权值对输入进行加权并加上偏置，得到诱导局部域（v）</p></li><li><p><strong>激活函数</strong> </p><p>（即图中的hard limiter）用于限制诱导局部域输出的振幅，在感知器中，使用符号函数来限制输出（当v&gt;0时输出为1，反之为-1）</p></li><li><p><strong>输出</strong> </p><p>感知器的输出由下面这个公式来计算          y=f(w∙x+b)</p></li></ul><p><strong>概念图</strong>：</p><p><img src="ganzhiji.png" alt="感知器概念"></p><p><strong>误差函数</strong>：</p><p>误分类的点(xi,yi)，则 xi 距离超平面的距离为：   </p><p><img src="distance.png" alt="距离"></p><p>损失函数为所有误分类数据点到超平面的距离之和：</p><p><img src="wucha.png" alt="误差"></p><p>感知器的训练算法就是求取使得 L(w,b)=0 的 w 和 b 。</p><h4 id="2-1-对偶形式"><a href="#2-1-对偶形式" class="headerlink" title="2.1 对偶形式"></a>2.1 <strong>对偶形式</strong></h4><blockquote><p>基本想法：将w和b表示为实例x和y的线性组合的形式，通过求解其系数求得w和b</p><p>感知机学习算法的对偶形式迭代是收敛的，存在多个解</p></blockquote><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h2 id="4-python代码实现感知器："><a href="#4-python代码实现感知器：" class="headerlink" title="4. python代码实现感知器："></a>4. python代码实现感知器：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------罗森布拉特感知器------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Perceptron classfiter.</span></span><br><span class="line"><span class="string">    Percepters</span></span><br><span class="line"><span class="string">    --------------------</span></span><br><span class="line"><span class="string">    eta : float</span></span><br><span class="line"><span class="string">        learning rate (between 0.0 and 1.0)</span></span><br><span class="line"><span class="string">    n_iter : int</span></span><br><span class="line"><span class="string">        Passes over tne training dataset.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Attributes</span></span><br><span class="line"><span class="string">    ---------------------</span></span><br><span class="line"><span class="string">    w_ : ld-array</span></span><br><span class="line"><span class="string">        Weights after fitting.</span></span><br><span class="line"><span class="string">    errors_ : list</span></span><br><span class="line"><span class="string">        Number of misclassifications in every epoch</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, eta=<span class="number">0.01</span>, n_iter=<span class="number">10</span>)</span> :</span></span><br><span class="line">        self.eta = eta</span><br><span class="line">        self.n_iter = n_iter</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span> :</span></span><br><span class="line">        <span class="string">"""fit training data.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        -------------------</span></span><br><span class="line"><span class="string">        X ： &#123;arrary-like&#125;, shape = [n_sample, n_features]</span></span><br><span class="line"><span class="string">             Training vectors, where n_samples is the number of samples and n_feature is the number of  features</span></span><br><span class="line"><span class="string">        y ： array-like, shape = [n_samples]</span></span><br><span class="line"><span class="string">             Target Values</span></span><br><span class="line"><span class="string">             </span></span><br><span class="line"><span class="string">        Returns</span></span><br><span class="line"><span class="string">        -------------------</span></span><br><span class="line"><span class="string">        self : object</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.w_ = np.zeros(<span class="number">1</span> + X.shape[<span class="number">1</span>])</span><br><span class="line">        self.errors_ = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n_iter):</span><br><span class="line">            errors = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> xi, target <span class="keyword">in</span> zip(X, y):</span><br><span class="line">                update = self.eat * (target - selfpredict(xi))</span><br><span class="line">                self.w_[<span class="number">1</span>:] += update * xi</span><br><span class="line">                self.w_[<span class="number">0</span>] += update</span><br><span class="line">                errors += int(update != <span class="number">0.0</span>)</span><br><span class="line">            self.errors_.append(errors)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">net_input</span><span class="params">(sel, X)</span>:</span></span><br><span class="line">        <span class="string">"""Calculate net input"""</span></span><br><span class="line">        <span class="keyword">return</span> np.dot(X, self.w_[<span class="number">1</span>:]) + self.w_[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predic</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return class label after unit step"""</span></span><br><span class="line">        <span class="keyword">return</span> np.where(sel.net_input(x) &gt;= <span class="number">0.0</span>, <span class="number">1</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h2><ul><li>算法收敛性的证明：</li></ul><p>​    李航《统计学习方法》P31</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;监督学习、二类分类、线性分类模型、判别模型&lt;/p&gt;
&lt;p&gt;感知器是 ANN 和 SVM 的基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在生物神经网络中，每个神经元与其他神经元相连，当它‘兴奋‘时，就会向相连的神经元发送化学物种，从而改变这些神经元内的点位；如果某神经元的点位超过了一个’阈值‘，那就它就会被激活，进而向其他神经元发送化学物质。&lt;/p&gt;
&lt;p&gt;感知器在 20 世纪五、六⼗年代由科学家 Frank Rosenblatt 基于MCP神经元模型发明的，⼀个感知器接受多个输⼊，并产⽣⼀个输出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类别必须是线性可分的，且学习速率足够小。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="感知器" scheme="http://yoursite.com/tags/%E6%84%9F%E7%9F%A5%E5%99%A8/"/>
    
      <category term="神经元" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之主成分分析（PCA）</title>
    <link href="http://yoursite.com/2018/01/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/18/机器学习之主成分分析（PCA）/</id>
    <published>2018-01-18T02:01:39.000Z</published>
    <updated>2018-02-13T15:07:42.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主成分分析（principal component analysis，PCA）是一种广泛应用于不用领域的无监督现行数据转换技术，其突出的作用是降维。</p><p>降维思想：在信息丢失最少的原则下，研究指标体系的少数几个线性组合，即对高维变量空间降维。</p><p>线性组合所构成的综合指标尽可能多地保留了原数据信息。这些综合指标就称为主成分。</p></blockquote><a id="more"></a><h2 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h2><p>设X1，X2，…，Xp为某实际问题所涉及的p个随机变量（指标），主成分分析就是把这p个指标的问题，转变为讨论p个指标的线性组合的问题，而这些新的指标F1，F2，…，Fk(k≤p），按照保留主要信息量的原则充分反映原指标的信息，并且相互独立。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主成分分析（principal component analysis，PCA）是一种广泛应用于不用领域的无监督现行数据转换技术，其突出的作用是降维。&lt;/p&gt;
&lt;p&gt;降维思想：在信息丢失最少的原则下，研究指标体系的少数几个线性组合，即对高维变量空间降维。&lt;/p&gt;
&lt;p&gt;线性组合所构成的综合指标尽可能多地保留了原数据信息。这些综合指标就称为主成分。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
      <category term="降维" scheme="http://yoursite.com/tags/%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>《python机器学习》笔记</title>
    <link href="http://yoursite.com/2018/01/18/%E3%80%8Apython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/18/《python机器学习》笔记/</id>
    <published>2018-01-17T16:10:00.000Z</published>
    <updated>2018-02-16T03:03:00.072Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是塞巴斯蒂安·拉施卡（Sebastian Raschka）所著的《Python机器学习》一书的学习笔记，所有练习代码来源于书中。</p></blockquote><h2 id="第一章-赋予机器学习数据的能力"><a href="#第一章-赋予机器学习数据的能力" class="headerlink" title="第一章  赋予机器学习数据的能力"></a>第一章  赋予机器学习数据的能力</h2><p>主要讲述了以下几点：</p><ul><li><p>机器学习分类：监督学习、无监督学习、强化学习。通过监督学习对未来事件进行预测，通过强化学习解决交互式问题，通过无监督学习发现数据本身潜在的结构。</p></li><li><p>步骤：数据预处理，选择模型类型并进行训练，模型检验与使用位置数据进行预测。</p></li><li><p>Python在机器学习中的应用：Numpy、SciPy、scikit-learn、matplotlab、pandas。</p><a id="more"></a></li></ul><h2 id="第二章-机器学习分类算法"><a href="#第二章-机器学习分类算法" class="headerlink" title="第二章  机器学习分类算法"></a>第二章  机器学习分类算法</h2><p>主要讲述了一下几点：</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是塞巴斯蒂安·拉施卡（Sebastian Raschka）所著的《Python机器学习》一书的学习笔记，所有练习代码来源于书中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第一章-赋予机器学习数据的能力&quot;&gt;&lt;a href=&quot;#第一章-赋予机器学习数据的能力&quot; class=&quot;headerlink&quot; title=&quot;第一章  赋予机器学习数据的能力&quot;&gt;&lt;/a&gt;第一章  赋予机器学习数据的能力&lt;/h2&gt;&lt;p&gt;主要讲述了以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;机器学习分类：监督学习、无监督学习、强化学习。通过监督学习对未来事件进行预测，通过强化学习解决交互式问题，通过无监督学习发现数据本身潜在的结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;步骤：数据预处理，选择模型类型并进行训练，模型检验与使用位置数据进行预测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python在机器学习中的应用：Numpy、SciPy、scikit-learn、matplotlab、pandas。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python机器学习" scheme="http://yoursite.com/tags/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hello my blog</title>
    <link href="http://yoursite.com/2018/01/18/hello-my-blog/"/>
    <id>http://yoursite.com/2018/01/18/hello-my-blog/</id>
    <published>2018-01-17T16:00:05.000Z</published>
    <updated>2018-02-16T03:05:15.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天建立了我的一个博客。</p><p>我会用这个博客记录我学习的过程，记录学习和生活中的点点滴滴.</p><p>加油！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天建立了我的一个博客。&lt;/p&gt;
&lt;p&gt;我会用这个博客记录我学习的过程，记录学习和生活中的点点滴滴.&lt;/p&gt;
&lt;p&gt;加油！&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="乱七八糟" scheme="http://yoursite.com/categories/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Hello" scheme="http://yoursite.com/tags/Hello/"/>
    
  </entry>
  
</feed>
